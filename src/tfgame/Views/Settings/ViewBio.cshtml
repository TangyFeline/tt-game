@model TT.Domain.ViewModels.BioPageViewModel
@using tfgame.CustomHtmlHelpers
@using TT.Domain.ViewModels
@using TT.Domain.Models
@using TT.Domain.Procedures

<nav class="navbar navbar-default outsideContainer navbarTT2">
    <div class="container-fluid">
        <!-- Brand and toggle get grouped for better mobile display -->
        <div class="navbar-header">
            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-2">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
        </div>

        <!-- Collect the nav links, forms, and other content for toggling -->
        <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-2">
            <ul class="nav navbar-nav">
                <li>@Html.ActionLink("Back to game", "Play", "PvP")</li>
            </ul>
        </div><!-- /.navbar-collapse -->
    </div><!-- /.container-fluid -->
</nav>

<div class="containerInner">
    <h1>Player Bio for @ViewBag.Name</h1>

    @{
        if (Model.PlayerBio.WebsiteURL != "")
        {
            <h3>Website</h3>

            @*<p>@CharactersHere.StringToWebsite(Model.WebsiteURL)</p>*@

            <p>@Model.PlayerBio.WebsiteURL</p>
        }
    }


    <h3>Bio</h3>

    @{
        if (Model.PlayerBio.Text != null && Model.PlayerBio.Text != "")
        {
            <p>@Html.Raw(Model.PlayerBio.Text.Replace("[br]", "<br/>"))</p>
        }
    }


    <h3>RP Tags</h3>

    @Html.HiddenFor(m => m.PlayerBio.Tags)

    @Html.Partial("partial/rptags")

    <p class="timeago">Last updated @Model.PlayerBio.Timestamp</p><br />

    @{
        if (ViewBag.MyContributions.Count > 0)
        {
            foreach (BioPageContributionViewModel s in ViewBag.MyContributions)
            {
                <p>Author of the <b>@s.SpellName</b> spell which transforms its victim into the <b>@s.FormName</b> form.</p>
            }
        }

        if (ViewBag.MyEffectContributions.Count > 0)
        {
            foreach (BioPageEffectContributionViewModel s in ViewBag.MyEffectContributions)
            {
                if (s.SpellName != null && s.EffectName != "")
                {
                    <p>Author of the <b>@s.EffectName</b> effect cast which is gained by being struck with the <b>@s.SpellName</b> spell.</p>
                }
                else
                {
                    <p>Author of the <b>@s.EffectName</b> effect.</p>
                }

            }
        }

    }

    <h3>Achievement Badges Earned (@Model.Badges.Count())</h3>

    <div class="row">
        @{
            foreach (AchievementBadge a in Model.Badges)
            {
                <div class="col-md-4 stats-leader" style="height: auto;">
                    <img src="~/Images/PvP/Icons/@StatsProcedures.StatTypesMap[a.AchievementType].ImageUrl" style="height:100px; width: 100px; margin: 3px; float:left;" />
                    <h3 style="margin-top:110px !important;">@StatsProcedures.StatTypesMap[a.AchievementType].FriendlyName</h3><h4> <i>@a.Round</i></h4>
                    <p><i>@StatsProcedures.StatTypesMap[a.AchievementType].Description:</i> <b>@String.Format("{0:n0}", a.Amount)</b></p>
                </div>
            }
        }
    </div>

</div>







    <script>


        $(document).ready(function () {

            var tagstring = $("#PlayerBio_Tags").val();
            console.log("Raw string:  " + tagstring);

            // assign the proper styling onload
            $(".rpTag").each(function () {

                var code = $(this).attr("tagcode");
                var regexs = ";" + code + ".[0-9];";
                var regex = new RegExp(regexs, "i")
                var smatch = tagstring.match(regex);

                // currently exists; increment its state
                if (smatch !== null) {
                    console.log("Match found:  " + smatch);
                    var numberValue = smatch[0].match(/[0-9]/);
                    console.log("Value of match:  " + numberValue);

                    if (numberValue == 0) {
                        $(this).addClass("neg2");
                    } else if (numberValue == 1) {
                        $(this).addClass("neg1");
                    } else if (numberValue == 2) {
                        $(this).addClass("pos1");
                    } else if (numberValue == 3) {
                        $(this).addClass("pos2");
                    }
                }
            });

        });

    </script>
