@using TT.Domain.Procedures

@model IEnumerable<TT.Domain.Identity.DTOs.StatDetail>

<nav class="navbar navbar-default outsideContainer navbarTT2">
    <div class="container-fluid">
        <!-- Brand and toggle get grouped for better mobile display -->
        <div class="navbar-header">
            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-2">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
        </div>

        <!-- Collect the nav links, forms, and other content for toggling -->
        <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-2">
            <ul class="nav navbar-nav">
                <li><a href="@Url.Action(MVC.PvP.Play())">Back to game</a></li>
                <li><a href="@Url.Action(MVC.PvP.LookAtPlayer((int)ViewBag.PlayerId))">Look at Player</a></li>
                <li><a href="@Url.Action(MVC.Leaderboard.PlayerStatsLeaders())">Global Statistics</a></li>
            </ul>
        </div><!-- /.navbar-collapse -->
    </div><!-- /.container-fluid -->
</nav>

<div class="containerInner">
    <h1>@ViewBag.Name's @TT.Domain.Statics.PvPStatics.AlphaRound Statistics</h1>
    <p><i>Note:  Achievements marked with <span class="playerMediatingNotification">*</span> are reset upon character reroll.</i></p>
    <div class="row">
        @{
            foreach (string f in TT.Domain.Procedures.StatsProcedures.StatTypesMap.Keys)
            {
                var ach = Model.FirstOrDefault(a => a.AchievementType == f);
                if (ach != null)
                {
                    <div class="col-md-4 stats-leader">
                        <img src="~/Images/PvP/achievements/@StatsProcedures.StatTypesMap[f].ImageUrl" style="height:100px; width: 100px; margin: 3px; float:left;" />
                        <h3 style="margin-top:110px !important;">@StatsProcedures.StatTypesMap[f].FriendlyName
                        
                        @{ 
                            if (StatsProcedures.StatTypesMap[f].ResetsOnReroll)
                            {
                                <span class="playerMediatingNotification">*</span>
                            }
                        }
                        
                        </h3>
                        <p><i>@StatsProcedures.StatTypesMap[f].Description:</i> <b>@String.Format("{0:n0}", ach.Amount)</b></p>
                    </div>
                }
            }
        }
    </div>
</div>