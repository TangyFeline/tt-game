@using TT.Domain.Statics
@model TT.Domain.ViewModels.AddStrikeViewModel
@{
    ViewBag.Title = "Strike Page";
    // TODO:  get rid of this crap once all links to round number are done via integer, not string
    var round = int.Parse(PvPStatics.AlphaRound.Split(' ')[2]); // 'Alpha Round 42' gets split up, take the 3rd position which is the number... hack, I know
}

@section menu
{
    <li><a href="@Url.Action(MVC.PvP.Play())">Back to game</a></li>
    @{
        if (User.IsInRole(PvPStatics.Permissions_Admin) || User.IsInRole(PvPStatics.Permissions_Moderator))
        {
            <li><a href="@Url.Action(MVC.Moderator.Index())">Back to moderator panel</a></li>
        }
    }
}

<div class="containerInner">
    @{ if (User.IsInRole(PvPStatics.Permissions_Admin) || User.IsInRole(PvPStatics.Permissions_Moderator))
        {
            <h1>View Strikes</h1>
            <p>Moderators can assign a strike to a misbehaving player here.</p><br>

            <p>This strike is being posted against <a href="@Url.Action(MVC.PvP.LookAtPlayer_FromMembershipId(Model.UserId))">@Model.PlayerUserStrikesDetail.FirstName @Model.PlayerUserStrikesDetail.LastName</a> with the account name "<b>@Model.PlayerUserStrikesDetail.User.UserName</b>".</p><br>

            <p>@Model.PlayerUserStrikesDetail.FirstName is at <b>@Model.PlayerUserStrikesDetail.User.Strikes.Count(s => s.Round == round)/@PvPStatics.MaxStrikesPerRound</b> strikes this round and @Model.PlayerUserStrikesDetail.User.Strikes.Count() throughout the account's lifetime.</p><br>
        }
        else
        {
            <h1>Your Strikes</h1>
            <p>You can view strikes that have been given to your account here.</p><br>

            <p>You are at <b>@Model.PlayerUserStrikesDetail.User.Strikes.Count(s => s.Round == round)/@PvPStatics.MaxStrikesPerRound</b> strikes this round and @Model.PlayerUserStrikesDetail.User.Strikes.Count() throughout your account's lifetime.</p><br>
        }
    }

    @{
        if (Model.PlayerUserStrikesDetail.User.Strikes.Any())
        {
            <p>Previous strikes:</p>

            <table class="table table-hover dt-responsive messageTable">
                <thead>
                    <tr>
                        <th>Date/Time</th>
                        <th>Reason</th>
                        <th>Round</th>
                    @{
                    if (User.IsInRole(PvPStatics.Permissions_Admin) || User.IsInRole(PvPStatics.Permissions_Moderator)) {
                        <th>By Moderator</th>
                        }
                    }
                    </tr>
                </thead>
                <tbody>
                    @{
                        foreach (var strike in Model.PlayerUserStrikesDetail.User.Strikes)
                        {
                            <tr>
                                <td>@strike.Timestamp.ToString("MMMM dd, yyyy")</td>
                                <td>@strike.Reason</td>
                                <td>@strike.Round</td>
                            @{
                            if (User.IsInRole(PvPStatics.Permissions_Admin) || User.IsInRole(PvPStatics.Permissions_Moderator))
                            {
                                <td>@strike.FromModerator.UserName</td>
                                }
                            }
                            </tr>
                        }
                    }
                </tbody>
            </table>
            <br>
            <br>
        }
    }


    @using (Html.BeginForm(MVC.Moderator.AddStrike(), FormMethod.Post))
    {
        if (User.IsInRole(PvPStatics.Permissions_Admin) || User.IsInRole(PvPStatics.Permissions_Moderator))
        {
            @Html.AntiForgeryToken()

            <p>Reason for strike:</p>
            @Html.TextAreaFor(m => m.Reason, new { @class = "text-container" })
            <br>
            <br>

            @Html.HiddenFor(m => m.UserId)

            <br>
            <input type="submit" class="btn btn-chat" value="Send">
        }
    }

</div>