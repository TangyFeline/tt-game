@model IEnumerable<TT.Domain.Models.PollEntry>

<nav class="navbar navbar-default outsideContainer navbarTT2">
    <div class="container-fluid">
        <!-- Brand and toggle get grouped for better mobile display -->
        <div class="navbar-header">
            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-2">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
        </div>

        <!-- Collect the nav links, forms, and other content for toggling -->
        <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-2">
            <ul class="nav navbar-nav">
                <li>@Html.ActionLink("Back to game", "Play", "PvP")</li>
                <li>@Html.ActionLink("View All Polls", "ViewPolls", "Settings")</li>
            </ul>
        </div><!-- /.navbar-collapse -->
    </div><!-- /.container-fluid -->
</nav>
<div class="containerInner text-center">
    @{
        decimal totalCount = Model.Count();

        decimal Num1_Choice1 = Model.Where(m => m.Num1 == 1).Count() / totalCount * 100;
        decimal Num1_Choice2 = Model.Where(m => m.Num1 == 2).Count() / totalCount * 100;
        decimal Num1_Choice3 = Model.Where(m => m.Num1 == 3).Count() / totalCount * 100;
        decimal Num1_Choice4 = Model.Where(m => m.Num1 == 4).Count() / totalCount * 100;
        decimal Num1_Choice5 = Model.Where(m => m.Num1 == 5).Count() / totalCount * 100;
        decimal Num1_Choice6 = Model.Where(m => m.Num1 == 6).Count() / totalCount * 100;
        decimal Num1_Choice7 = Model.Where(m => m.Num1 == 7).Count() / totalCount * 100;

        decimal Num2_Choice1 = Model.Where(m => m.Num2 == 1).Count() / totalCount * 100;
        decimal Num2_Choice2 = Model.Where(m => m.Num2 == 2).Count() / totalCount * 100;
        decimal Num2_Choice3 = Model.Where(m => m.Num2 == 3).Count() / totalCount * 100;
        decimal Num2_Choice4 = Model.Where(m => m.Num2 == 4).Count() / totalCount * 100;
        decimal Num2_Choice5 = Model.Where(m => m.Num2 == 5).Count() / totalCount * 100;
        decimal Num2_Choice6 = Model.Where(m => m.Num2 == 6).Count() / totalCount * 100;
        decimal Num2_Choice7 = Model.Where(m => m.Num2 == 7).Count() / totalCount * 100;

        decimal Num3_Choice1 = Model.Where(m => m.Num3 == 1).Count() / totalCount * 100;
        decimal Num3_Choice2 = Model.Where(m => m.Num3 == 2).Count() / totalCount * 100;
        decimal Num3_Choice3 = Model.Where(m => m.Num3 == 3).Count() / totalCount * 100;
        decimal Num3_Choice4 = Model.Where(m => m.Num3 == 4).Count() / totalCount * 100;
        decimal Num3_Choice5 = Model.Where(m => m.Num3 == 5).Count() / totalCount * 100;
        decimal Num3_Choice6 = Model.Where(m => m.Num3 == 6).Count() / totalCount * 100;
        decimal Num3_Choice7 = Model.Where(m => m.Num3 == 7).Count() / totalCount * 100;

        decimal Num4_Choice1 = Model.Where(m => m.Num4 == 1).Count() / totalCount * 100;
        decimal Num4_Choice2 = Model.Where(m => m.Num4 == 2).Count() / totalCount * 100;
        decimal Num4_Choice3 = Model.Where(m => m.Num4 == 3).Count() / totalCount * 100;
        decimal Num4_Choice4 = Model.Where(m => m.Num4 == 4).Count() / totalCount * 100;
        decimal Num4_Choice5 = Model.Where(m => m.Num4 == 5).Count() / totalCount * 100;
        decimal Num4_Choice6 = Model.Where(m => m.Num4 == 6).Count() / totalCount * 100;
        decimal Num4_Choice7 = Model.Where(m => m.Num4 == 7).Count() / totalCount * 100;

        decimal Num5_Choice1 = Model.Where(m => m.Num5 == 1).Count() / totalCount * 100;
        decimal Num5_Choice2 = Model.Where(m => m.Num5 == 2).Count() / totalCount * 100;
        decimal Num5_Choice3 = Model.Where(m => m.Num5 == 3).Count() / totalCount * 100;

    }
    <h1>How do you feel about the new stats system and the double turn speed?</h1>

    <hr />
    <h3>This poll received @Model.Count() responses.</h3>

    <i>Percentages may not add up to 100% as all fields are optional; any remaining percent can be attributed to 'no response' entries.</i>

    <hr />

    <p><b>How do you feel about the new stats system (commonly known as the Holistic system) that recently went into effect?<</b></p>

    <p>I have no opinion:  <b>@Math.Round(Num1_Choice1, 1) %</b></p>

    <p>Way too complicated: <b>@Math.Round(Num1_Choice2, 1) %</b></p>

    <p>A little too complicated:  <b>@Math.Round(Num1_Choice3, 1) %</b></p>

    <p>Just right:  <b>@Math.Round(Num1_Choice4, 1) %</b></p>

    <p>A little too simple:  <b>@Math.Round(Num1_Choice5, 1) %</b></p>

    <p>Way too simple:  <b>@Math.Round(Num1_Choice6, 1) %</b></p>



    <hr />

    <p><b>How do you feel about turns taking 5 minutes to update instead of 10 minutes?</b></p>

    <p>I have no opinion:  <b>@Math.Round(Num2_Choice1, 1) %</b></p>

    <p>I strongly prefer 5 minute turns:  <b>@Math.Round(Num2_Choice2, 1) %</b></p>

    <p>I somewhat prefer 5 minute turns:  <b>@Math.Round(Num2_Choice3, 1) %</b></p>

    <p>I somewhat dislike 5 minute turns:  <b>@Math.Round(Num2_Choice4, 1) %</b></p>

    <p>I strongly dislike 5 minute turns:  <b>@Math.Round(Num2_Choice5, 1) %</b></p>


    <hr />


    <p><b>Leave any comments on the new stats system here.</b></p>

    @{
        foreach (TT.Domain.Models.PollEntry e in Model.Where(p => p.String1 != null && p.String1 != ""))
        {
            <p>"@e.String1"</p><br />
        }
    }

    <hr />

    <p><b>Leave any comments on the 5 minute turns here.</b></p>

    @{
        foreach (TT.Domain.Models.PollEntry e in Model.Where(p => p.String2 != null && p.String2 != ""))
        {
            <p>"@e.String2"</p><br />
        }
    }


</div>
