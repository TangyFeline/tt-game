@model TT.Domain.ViewModels.SetBioViewModel


<nav class="navbar navbar-default outsideContainer navbarTT2">
    <div class="container-fluid">
        <!-- Brand and toggle get grouped for better mobile display -->
        <div class="navbar-header">
            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-2">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
        </div>

        <!-- Collect the nav links, forms, and other content for toggling -->
        <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-2">
            <ul class="nav navbar-nav">
                <li><a href="@Url.Action(MVC.PvP.Play())">Back to game</a></li>
                <li><a href="@Url.Action(MVC.Settings.Settings())">Settings</a></li>
                <li><a href="javascript:confirmDeletion()">Delete My Bio</a></li>
            </ul>
        </div><!-- /.navbar-collapse -->
    </div><!-- /.container-fluid -->
</nav>

<div class="containerInner">

    <div id="realLink" class="deleteMessegeConfirm">
        <span style="color:red; font-weight: bold;">Do you really want to delete your bio? If yes then please click link below:</span>
        <a href="@Url.Action(MVC.Settings.SetBioDelete())">Yes, DELETE my bio</a><br />
    </div>

    <h1>Update Your Bio</h1>

    <p>You can write and update a short biography about yourself or your player character here. Feel free to mention your RP preferences, if any. You can also list a website for others to contact you externally by or view your stories, artwork, or anything else you care to share publicly.</p>

    @using (Html.BeginForm(MVC.Settings.SetBioSend(), FormMethod.Post))
    {
        @Html.HiddenFor(m => m.Tags)

        <div class="messageInfoContainer">
            Website URLs:
            <span class="charCounter"></span>
        </div>
        @Html.TextAreaFor(m => m.WebsiteURL, new { @class = "", maxlength = "1500" })
        <br>

        <div class="messageInfoContainer">
            Main text of your bio. You can force line-breaks in this text by writing <b>[br]</b>:
            <span class="charCounter"></span>
        </div>
        @Html.TextAreaFor(m => m.Text, new { maxlength = Model.IsDonator? "10000" : "2500" })
        <br>

        <p>RP interest tags: Click on the buttons below to turn on or off the themes that interest you while roleplaying.</p>

        @Html.Partial(MVC.Settings.Views.partial.rptags);
        <br>

        <input id="resetTags" type="button" value="Click here to reset tags" class="btn" />
        <input type="submit" value="Send" class="btn" />
        <br>

        <p>Last updated @Model.Timestamp</p>
    }
</div>

    <script>
        $(document).ready(function () {
            var tagstring = $("#Tags").val();
            //console.log("Raw string:  " + tagstring);

            $('.charCounter').each(function () {
                var jQthis = $(this);

                var max = jQthis
                    .parent('.messageInfoContainer')
                    .next('textarea')
                    .attr('maxLength');

                jQthis.html(max + ' characters remaining');
            });

            // assign the proper styling onload
            $(".rpTag").each(function () {
                var jQthis = $(this);

                var code = jQthis.attr("tagcode");
                var regexs = ";" + code + ".[0-9];";
                var regex = new RegExp(regexs, "i")
                var smatch = tagstring.match(regex);

                // currently exists; increment its state
                if (smatch !== null) {
                    //console.log("Match found:  " + smatch);
                    var numberValue = smatch[0].match(/[0-9]/);
                    //console.log("Value of match:  " + numberValue);

                    if (numberValue == 0) {
                        jQthis.addClass("neg2");
                    } else if (numberValue == 1) {
                        jQthis.addClass("neg1");
                    } else if (numberValue == 2) {
                        jQthis.addClass("pos1");
                    } else if (numberValue == 3) {
                        jQthis.addClass("pos2");
                    }
                }
            });

            // assign onclick logic to buttons
            $(".rpTag").on('click', function () {
                var jQthis = $(this);

                var code = jQthis.attr("tagcode");
                var regexs = ";" + code + ".[0-9];";
                var regex = new RegExp(regexs, "i")
                var smatch = tagstring.match(regex);

                // currently exists; increment its state
                if (smatch !== null) {

                    //console.log("Click match found:  " + smatch);
                    var numberValue = parseInt(smatch[0].match(/[0-9]/));
                    //console.log("Value of click match:  " + numberValue);

                    var oldstring = ";" + code + "." + numberValue + ";";
                    var newstring = ";" + code + "." + (numberValue + 1) + ";";

                    //console.log("replacing " + oldstring + " with " + newstring);

                    cleanClasses(jQthis);

                    if (numberValue == 0) {
                        jQthis.addClass("neg1");
                        tagstring = tagstring.replace(oldstring, newstring);
                    } else if (numberValue == 1) {
                        jQthis.addClass("pos1");
                        tagstring = tagstring.replace(oldstring, newstring);
                    } else if (numberValue == 2) {
                        jQthis.addClass("pos2");
                        tagstring = tagstring.replace(oldstring, newstring);
                    } else if (numberValue == 3) {
                        tagstring = tagstring.replace(oldstring, "");
                    }
                }

                // does not exist; add it with default (lowest) value
                else {
                    tagstring += ";" + code + "." + 0 + ";";
                    jQthis.addClass("neg2");
                }

                $("#Tags").val(tagstring);
            });

            $("#resetTags").click(function () {
                $("#Tags").val("");
                tagstring = "";
                $(".rpTag").each(function () {
                    var jQthis = $(this);
                    jQthis.removeClass("neg2");
                    jQthis.removeClass("neg1");
                    jQthis.removeClass("pos1");
                    jQthis.removeClass("pos2");
                });
            });

            $('#WebsiteURL, #Text').on('input', function () {
                var jQthis = $(this);

                var length = jQthis.val().length;
                var remaining = jQthis.attr('maxLength') - length;

                jQthis
                    .prev('.messageInfoContainer')
                    .children('.charCounter')
                    .html(remaining + ' characters remaining');
            });
        });

        function cleanClasses(tag) {
            tag.removeClass("neg2");
            tag.removeClass("neg1");
            tag.removeClass("pos1");
            tag.removeClass("pos2");
        }

        function confirmDeletion() {
            document.getElementById('realLink').style.display = "block";
        }

    </script>