@model TT.Domain.Items.DTOs.ItemDetail

@using TT.Domain.Items.DTOs
@using TT.Domain.Statics
@using TT.Domain.ViewModels
@using TT.Web.CustomHtmlHelpers

<div class="portrait col-md-2 col-sm-4 col-xs-12 " style="background-image: url(@PortraitHelper.GetGraphicByItemType(Model.ItemSource.ItemType, Model.ItemSource.PortraitUrl, true));">
    @HtmlHelpers.PrintItemTypeIcon(Model.ItemSource.ItemType)
    @HtmlHelpers.PrintSouledIcon(Model)
</div>

<b>
    
    @Model.ItemSource.FriendlyName @Html.Partial(MVC.Item.Views.partial.RuneDetails, Model)

    @{

        if (Model.Level > 0)
        {
            <span>(Lvl @Model.Level)</span>
        }

        if (Model.IsEquipped)
        {
            <span> (Equipped)</span>
        }

        if (Model.FormerPlayer != null)
        {
            <span class="formerly">Formerly <a href="@Url.Action(MVC.PvP.LookAtPlayer(Model.FormerPlayer.Id))">@Model.FormerPlayer.FullName</a></span>
            @HtmlHelpers.PrintPermanencyIcon(Model.IsPermanent)
        }

    }

    <br/>
</b>


@Model.ItemSource.Description <br />

<div class="bonuses">

    <ul>
        @{
            if (!Model.ItemSource.GivesEffect.IsNullOrEmpty())
            {
                <li>Gives the @HtmlHelpers.GetEffectFriendlyName(Model.ItemSource.GivesEffect) effect</li>
            }
        }

    </ul>
    
    @{
        if (Model.ItemSource.ItemType == PvPStatics.ItemType_Rune)
        {
            @Html.Partial(MVC.Item.Views.partial.RuneStats, new ItemRuneDetailViewModel(new ItemRuneDetail{ ItemSource = Model.ItemSource}, false))
        }
    
        foreach (var rune in Model.Runes)
        {
            @Html.Partial(MVC.Item.Views.partial.RuneStats, new ItemRuneDetailViewModel(rune))
        }
    }

</div>