@model IEnumerable<TT.Domain.Messages.DTOs.MessageDetail>
@{
    ViewBag.Title = "Abusive Messages";
}

@section menu
{
    <li><a href="@Url.Action(MVC.PvP.Play())">Back to game</a></li>
    <li><a href="@Url.Action(MVC.Moderator.Index())">Back to moderation</a></li>
}

<div class="containerInner">

    <h1>Messages Reported as Abusive</h1>

    <p>The following private messages have been marked abusive by the <span class="good">Receiver</span> which means the abuse came from the <span class="bad">Sender</span>.  Admins and Moderators may view this page and decide upon further corrective action.</p>
    <br>
    <p>Messages marked as abusive will not get automatically deleted after 72 hours.  However, they WILL be deleted inbetween rounds</p>
    <br>

    <table id="abusiveMessages" class="table table-hover dt-responsive messageTable">
        <thead>
        <tr>
            <th style="color: red;">Sender</th>
            <th style="color: green;">Receiver</th>
            <th>Message</th>
            <th>Timestamp</th>
            <th>Conversation Link</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var m in Model)
        {
            <tr>
                <td>
                    <a href="@Url.Action(MVC.PvP.LookAtPlayer(m.Sender.Id))">@m.Sender.GetFullName()</a>
                </td>
                <td>
                    <a href="@Url.Action(MVC.PvP.LookAtPlayer(m.Receiver.Id))">@m.Receiver.GetFullName()</a>
                </td>
                <td>@m.MessageText</td>
                <td class="timeago">@m.Timestamp.ToString("u")</td>
                <td>
                    <a href="@Url.Action(MVC.Moderator.ModReadConversation(m.MessageId, m.Receiver.Id))">View Conversation</a>
                </td>
            </tr>
        }
        </tbody>
    </table>

</div>

@section scripts
{
    <script>
    $(document).ready(function() {
        $('#abusiveMessages').dataTable({
            "columnDefs": [
                {
                    "targets": 3,
                    "render": function(data, type, full, meta) {
                        if (type === "display") return moment(data).fromNow();
                        return data;
                    }
                }
            ]
        });
    });
    </script>
}
