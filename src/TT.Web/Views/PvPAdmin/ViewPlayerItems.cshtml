@using TT.Domain.ViewModels
@{
    PlayerFormViewModel player = ViewBag.player;
}
<nav class="navbar navbar-default outsideContainer navbarTT2">
    <div class="container-fluid">
        <!-- Brand and toggle get grouped for better mobile display -->
        <div class="navbar-header">
            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-2">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
        </div>
        <!-- Collect the nav links, forms, and other content for toggling -->
        <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-2">
            <ul class="nav navbar-nav" style="width:100%;">
                <li><a href="@Url.Action(MVC.PvP.Play())">Back to game</a></li>
                <li><a href="@Url.Action(MVC.PvP.LookAtPlayer(player.Player.Id))">Back to player</a></li>
            </ul>
        </div><!-- /.navbar-collapse -->
    </div><!-- /.container-fluid -->
</nav>

<h1>Items held by @player.Player.GetFullName()</h1>
<ul>
    @{
        foreach (ItemViewModel item in ViewBag.playeritems)
        {
            string strItemName = "";
            if (item.dbItem.Level > 0)
            {
                strItemName += "L" + item.dbItem.Level + " ";
            }

            strItemName += item.Item.FriendlyName;

            if (!item.dbItem.VictimName.IsNullOrEmpty())
            {
                strItemName += " (" + item.dbItem.GetFullName() + ")";
            }
            <li><a href="@Url.Action(MVC.PvPAdmin.ViewItemTransferLog(item.dbItem.Id))">@strItemName</a></li>
        }
    }
</ul>