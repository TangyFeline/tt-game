@using TT.Domain.ViewModels
@{
    ItemViewModel item = ViewBag.item;
}
<nav class="navbar navbar-default outsideContainer navbarTT2">
    <div class="container-fluid">
        <!-- Brand and toggle get grouped for better mobile display -->
        <div class="navbar-header">
            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-2">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
        </div>
        <!-- Collect the nav links, forms, and other content for toggling -->
        <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-2">
            <ul class="nav navbar-nav" style="width:100%;">
                <li>@Html.ActionLink("Back to game", "Play", "PvP")</li>
                @{
                    if (item.dbItem.OwnerId != -1)
                    {
                        <li>@Html.ActionLink("View owner's other items", "ViewPlayerItems", "PvPAdmin", new { id = item.dbItem.OwnerId }, null)</li>
                    }
                }
            </ul>
        </div><!-- /.navbar-collapse -->
    </div><!-- /.container-fluid -->
</nav>

<h1>Item transfer log for @item.Item.FriendlyName</h1>
<ul>
@{
    DateTime lasttime = new DateTime();
    foreach(ItemTransferLogViewModel itemlog in ViewBag.transferlog)
    {
        <li>
            @{
            if (itemlog.OwnerName == "-1")
            {
                @("Dropped")
            }
            else
            {
                @("Transferred to ")
                @Html.ActionLink(itemlog.OwnerName, "LookAtPlayer", "PvP", new { id = itemlog.ItemLog.OwnerId }, null)
            }
            if (itemlog.OwnerIP != "-1")
            {
                @("(" + itemlog.OwnerIP + ") ")
            }
            @(" on " + itemlog.ItemLog.Timestamp + " ")
            if (lasttime != DateTime.MinValue)
            {
                TimeSpan timediff = itemlog.ItemLog.Timestamp - lasttime;
                if (timediff.TotalMinutes <= 15)
                {
                    if (timediff.TotalMinutes < 1)
                    {
                        <b>(@Math.Round(timediff.TotalSeconds,2) second(s) difference from above)</b>
                    }
                    else
                    {
                        <b>(@Math.Round(timediff.TotalMinutes,2) minutes(s) difference from above)</b>
                    }
                }
            }
            lasttime = itemlog.ItemLog.Timestamp;
            }
        </li>
    }
}
</ul>