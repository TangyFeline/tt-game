@model TT.Domain.ViewModels.Quest.QuestStateFormViewModel

<p>@Ajax.ActionLink("View Logs", MVC.QuestWriter.ShowQuestWriterLogs(Model.QuestState.QuestId), new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "" })</p>
<p>@Ajax.ActionLink("Click to view all quest states in this quest", MVC.QuestWriter.ShowAllQuestStates(Model.QuestState.QuestId), new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "" })</p>
<p>@Ajax.ActionLink("Click to view all quest connections in this quest", MVC.QuestWriter.ShowAllQuestConnections(Model.QuestState.QuestId), new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "" })</p>
<p>@Ajax.ActionLink("View Diagram", MVC.QuestWriter.Diagram(Model.QuestState.QuestId), new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "" })</p>


<h4>Connections TO this Quest State (@Model.QuestConnectionsFrom.Count()):</h4>

@{
    foreach (var q in Model.QuestConnectionsTo)
    {
        <p>
            @Ajax.ActionLink("[" + q.ConnectionName + "]", MVC.QuestWriter.QuestConnection(q.Id, Model.QuestState.QuestId, q.QuestStateFromId, q.QuestStateToId), new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "parentButton" })

            @Ajax.ActionLink("Jump to State", MVC.QuestWriter.QuestState(q.QuestStateFromId, Model.QuestState.QuestId, -1), new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "editButton" })</p>
    }
    <p>@Ajax.ActionLink("Add New", MVC.QuestWriter.QuestConnection(-1, Model.QuestState.QuestId, -1, Model.QuestState.Id), new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "newButton" })</p>
}


@{ if (Model.QuestConnectionsFailTo.Any())
    {
       
        <h4><img src='https://images.transformaniatime.com/Icons/dice.png' style='width: 24px; height: 24px; '> Connections TO this Quest State <span class="bad"> from failed Rolls</span> (@Model.QuestConnectionsFailTo.Count()):</h4>
    }
}

@{
    foreach (var q in Model.QuestConnectionsFailTo)
    {
        <p>
            @Ajax.ActionLink("[" + q.ConnectionName + "]", MVC.QuestWriter.QuestConnection(q.Id, Model.QuestState.QuestId, q.QuestStateFromId, q.QuestStateToId), new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "parentButton" })

            @Ajax.ActionLink("Jump to State", MVC.QuestWriter.QuestState(q.QuestStateFromId, Model.QuestState.QuestId, -1), new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "editButton" })
        </p>
    }
}

<h4>Connections FROM this Quest State (@Model.QuestConnectionsTo.Count()):</h4>

@{
    foreach (var q in Model.QuestConnectionsFrom)
    {
        <p>
            @Ajax.ActionLink("[" + q.ConnectionName + "]", MVC.QuestWriter.QuestConnection(q.Id, Model.QuestState.QuestId, q.QuestStateFromId, q.QuestStateToId), new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "parentButton" })

            @Ajax.ActionLink("Jump to State", MVC.QuestWriter.QuestState(q.QuestStateToId, Model.QuestState.QuestId, -1), new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "editButton" })
        </p>

   
    }
    <p>@Ajax.ActionLink("Add New", MVC.QuestWriter.QuestConnection(-1, Model.QuestState.QuestId, Model.QuestState.Id, -1), new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "newButton" })</p>
}

<hr>

@using (Ajax.BeginForm(MVC.QuestWriter.QuestStateSend(), new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "POST", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "" }))
{

    @Html.HiddenFor(m => m.QuestState.Id)
    @Html.HiddenFor(m => m.QuestState.QuestId)
    @Html.HiddenFor(m => m.QuestState.X)
    @Html.HiddenFor(m => m.QuestState.Y)
    @Html.HiddenFor(m => m.QuestState.PinToDiagram)

    <label>Quest state name (this is only used in the quest editor to help improve the readability of the quest flow):</label>
    @Html.TextBoxFor(m => m.QuestState.QuestStateName)

    <br>
    <br>

    <label>Text (the text the player sees when having first entered this state):</label>    <br>
    @Html.TextAreaFor(m => m.QuestState.Text)

    <br>
    <br>


    <label>Internal Notes (for quest writer's internal note-keeping uses only; questers never see this):</label>    <br>
    @Html.TextAreaFor(m => m.QuestState.Notes, new { @class = "short" })

    <br>
    <br>

    <input type="submit" class="btn btn-chat" value="Send">

}

<h4>Quest State Preactions:  (@Model.QuestState.QuestStatePreactions.Count())</h4>

<table>

    @{
        foreach (var r in Model.QuestState.QuestStatePreactions)
        {
            <tr>
                <td>
                    @Ajax.ActionLink(r.QuestStatePreactionName, MVC.QuestWriter.QuestStatePreaction(r.Id, r.QuestStateId.Id, Model.QuestState.QuestId), new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "editButton" })
                </td>
                <td>
                    @Ajax.ActionLink("[DELETE]", MVC.QuestWriter.QuestStatePreactionDelete(r.Id), new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting", Confirm = "Are you sure you want to delete this quest state preaction?" }, new { @class = "deleteButton" })
                </td>
            </tr>
        }

    }
</table>

@{
    if (Model.QuestState.Id > 0)
    {
        <p>@Ajax.ActionLink("--New Quest State Preaction--", MVC.QuestWriter.QuestStatePreaction(-1, Model.QuestState.Id, Model.QuestState.QuestId), new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "newButton" })</p>
    }
}

<h4>Quest Ends (@Model.QuestState.QuestEnds.Count())</h4>

<table>

    @{
        foreach (var qe in Model.QuestState.QuestEnds)
        {
            <tr>
                <td>
                    @Ajax.ActionLink(qe.QuestEndName, MVC.QuestWriter.QuestEnd(qe.Id, Model.QuestState.Id, Model.QuestState.QuestId), new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "editButton" })
                </td>
                <td>
                    @Ajax.ActionLink("[DELETE]", MVC.QuestWriter.QuestEndDelete(qe.Id), new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting", Confirm = "Are you sure you want to delete this quest end?" }, new { @class = "deleteButton" })
                </td>
            </tr>
        }
    }
</table>

@{
    if (Model.QuestState.Id > 0)
    {
        <p>@Ajax.ActionLink("--New Quest End--", MVC.QuestWriter.QuestEnd(-1, Model.QuestState.Id, Model.QuestState.QuestId), new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "newButton" })</p>
    }
}


@*<h4>Children Quest States (@Model.ChildQuestStates.Count()):</h4>*@

@*@{
        foreach (QuestState q in Model.ChildQuestStates)
        {
            @Ajax.ActionLink(q.QuestStateName, MVC.QuestWriter.QuestState(q.Id, Model.QuestState.QuestId, Model.QuestState.Id), new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting", }, new { @class = "editButton" })

            @Ajax.ActionLink("[DELETE]", MVC.QuestWriter.QuestStateDelete(q.Id), new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting", Confirm = "Are you sure you want to delete this quest state?" }, new { @class = "deleteButton" })
            <br><br>
        }

        if (Model.QuestState.Id > 0)
        {
            <div>@Ajax.ActionLink("--Add Child QuestState--", MVC.QuestWriter.QuestState(-1, Model.QuestState.QuestId, Model.QuestState.Id), new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "newButton" })</div>
        }
    }*@
