@model TT.Domain.Models.QuestStart
@using TT.Domain.Statics

<nav class="navbar navbar-default outsideContainer navbarTT2">
    <div class="container-fluid">
        <!-- Brand and toggle get grouped for better mobile display -->
        <div class="navbar-header">
            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-2">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
        </div>

        <!-- Collect the nav links, forms, and other content for toggling -->
        <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-2">
            <ul class="nav navbar-nav">
                <li>@Html.ActionLink("Back to game", "Play", "PvP")</li>
                <li>@Ajax.ActionLink("Abandon Quest", "Abandon", "Quest", null, new AjaxOptions { UpdateTargetId = "quest", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "" })</li>
                <li>@Html.ActionLink("Inbox", "MyMessages", "PvP", null, new { @id = "newMessagesLink" })</li>
                <li>@Html.ActionLink("Chat", "Index", "Chat", new { room = "global" }, new { target = "_blank" })</li>

                @if (User.IsInRole(PvPStatics.Permissions_QuestWriter) == true)
                {
                <li>@Html.ActionLink("QuestWriter", "Index", "QuestWriter", null, null)</li>
                }

            </ul>
        </div><!-- /.navbar-collapse -->
    </div><!-- /.container-fluid -->
</nav>

<div>
    <p class="infoMessage result"></p>
    <p class="infoMessage error"></p>
    <p class="infoMessage suberror"></p>
</div>



<div class="containerInner" id="quest">

    <h1>Questing</h1>

    <p>You are in the quest <b>@Model.Name!</b>  Loading...</p><br />

    @Ajax.ActionLink("Resume Quest", "Quest", "Quest", null, new AjaxOptions { UpdateTargetId = "quest", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "attackLink", @id = "continueQuest" })
</div>


<script>

    var questId = @Model.Id;
   // var newMsgCount = 0;

    function success() {
        $("#loadingBox").hide();
    }

    function fail() {

        alert("Juderp!  Internal server error, unable to do this.");
    }

    function waiting() {
        $("#loadingBox").show();
    }

    function loadShowVariables() {

        var variables = [];

        $.getJSON("/QuestWriter/ShowAllActivePlayerVariables/" + questId, function (data) {
            variables = data;
        }).then(function () {
            $("#listVariables").html("<br>All variables active in this quest:<br>");
            for (var i = 0; i < variables.length; i++) {
                var variable = variables[i];
                $("#listVariables").append("<b>" + variable.Name + "</b> : <b>" + variable.Value + "</b><br>");
            }
        });
    }



    setTimeout(function(){ $("#continueQuest").click() }, 50);

    
</script>

<style>
    #continueQuest {
        display:none;
    }
</style>