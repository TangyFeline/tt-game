@model TT.Domain.ViewModels.Quest.QuestPlayPageViewModel
@using TT.Web.CustomHtmlHelpers
@using TT.Domain.Statics
@using TT.Domain.Procedures

<div id="loadingBox" class="specialBox specialBox2" style="display:none;">Contacting server...</div>

<h1>Quest:  <b>@Model.QuestStart.Name</b></h1>



<div id="statsBox">
    Discipline:  <b>@Model.BuffBox.Discipline()</b> |
    Perception:  <b>@Model.BuffBox.Perception()</b> |
    Charisma:  <b>@Model.BuffBox.Charisma()</b> |
    Fortitude:  <b>@Model.BuffBox.Fortitude()</b> |
    Agility:  <b>@Model.BuffBox.Agility()</b> |
    Restoration:  <b>@Model.BuffBox.Allure()</b> |
    Magicka:  <b>@Model.BuffBox.Magicka()</b> |
    Regeneration:  <b>@Model.BuffBox.Succour()</b> |
    Luck:  <b>@Model.BuffBox.Luck()</b> |
</div>

<div id="playerBox">
    @Html.Partial(MVC.PvP.Views.partial_FrontPageAvatar, Model.Player)
</div>

<hr>

<div id="textBody">

    @{
        var rollResult = (string)TempData["RollResult"];
        if (rollResult != null)
        {
            
            if ((string)TempData["RollResult"] == "fail")
            {
                <p class="bad"><img src='https://images.transformaniatime.com/Icons/dice.png' style='width: 24px; height: 24px; '>Roll failed!</p>
            }
            else if ((string)TempData["RollResult"] == "pass")
            {
                <p class="good"><img src='https://images.transformaniatime.com/Icons/dice.png' style='width: 24px; height: 24px; '>Roll passed!</p>
            }
        }
    }

    @Html.Raw(QuestProcedures.Textify(Model.ConnectionText, Model.Player.Player.ToDbPlayer()))
    @Html.Raw(QuestProcedures.Textify(Model.QuestState.Text, Model.Player.Player.ToDbPlayer()))
</div>

<hr>

@{

    foreach (var connection in Model.QuestConnections.OrderByDescending(q => q.RankInList).ToList())
    {
        var isAvailable = QuestProcedures.QuestConnectionIsAvailable(connection, Model.Player.Player.ToDbPlayer(), Model.BuffBox, Model.QuestPlayerVariables);
        if (!isAvailable && connection.HideIfRequirementsNotMet)
        {
            // do nothing, option is unavailable and should be hidden
        }
        else if (!isAvailable && !connection.HideIfRequirementsNotMet)
        {
            // show the option but give it disabled style indicating it is not open currently
            <p style="background-color:#ff8585"> @Ajax.ActionLink(connection.ActionName + " " + TT.Domain.Procedures.QuestProcedures.GetRequirementsAsString(connection,Model.BuffBox), MVC.Quest.Choice(connection.Id), new AjaxOptions { UpdateTargetId = "quest", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "" }) </p><br>
        }
        else
        {
            // show the option as usual
            <p> @HtmlHelpers.PrintDiceIcon(connection)

                @Ajax.ActionLink(connection.ActionName + " " + TT.Domain.Procedures.QuestProcedures.GetRequirementsAsString(connection, Model.BuffBox), MVC.Quest.Choice(connection.Id), new AjaxOptions { UpdateTargetId = "quest", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "" })
            </p><br>
        }

    }


    if (Model.ShowEnd())
    {
        if (Model.Player.Player.Mobility == PvPStatics.MobilityFull)
        {
            <p><a href="@Url.Action(MVC.Quest.EndQuest(false))" class="">End Quest</a></p>
        }
        else
        {
            <p><a href="@Url.Action(MVC.Quest.EndQuest(true))" class="">End Quest (return to animate form)</a></p>
            <p><a href="@Url.Action(MVC.Quest.EndQuest(false))" onclick="return confirm('Are you sure you want to accept your transformation and remain in your current inanimate or pet form?  You will lose your inventory and need to struggle back on your own.')" class="">End Quest (accept the changes)</a></p>
        }
    }

    if (User.IsInRole(PvPStatics.Permissions_QuestWriter))
    {

        <br><br><br>
        <div id="listVariables" style="background-color: lightgreen" onclick="loadShowVariables()">
            <p><b class="bad">QUEST WRITER ONLY:  Click here to view all variables and their values in this playthrough of this quest.</b></p>
        </div>
    }
}

<script>
    unreadMessages = @(Model.HasNewMessages ? "true" : "false");
    newMsgCount = @Model.UnreadMessageCount;

    $("#newMessagesLink").html("(" + newMsgCount + ")");
    if (unreadMessages) {
        $("#newMessagesLink").addClass("inboxNew");
    }

</script>