@model TT.Domain.ViewModels.MessageBag
@using TT.Web.CustomHtmlHelpers
@using TT.Domain.Statics

<nav class="navbar navbar-default outsideContainer navbarTT2">
    <div class="container-fluid">
        <!-- Brand and toggle get grouped for better mobile display -->
        <div class="navbar-header">
            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-2">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
        </div>

        <!-- Collect the nav links, forms, and other content for toggling -->
        <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-2">
            <ul class="nav navbar-nav" style="width:100%;">
                <li>@Html.ActionLink("Back to game", "Play", "PvP")</li>
                <li>@Html.ActionLink("Search for player by name", "PlayerLookup", "PvP")</li>
                <li><a href="javascript:void(0)" id="deleteAll" style="color: #734752 !important; font-weight:bold;">Delete All Messages</a></li>
                <li>@Html.ActionLink("Rules", "Rules", "Info", null, new { target = "_blank" })</li>
            </ul>
        </div><!-- /.navbar-collapse -->
    </div><!-- /.container-fluid -->
</nav>

<div>
    <p class="infoMessage result">@Html.Raw(ViewBag.Result)</p>
    <p class="infoMessage error">@ViewBag.ErrorMessage</p>
    <p class="infoMessage suberror">@ViewBag.SubErrorMessage</p>
</div>

<script>
    $("#deleteAll").on('click', function () {
        if ($("#realLink").is(":visible") == false) {
            $("#realLink").show();
        } else {
            $("#realLink").hide();
        }
    });
</script>

<div id="realLink" class="specialBox specialBox2" style="display: none;">
    <span style="color:red;">Do you really want to delete all the messages? If yes then please click link below:</span><br />
    @using (Html.BeginForm("DeleteMessage", "Messages", FormMethod.Post))
    {
        @Html.AntiForgeryToken()
        <input name="deleteAll" type="hidden" value="True">
        <input name="messageId" type="hidden" value="-1">

        <input type="submit" value="Yes, I want to delete all my messages">
    }
</div>

<div class="specialBox specialHeader">
    <b>Received Messages (@Model.Paginator.TotalCount/@Model.InboxSize)</b>
</div>

<div class="containerInner">

    <span>Jump to page:</span>

    @{
        for (int i = 0; i < Model.Paginator.MaxPageNumber; i++)
        {
            @Html.ActionLink((i + 1).ToString() + " | ", "Index", "Messages", new { offset = i }, new { @class = Model.Paginator.GetStylingClass(i) })
        }
    }

    <span><i>@Model.Paginator.TotalCount total messages</i></span>


    <table class="table table-hover messageTable">
        <thead>
            <tr>
                <th style="width: 25%;">Sender</th>
                <th>Message</th>
                <th style="width: 16%;">Time Sent</th>
                <th style="width: 20%;">Action</th>
            </tr>
        </thead>
        <tbody>
            @{

                string messageTeaser;
                int msgLength;

                foreach (var msg in Model.Messages)
                {


                    msgLength = msg.MessageText.Length;
                    if (msgLength > 50)
                    {
                        messageTeaser = msg.MessageText.Substring(0, 50) + "...";

                    }
                    else
                    {
                        messageTeaser = msg.MessageText.Substring(0, msgLength);
                    }

                    <tr>
                       
                    <td>@Html.ActionLink(msg.Sender.GetFullName(), "LookAtPlayer", "PvP", new { id = msg.Sender.Id }, null)</td>

                    @{
                    if (msg.ReadStatus == 0 || msg.ReadStatus == 2)
                    {
                        <td class="newlink">@Html.ActionLink(messageTeaser, "ReadMessage", "Messages", new { messageId = msg.Id }, null)</td>
                    }
                    else
                    {
                        <td>@Html.ActionLink(messageTeaser, "ReadMessage", "Messages", new { messageId = msg.Id }, null)</td>
                    }
                        }

                        <td class="timeSent"><span style="font-size: 10px">@CharactersHere.DatetimeToTimeago(msg.Timestamp)</span></td>
                        <td>
                            @using (Html.BeginForm("DeleteMessage", "Messages", FormMethod.Post))
                            {
                                @Html.AntiForgeryToken()
                                <input name="deleteAll" type="hidden" value="False">
                                <input name="messageId" type="hidden" value="@msg.Id">

                                <input type="submit" value="Delete Message">
                            }

                            @if (msg.ReadStatus == MessageStatics.Read)
                            {
                                using (Html.BeginForm("MarkReadStatus", "Messages", FormMethod.Post, new {id = "markForm"}))
                                {
                                    @Html.AntiForgeryToken()
                                    <input name="messageId" type="hidden" value="@msg.Id">
                                    <input name="ReadStatus" type="hidden" value="@MessageStatics.ReadAndMarkedAsUnread">

                                    <input type="submit" value="Mark As Unread">
                                }
                            }
                            else
                            {
                               using (Html.BeginForm("MarkReadStatus", "Messages", FormMethod.Post, new {id = "markForm"}))
                                {
                                    @Html.AntiForgeryToken()
                                    <input name="messageId" type="hidden" value="@msg.Id">
                                    <input name="ReadStatus" type="hidden" value="@MessageStatics.Read">

                                    <input type="submit" value="Mark As Read">
                                }
                            }



                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>

    @{

        if (ViewBag.IsDonator == null || !ViewBag.IsDonator)
        {
            <p class="warningText">
                Only the @Model.InboxSize most recent messages you've recieved will be saved.  Older messages will be deleted automatically.
            </p>
        }

        else if (ViewBag.IsDonator)
        {
            <p class="warningText">
                <b>You are marked as having a Tier 3 donator level, which means you can keep up to 500 messages in your inbox and your older messages will NOT be deleted automatically by the turn update.</b>
            </p>
        }
    }
</div>

<div class="specialBox specialHeader topBorder">
    <b>Sent Messages</b>
</div>

<div class="containerInner">

    <table class="table table-hover messageTable">
        <thead>
            <tr>
                <th style="width: 25%;">Recipient</th>
                <th>Message</th>
                <th style="width: 16%;">Time Sent</th>
                <th style="width: 10%;">Read</th>
            </tr>
        </thead>
        <tbody>

            @{foreach (var msg in Model.SentMessages)
            {
                <tr>
                    <td>@Html.ActionLink(msg.Receiver.GetFullName(), "LookAtPlayer", "PvP", new { id = msg.Receiver.Id}, null)</td>
                    <td>@msg.MessageText</td>
                    <td class="timeSent"><span style="font-size: 10px">@CharactersHere.DatetimeToTimeago(msg.Timestamp)</span></td>
                    <td>@CharactersHere.PrintMessageReadStatus(msg)</td>
                </tr>
            }
            }


        </tbody>

    </table>

    @{
        if (Model.WearerId != -1 && Model.WearerName != null)
        {

            <p> @Html.ActionLink("Telepathically talk to the person wearing you, " + Model.WearerName, "Write", "Messages", new { playerId = Model.WearerId, responseTo = -1 }, null) </p>
        }
    }
</div>

@section Scripts
{
    <script>
        $(document).ready(function () {
            $('#DeleteLink').on('click', function () {
                document.getElementById('realLink').style.display = "block";
            });
        });
    </script>
}

