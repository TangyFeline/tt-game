@model TT.Domain.ViewModels.MessageSubmitViewModel
@{
    ViewBag.Title = "Write Message";
}

@section menu
{
    <li><a href="@Url.Action(MVC.PvP.Play())">Back to game</a></li>
    <li><a href="@Url.Action(MVC.Messages.Index())">Back to Messages</a></li>
}

<div class="containerInner">
    @if (!string.IsNullOrEmpty(ViewBag.ErrorMessage)) { <p class="infoMessage error">@ViewBag.ErrorMessage</p> }

    @if (!Model.RespondingToMsg.IsNullOrEmpty())
    {
        <p class="messageTextContainer messageResponse">
            @Model.RespondingToMsg
        </p>
    }

    @using (Html.BeginForm(MVC.Messages.SendMessage(), FormMethod.Post))
    {
        @Html.AntiForgeryToken()

        <div class="messageInfoContainer clearfix">
            Writing to <span class="messageNicknameContainer">@Model.SendingToName</span>:
            <span class="charCounter" id="textRemaining"></span>
        </div>
        @Html.TextAreaFor(m => m.MessageText, new { maxlength = "1000" })<br />

        @Html.HiddenFor(m => m.ReceiverId)
        @Html.HiddenFor(m => m.SenderId)
        @Html.HiddenFor(m => m.responseToId)

        <br>
        <input type="submit" class="btn btn-chat" value="Send" />
    }
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            var max = 1000;
            $('#textRemaining').html(max + ' characters remaining');

            $('#MessageText').on('input', function () {
                var length = $(this).val().length;
                var remaining = max - length;

                $('#textRemaining').html(remaining + ' characters remaining');
            });
        });
    </script>
}
