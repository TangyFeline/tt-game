@model TT.Domain.ViewModels.PlayPageViewModel
@using TT.Web.CustomHtmlHelpers
@using TT.Domain.ViewModels
@using TT.Domain.Statics
@using TT.Domain.Procedures

<script src="~/Scripts/jquery-ui-1.10.4.js"></script>

<script src="~/Scripts/jquery.signalR-2.0.3.min.js"></script>
<script src="~/signalr/hubs"></script>
<script src="~/Scripts/notices.js"></script>
@{
    ViewBag.Title = "Play";
}

<nav class="navbar navbar-default outsideContainer navbarTT2">
    <div class="container-fluid">
        <!-- Brand and toggle get grouped for better mobile display -->
        <div class="navbar-header">
            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-2">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
        </div>

        <!-- Collect the nav links, forms, and other content for toggling -->
        <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-2">
            <ul class="nav navbar-nav">
                <li>
                    <span id="timerBox" class="glyphicon glyphicon-time" aria-hidden="true" title="Click to see how long ago the last update ran."></span>
                    <span id="turn_countdown">-:--</span>
                </li>
                <li>@Html.ActionLink("Map", MVC.PvP.WorldMap("false"))</li>
                <li class="dropdown">
                    <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">My Player <span class="caret"></span></a>
                    <ul class="dropdown-menu">
                        <li>@Html.ActionLink("Last Actions (" + Model.PlayerLog.Count() + ")", MVC.PvP.ViewLog())</li>
                        <li>@Html.ActionLink("Spells", MVC.PvP.MySkills())</li>
                        <li>@Html.ActionLink("My Effects", MVC.PvP.MyPerks())</li>
                        <li>@Html.ActionLink("Mind Control", MVC.NPC.MindControlList())</li>
                        <li>@Html.ActionLink("Look at Yourself", MVC.PvP.LookAtPlayer(Model.You.Player.Id))</li>
                        <li>@Html.ActionLink("My Statistics", MVC.Settings.PlayerStats(Model.You.Player.MembershipId))</li>
                        <li>@Html.ActionLink("Self Restore (3 AP, 10 Mana)", MVC.PvP.SelfRestore())</li>
                    </ul>
                </li>
                <li>@Html.ActionLink("Friends", MVC.PvP.MyFriends())</li>
                <li>@Html.ActionLink("Chat", MVC.Chat.Index("global"), new { target = "_blank" })</li>
                <li>@Html.ActionLink("Covenant", MVC.Covenant.MyCovenant())</li>
                

                 <li>@Html.ActionLink("Quest", MVC.Quest.QuestsAvailableHere(), new { id = "actionQuest" })</li>
                

                <li class="dropdown">
                    <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Contribute <span class="caret"></span></a>
                    <ul class="dropdown-menu">
                        <li>@Html.ActionLink("Submit Spell/Form/Item/Pet", MVC.Contribution.Contribute(-1))</li>
                        <li>@Html.ActionLink("Submit Blessing/Curse", MVC.Contribution.ContributeEffect(-1))</li>
                        @if (User.IsInRole(PvPStatics.Permissions_QuestWriter))
                        {
                            <li>@Html.ActionLink("QuestWriter", MVC.QuestWriter.Index())</li>
                        }
                    </ul>
                </li>

                @{
                    if (User.IsInRole(PvPStatics.Permissions_Admin) || User.IsInRole(PvPStatics.Permissions_Moderator))
                    {
                        <li class="dropdown">
                            <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Staff <span class="caret"></span></a>
                            <ul class="dropdown-menu">
                                @if (User.IsInRole(PvPStatics.Permissions_Admin))
                                {
                                    <li>@Html.ActionLink("Admin", MVC.PvPAdmin.Index())</li>
                                }
                                @if (User.IsInRole(PvPStatics.Permissions_Moderator))
                                {
                                    <li>@Html.ActionLink("Moderator", MVC.Moderator.Index())</li>
                                }
                            </ul>
                        </li>
                    }
                }

                <li class="visible-xs-inline"><a href="/PvP/MyInventory">Inventory @Model.PlayerItems.Count(i => !i.dbItem.IsEquipped)/@Model.InventoryMaxSize </a></li>
                @{
                    if (Model.You.Player.UnusedLevelUpPerks > 0)
                    {
                        <li>@Html.ActionLink("Level Up!", MVC.PvP.LevelupPerk(), new { @class = "levelUp" })</li> }
                }

                @{
                    if (Model.UnreadMessageCount > 0)
                    {
                        <li>@Html.ActionLink("(" + Model.UnreadMessageCount + ")", MVC.Messages.Index(), new { @class = "glyphicon glyphicon-envelope inboxNew" })</li>
                    }
                    else
                    {
                        <li>@Html.ActionLink("(0)", MVC.Messages.Index(), new { @class = "glyphicon glyphicon-envelope" })</li>
                    }
                }
                
                <li class="dropdown">
                    <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false"><span class="glyphicon glyphicon-wrench"></span><span class="caret"></span></a>
                    <ul class="dropdown-menu">
                        <li>@Html.ActionLink("Settings", MVC.Settings.Settings())</li>
                        <li>@Html.ActionLink("My blacklist entries", MVC.Settings.MyBlacklistEntries())</li>
                        <li>@Html.ActionLink("Update bio", MVC.Settings.SetBio())</li>
                        <li>@Html.ActionLink("Reserve this name", MVC.PvP.ReserveName())</li>
                    </ul>
                </li>

            </ul>
        </div><!-- /.navbar-collapse -->
    </div><!-- /.container-fluid -->
</nav>

<div>
    <p class="infoMessage result">@Html.Raw(ViewBag.Result)</p>
    <p class="infoMessage error">@ViewBag.ErrorMessage</p>
    <p class="infoMessage suberror">@ViewBag.SubErrorMessage</p>
</div>

@Html.Partial(MVC.PvP.Views.partial.RoundStatus, Model.World)

<div class="specialBox specialBox2">
    <span class="turnNumber">Turn #<b>@ViewBag.WorldTurnNumber/@PvPStatics.RoundDuration</b></span><span id="liveConnectionNotice" class="noticeOff" title="If this icon is green, you are connected to the server and will receive live notifications when attacked or messaged."><span class="glyphicon glyphicon-ok-circle"> </span></span>
    Transformania Time has <b>@Model.WorldStats.TotalPlayers</b> players, <b>@Model.WorldStats.CurrentOnlinePlayers</b> of which are currently online.
</div>


<ul id="notificationBox" style="display:none;">
    @{
        foreach (TT.Domain.Models.PlayerLog log in Model.PlayerLogImportant)
        {
            <li class="frontPageNotification">
                @Html.Raw(log.Message) <span class="timeago">@CharactersHere.DatetimeToTimeago(log.Timestamp)</span>
            </li>
        }
    }
</ul>

<p id="dismissNotficationBox" style="display:none;"><a href="javascript:void(0)" onclick="document.getElementById('notificationBox').style.height = '0px'">[ -- ]</a> <a href="javascript:void(0)" onclick="document.getElementById('notificationBox').style.height = '100px'">[ - ]</a> @Ajax.ActionLink("Dismiss Notifications", MVC.PvP.DismissNotifications_Ajax(), new AjaxOptions { HttpMethod = "GET", OnSuccess = "dismissNotificationsSuccess", OnFailure = "dismissNotificationsFail" }, null) <a href="javascript:void(0)" onclick="document.getElementById('notificationBox').style.height = '250px'">[ + ]</a> <a href="javascript:void(0)" onclick="document.getElementById('notificationBox').style.height = '500px'">[ ++ ]</a></p>


<div class="offlinePlayersWrapperBG hidden-xs">
    <div class="row">
        <div class="col-md-1">
            @Html.ActionLink(Model.PlayerItems.Count(i => !i.dbItem.IsEquipped) + "/" + Model.InventoryMaxSize, MVC.PvP.MyInventory(), new { @class = "playPageInventoryItem openInventory", @style = "background-image: url(../Images/PvP/Icons/Backpack_Meddle.png)", @title = "View Inventory" })
        </div>
        @{
            foreach (ItemViewModel item in Model.PlayerItems.Where(i => i.dbItem.IsEquipped))
            {
                <div class="col-md-1">
                    <div class="playPageInventoryItem" style="background-image: url(..@CharactersHere.GetImageURL(item, true));" title='@item.Item.FriendlyName'></div>
                </div>
            }
        }
    </div>
</div>

<div class="containerInner">

    @Html.Partial(MVC.PvP.Views.partial_FrontPageAvatar, Model.You)



    <div id="playerActionBox">
        @Html.ActionLink("Cleanse (4 AP, 3 Mana)", MVC.PvP.Cleanse(), new { id = "actionCleanse", @class = "actionButton" })
        @Html.ActionLink("Meditate (4 AP)", MVC.PvP.Meditate(), new { id = "actionMeditate", @class = "actionButton" })
        @Html.ActionLink("Search this Area (" + (int)Model.APSearchCost + " AP)", MVC.PvP.Search(), new { id = "actionSearch", @class = "actionButton" })
    </div>

    <div class="row">
        <div class="col-md-4 col-md-offset-1" style="text-align: center;">@Html.Partial(MVC.PvP.Views.partial.movementTable, Model)
            @{
                if (Model.You.Player.ShoutsRemaining > 0)
                {
                    @Html.ActionLink("Shout", MVC.PvP.Shout(), new { @class = "shout" })
                }

                if (Model.PlayerIsAtBusStop)
                {
                    @Html.ActionLink("Take Bus", MVC.PvP.Bus(), new { @class = "bus" })
                }

                KeyValuePair<int, CovenantNameFlag> temp = CovenantDictionary.IdNameFlagLookup.FirstOrDefault(c => c.Value.HomeLocation == Model.Location.dbName);

                if (temp.Value != null)
                {
                    <span class="covSafeground">Safeground for the <b>@temp.Value.Name</b> Covenant</span>
                }




            }
        </div>
        <div class="col-md-6 covenDescription">
            <span class="place">@Model.Location.Name [@Model.Location.X,@Model.Location.Y]  <br /> </span>


            @Model.Location.GetDescription()
            @{
                
                     if (Model.You.Player.GameMode >= 2 && !Model.You.Player.IsInDungeon() && (Model.You.Player.dbLocationName == "street_9th" || Model.You.Player.dbLocationName == "street_14th_north"))
                {
                    @Html.ActionLink("Enter the PvP Dungeon (30 AP)", MVC.PvP.EnterDungeon("true"))
                }
               else if (Model.You.Player.IsInDungeon())
               {
                   @Html.ActionLink("Leave the PvP Dungeon (30 AP)", MVC.PvP.EnterDungeon("false"))
               }
                
                try
                {
                    CovenantNameFlag temp2 = CovenantDictionary.IdNameFlagLookup[Model.Location.CovenantController];

                    if (temp2 != null)
                    {
                        <span class="covController">Enchanted by the <b>@temp2.Name</b> Covenant <b><span class="playerMediatingNotification">[@Model.Location.TakeoverAmount]</span></b></span>
                    }
                }
                catch
                {

                }


                if (Model.You.Player.GameMode == 2 && !Model.You.Player.IsInDungeon())
                {
                    @Html.ActionLink("Enchant (3 AP, 10 Mana)", MVC.PvP.EnchantLocation())
                }
            }

 
        </div>
    </div>

</div>

<div id="offlinePlayersButton" class="onlinePlayersButton"><a onclick="hidePlayers()">Hide online players</a></div>
<div class="onlinePlayersWrapperBG">
    <div class="row">
        @*all players who are online*@
        @{
            foreach (TT.Domain.ViewModels.PlayerFormViewModel p in Model.PlayersHere.Where(p => !PlayerProcedures.PlayerIsOffline(p.Player)).OrderByDescending(p => p.Player.Level))
            {

                <div class="col-md-2 col-sm-4 col-xs-12 charaBox">
                    <div class="charaBoxInner">
                        <div>
                            <p>

                                <div>@Html.Partial(MVC.PvP.Views.Player_Partial, p)</div>
                                <div style="text-align:center; margin-top:2px;">
                                    @Ajax.ActionLink("Attack", MVC.PvP.AttackModal(p.Player.Id), new AjaxOptions { UpdateTargetId = "attackModal", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "attack_Success", OnFailure = "attack_Failure", OnBegin = "attack_Wait" }, new { @class = "attackLink" })
                                    @{
                                        if (p.Player.BotId == AIStatics.LindellaBotId)
                                        {
                                            @Html.ActionLink("Trade", MVC.NPC.TradeWithMerchant("shirt"), new { @class = "attackLink" })
                                        }
                                        if (p.Player.BotId == AIStatics.JewdewfaeBotId)
                                        {
                                            @Html.ActionLink("Talk", MVC.NPC.TalkWithJewdewfae(), new { @class = "attackLink" })
                                        }
                                        if (p.Player.BotId == AIStatics.WuffieBotId)
                                        {
                                            @Html.ActionLink("Trade", MVC.NPC.TradeWithPetMerchant(), new { @class = "attackLink" })
                                        }
                                        if (p.Player.BotId == AIStatics.ValentineBotId)
                                        {
                                            @Html.ActionLink("Talk", MVC.NPC.TalkToValentine("none"), new { @class = "attackLink" })
                                        }
                                        if (p.Player.BotId == AIStatics.BartenderBotId)
                                        {
                                            @Html.ActionLink("Talk", MVC.NPC.TalkToBartender("none"), new { @class = "attackLink" })
                                        }
                                        if (p.Player.BotId == AIStatics.MouseBimboBotId)
                                        {
                                            @Html.ActionLink("Talk", MVC.NPC.TalkToCandice(), new { @class = "attackLink" })
                                        }
                                        if (p.Player.BotId == AIStatics.MouseNerdBotId)
                                        {
                                            @Html.ActionLink("Talk", MVC.NPC.TalkToAdrianna(), new { @class = "attackLink" })
                                        }
                                        if (p.Player.BotId == AIStatics.LoremasterBotId)
                                        {
                                            @Html.ActionLink("Talk", MVC.NPC.TalkToLorekeeper(), new { @class = "attackLink" })
                                        }
}
                                </div>
                            </p>
                        </div>
                    </div>
                </div>
            }

        }
    </div>
</div>


<div style="clear:both;"></div>

@{if (ViewBag.ShowOffline == null || !ViewBag.ShowOffline)
{
    <div id="offlinePlayersButton">@Html.ActionLink("Show offline players here (" + Model.PlayersHere.Count(p => PlayerProcedures.PlayerIsOffline(p.Player)) + ")", MVC.PvP.ShowOffline())</div>
}
}

@{if (ViewBag.ShowOffline != null && ViewBag.ShowOffline)
{
    <div class="offlinePlayersWrapperBG">
        <div class="row">

            @{
    foreach (TT.Domain.ViewModels.PlayerFormViewModel p in Model.PlayersHere.Where(p => PlayerProcedures.PlayerIsOffline(p.Player)).OrderByDescending(p => p.Player.Level))
    {
        <div class="col-md-2 col-sm-4 col-xs-12 charaBox">
            <div class="charaBoxInner">
                <div>
                    <p>
                        @Html.Partial(MVC.PvP.Views.Player_Partial, p)
                    </p>
                </div>
            </div>
        </div>
    }
            }

        </div>
    </div>
}


}
<div class="floorItemsWrapperBG">
    <div class="row">
        @{

            foreach (TT.Domain.DTOs.Item.ItemListingDetail item in Model.LocationItems)
            {
                <div class="col-md-2 col-sm-4 col-xs-12 itemBox itemBoxPP">
                    <div class="charaBoxInner">
                        <div>
                            <div class="portrait_item_mainpage" style="background-image: url(..@CharactersHere.GetImageURL(item,true));">
                                @{ if (item.ItemSource.ItemType != PvPStatics.ItemType_Consumable && item.Level > 0)
                                 {
                                    <span class="floorItemLevel"><b>@item.Level</b></span>
                                 }
                                }
                                @CharactersHere.PrintItemTypeIcon(item)
                            </div>

                            <div>
                                @{if (item.ItemSource.ItemType == PvPStatics.ItemType_Pet)
                                {
                                    @Html.ActionLink("Tame", MVC.PvP.Take(item.Id))<br />
                                }
                                else
                                {
                                    @Html.ActionLink("Take", MVC.PvP.Take(item.Id))<br />
                                }

                                }

                                <span class="floorItemName">@CharactersHere.TruncateToLength(item.ItemSource.FriendlyName, 75) <br /></span>
                                @{
                if (!item.VictimName.IsNullOrEmpty())
                {
                    <span class="formerPlayer">(Formerly @item.GetFullName())</span>
                }
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }

        }
    </div>
</div>

@Html.Partial(MVC.PvP.Views.partial.partial_recentActivity, Model.LocationLog)

<div id="modalBackdrop"></div>
<div id="attackModal" class="ui-widget-content ui-draggable" style="display:none;">
    <span id="youAreAttacking"></span>
    <span id="attackClose" onclick="closeAttackModal()">Cancel</span>
    <span id="expand" onclick="expandModal()">Expand</span>
</div>

<script>

    var turnNo = @ViewBag.WorldTurnNumber;
    var togglestate = 0;
    var blinkEnabled = 0;
    var secondsToUpdate = @ViewBag.SecondsUntilUpdate;

    var timer_minutes = "";
    var timer_seconds = "";

    var ap = @Model.You.Player.ActionPoints;
    var attacksMade = @Model.You.Player.TimesAttackingThisUpdate;

    var cleanseCost = @PvPStatics.CleanseCost;
    var meditateCost = @PvPStatics.MeditateCost;
    var searchCost = @Model.APSearchCost;
    var attackCostAP = @PvPStatics.AttackCost;
    var attackCap = @PvPStatics.MaxAttacksPerUpdate;

    var donatorTier = @Model.You.Player.DonatorLevel;

    var playUpdateSound = false;
    var playAttackSound = false;
    var playMessageSound = false;
    var notificationsEnabled = false;
    var name = "@Model.You.Player.GetFullName()";
    var playerMana = @Model.You.Player.Mana;
    var maxLogSize = @ViewBag.MaxLogSize;

    $(document).ready(function () {

   

       

        // var msgToReplace = name + " has"
        var text = $("#RecentActivityLog").html();


        for (var i = 0; i <= maxLogSize; i++) {
            text = text.replace(name, "You");
            text = text.replace("You was", "You were");
        }

        $( "#timerBox" ).click(function() {
            alert("The last update was  @CharactersHere.DatetimeToTimeago_WithSeconds(Model.LastUpdateTimestamp) (based on when this page was loaded.)  Turns last 5 minutes.");
        });


        $("#RecentActivityLog").html(text);

        if (ap < cleanseCost) {
            $("#action_cleanse").attr("href", "#");
            $("#action_cleanse").addClass("disabled");
        }

        if (ap < meditateCost) {
            $("#action_meditate").attr("href", "#");
            $("#action_meditate").addClass("disabled");
        }

        if (ap < searchCost) {
            $("#action_search").attr("href", "#");
            $("#action_search").addClass("disabled");
        }

        if (ap < attackCostAP) {
            $(".action_attack").each(function() {
                $( this ).attr("href", "#");
                $( this ).addClass("disabled");
            });
        }


        // show offline player section when player clicks on the proper div
        $("#showOfflinePlayersButton").click(function() {
            $("#offlinePlayersWrapper").show();
        });

        $("#timeReportClickMe").click(function() {
            $("#timeReport").show();

        });

        

    }); // end document.ready

    $( "#attackModal" ).draggable();
    $( "#attackModal" ).resizable();

</script>