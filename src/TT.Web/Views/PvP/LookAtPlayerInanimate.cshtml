@model TT.Domain.ViewModels.PlayerFormItemsSkillsViewModel
@using TT.Domain.ViewModels
@using TT.Domain.Procedures
@using TT.Domain.Statics

<nav class="navbar navbar-default outsideContainer navbarTT2">
    <div class="container-fluid">
        <!-- Brand and toggle get grouped for better mobile display -->
        <div class="navbar-header">
            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-2">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
        </div>

        <!-- Collect the nav links, forms, and other content for toggling -->
        <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-2">
            <ul class="nav navbar-nav" style="width:100%;">
                <li>@Html.ActionLink("Back to game", MVC.PvP.Play())</li>
                @{
                    if (Model.PlayerForm.Player.BotId == AIStatics.ActivePlayerBotId)
                    {
                        <p>
                            @{
                        if (ViewBag.HasBio)
                        {
                        <li>@Html.ActionLink("View Bio", MVC.Settings.ViewBio(Model.PlayerForm.Player.MembershipId))</li>
                        }
                        if (ViewBag.HasArtistAuthorBio)
                        {
                            <li>
                                @Html.ActionLink("View Artist/Author Bio", MVC.Settings.AuthorArtistBio(Model.PlayerForm.Player.MembershipId))
                            </li>
                        }
                            }

                            @{
                        if (Model.PlayerForm.Player.BotId == AIStatics.ActivePlayerBotId)
                        {

                            <li>@Html.ActionLink("Send a Message", MVC.Messages.Write(Model.PlayerForm.Player.Id, -1))</li>
                                  <li>@Html.ActionLink("View Statistics", MVC.Settings.PlayerStats(Model.PlayerForm.Player.MembershipId))</li>
                                <li>@Html.ActionLink("Add Friend", MVC.PvP.AddFriend(Model.PlayerForm.Player.Id))</li>
                                <li>@Html.ActionLink("Blacklist player", MVC.Settings.ToggleBlacklistOnPlayer(Model.PlayerForm.Player.Id))</li>
                        }
                            }
                            </p>
                    }

                }
            </ul>
        </div><!-- /.navbar-collapse -->
    </div><!-- /.container-fluid -->
</nav>

@{
    if (Model.PlayerForm.Player.BotId == AIStatics.RerolledPlayerBotId)
    {
        <div>
            <p class="infoMessage error">This player has chosen to create a new character and cannot be messaged or have a friend request sent to them.</p>
        </div>
    }
}

<div class="containerInner">
    <center>
        <div class="leftDisplay" style="background-image: url(../../Images/PvP/@ViewBag.ImgUrl);">
            <span class="icon icon-level"><b>@ViewBag.ItemLevel</b></span>
        </div>
        <div class="rightDisplay">
            <p class="avatarName center-block">@Model.PlayerForm.Player.GetFullName()</p>
            <h3 class="center-block">@Model.PlayerForm.Form.FriendlyName</h3>
            @{if (Model.PlayerForm.Player.Mobility == PvPStatics.MobilityFull)
            {
                <span class="textMobility">
                    Once human, this player has become inanimate and poses no threat to its enemies.  Far from being dead, however, @Model.PlayerForm.Player.FirstName's new form still retains consciousness and some of its old magic, which can enhance or hamper its owner's abilities.
                </span>

            }}

            @{if (Model.PlayerForm.Player.Mobility == PvPStatics.MobilityPet)
            {
                <span class="textMobility">
                    Once human, this player has become an animal or familiar and poses no threat to its enemies.  @Model.PlayerForm.Player.FirstName's new form still retains some of its old consciousness and magic, which can enhance or hamper their master's abilities when tamed and kept as a pet.
                </span>

            }}
            <h4 style="font-size:14px;">@ViewBag.FormDescriptionItem </h4>
        </div>
    </center>
</div>


<div style="clear:both"><br /></div>

@{
    if (User.IsInRole(PvPStatics.Permissions_Moderator) || User.IsInRole(PvPStatics.Permissions_Admin) || User.IsInRole(PvPStatics.Permissions_Chaoslord))
    {
        <nav class="navbar navbar-default outsideContainer navbarTT2">
            <div class="container-fluid">
                <!-- Brand and toggle get grouped for better mobile display -->
                <div class="navbar-header">
                    <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-3">
                        <span class="sr-only">Toggle navigation</span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                    </button>
                </div>

                <!-- Collect the nav links, forms, and other content for toggling -->
                <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-3">
                    <ul class="nav navbar-nav" style="width: 100%;">
                        @if (Model.PlayerForm.Player.FlaggedForAbuse)
                        {
                            <li>@Html.ActionLink("Unlock this player for suspicious activity", MVC.PvP.FlagForSuspiciousActivity(Model.PlayerForm.Player.Id))</li>
                        }
                        else
                        {
                            <li>@Html.ActionLink("Lock this player for suspicious activity", MVC.PvP.FlagForSuspiciousActivity(Model.PlayerForm.Player.Id))</li>
                        }
                        <li>@Html.ActionLink("Reset IP Address", MVC.PvPAdmin.ResetAllPlayersWithIPAddress(Model.PlayerForm.Player.IpAddress))</li>
                        <li>@Html.ActionLink("Toggle ban on global chat", MVC.PvPAdmin.ToggleBanOnGlobalChat(Model.PlayerForm.Player.Id))</li>
                        <li>@Html.ActionLink("Rename", MVC.PvPAdmin.RenamePlayer(Model.PlayerForm.Player.Id))</li>
                        <li>@Html.ActionLink("View/Add Strikes", MVC.Moderator.ViewStrikes(Model.PlayerForm.Player.MembershipId))</li>
                    </ul>
                </div><!-- /.navbar-collapse -->
            </div><!-- /.container-fluid -->
        </nav>
    }
}

<style>
    .leftDisplay {
        background-size: 100% 100%;
        position: relative;
        text-align: left;
        height: 400px;
        width: 400px;
        display: inline-table;
        vertical-align: top;
        margin: 0px;
    }

    .rightDisplay {
        padding-left: 10px;
        padding-right: 10px;
        width: 480px;
        display: inline-table;
        vertical-align: top;
        text-align: left;
    }

    .textName {
        font-size: 25px;
        text-align: center;
    }

    .textDescription {
        font-size: 14px;
    }

    .textMobility {
        font-size: 16px;
        font-style: italic;
    }

    .Links {
        display: none;
    }

    @@media screen and (max-width: 520px) {
        .leftDisplay {
            height: 300px;
            width: 300px;
        }

        .rightDisplay {
            width: 100%;
        }
    }
</style>
