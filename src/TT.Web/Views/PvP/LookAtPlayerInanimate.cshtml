@model TT.Domain.ViewModels.PlayerFormItemsSkillsViewModel
@using TT.Domain.Statics
@{
    ViewBag.Title = Model.PlayerForm.Player.GetFullName();
}

@section menu
{
    <li><a href="@Url.Action(MVC.PvP.Play())">Back to game</a></li>
    @{
        if (Model.PlayerForm.Player.BotId == AIStatics.ActivePlayerBotId)
        {
            <p>
                @{
                    if (ViewBag.HasBio)
                    {
                        <li><a href="@Url.Action(MVC.Settings.ViewBio(Model.PlayerForm.Player.MembershipId))">View Bio</a></li>
                    }
                    if (ViewBag.HasArtistAuthorBio)
                    {
                        <li>
                            <a href="@Url.Action(MVC.Settings.AuthorArtistBio(Model.PlayerForm.Player.MembershipId))">View Artist/Author Bio</a>
                        </li>
                    }
                }

                @{
                    if (Model.PlayerForm.Player.BotId == AIStatics.ActivePlayerBotId)
                    {

                        <li><a href="@Url.Action(MVC.Messages.Write(Model.PlayerForm.Player.Id, -1))">Send a Message</a></li>
                        <li><a href="@Url.Action(MVC.Settings.PlayerStats(Model.PlayerForm.Player.MembershipId))">View Statistics</a></li>
                        <li><a href="@Url.Action(MVC.PvP.AddFriend(Model.PlayerForm.Player.Id))">Add Friend</a></li>
                        <li><a href="@Url.Action(MVC.Settings.ToggleBlacklistOnPlayer(Model.PlayerForm.Player.Id))">Blacklist player</a></li>
                        <li><a href="@Url.Action(MVC.Report.Report(Model.PlayerForm.Player.MembershipId))">Report Player</a></li>
                    }
                }
            </p>
        }

    }
}

@{
    if (Model.PlayerForm.Player.BotId == AIStatics.RerolledPlayerBotId)
    {
        <div>
            <p class="infoMessage error">This player has chosen to create a new character and cannot be messaged or have a friend request sent to them.</p>
        </div>
    }
}

<div class="containerInner">
    <center>
        <div class="leftDisplay" style="background-image: url(../../Images/PvP/@ViewBag.ImgUrl);">
            <span class="icon icon-level"><b>@ViewBag.ItemLevel</b></span>
        </div>
        <div class="rightDisplay">
            <p class="avatarName center-block">@Model.PlayerForm.Player.GetFullName()</p>
            <h3 class="center-block">@Model.PlayerForm.Form.FriendlyName</h3>
            @{if (Model.PlayerForm.Player.Mobility == PvPStatics.MobilityFull)
            {
                <span class="textMobility">
                    Once human, this player has become inanimate and poses no threat to its enemies.  Far from being dead, however, @Model.PlayerForm.Player.FirstName's new form still retains consciousness and some of its old magic, which can enhance or hamper its owner's abilities.
                </span>

            }}

            @{if (Model.PlayerForm.Player.Mobility == PvPStatics.MobilityPet)
            {
                <span class="textMobility">
                    Once human, this player has become an animal or familiar and poses no threat to its enemies.  @Model.PlayerForm.Player.FirstName's new form still retains some of its old consciousness and magic, which can enhance or hamper their master's abilities when tamed and kept as a pet.
                </span>

            }}
            <h4 style="font-size:14px;">@ViewBag.FormDescriptionItem </h4>
        </div>
    </center>
</div>


<div style="clear:both"><br></div>

@{
    if (User.IsInRole(PvPStatics.Permissions_Moderator) || User.IsInRole(PvPStatics.Permissions_Admin) || User.IsInRole(PvPStatics.Permissions_Chaoslord))
    {
        @section menubottom
        {
            @if (Model.PlayerForm.Player.FlaggedForAbuse)
            {
                <li><a href="@Url.Action(MVC.PvP.FlagForSuspiciousActivity(Model.PlayerForm.Player.Id))">Unlock this player for suspicious activity</a></li>
            }
            else
            {
                <li><a href="@Url.Action(MVC.PvP.FlagForSuspiciousActivity(Model.PlayerForm.Player.Id))">Lock this player for suspicious activity</a></li>
            }
            <li><a href="@Url.Action(MVC.PvPAdmin.ResetAllPlayersWithIPAddress(Model.PlayerForm.Player.IpAddress))">Reset IP Address</a></li>
            <li><a href="@Url.Action(MVC.PvPAdmin.ToggleBanOnGlobalChat(Model.PlayerForm.Player.Id))">Toggle ban on global chat</a></li>
            <li><a href="@Url.Action(MVC.PvPAdmin.RenamePlayer(Model.PlayerForm.Player.Id))">Rename</a></li>
            <li><a href="@Url.Action(MVC.Moderator.ViewStrikes(Model.PlayerForm.Player.MembershipId))">View/Add Strikes</a></li>
            <li><a href="@Url.Action(MVC.Moderator.SetAccountLockoutDate(Model.PlayerForm.Player.MembershipId))">Set Account Lockout Date</a></li>
            <li><a id="ForceUserLogout" href="javascript:void(0)">Force User Logout</a></li>
        }
    }
}

@functions{
    public string TokenHeaderValue()
    {
        AntiForgery.GetTokens(null, out var cookieToken, out var formToken);
        return cookieToken + ":" + formToken;
    }

    public string GetUserId()
    {
        return Model.PlayerForm.Player.MembershipId;
    }

    public string GetApiUrl()
    {
        return "/api";
    }
}

@section scripts
{
    <script>

    $(document).ready(function () {
        // get current url that the page is on
        var currentUrl = new URL(window.location);

        $("#ForceUserLogout").on("click", function () {
            $.ajax({
                url: '@GetApiUrl()@Url.Action("Post", "AdminSignOut")',
                type: "post",
                contentType: "application/json",
                data: JSON.stringify({
                    TargetUserNameId: '@GetUserId()'
                }),
                dataType: "json",
                headers: {
                    RequestVerificationToken: '@TokenHeaderValue()'
                },
                complete: function (response, textStatus) {
                    var redirectError = response.getResponseHeader("X-Responded-JSON");

                    if (redirectError)
                    {
                        var redirectErrorJson = JSON.parse(redirectError);

                        if (redirectErrorJson.status == 401)
                        {
                            // get the url that asp wants to redirect the page to after a login
                            var redirectUrl = new URL(redirectErrorJson.headers.location);

                            // set the query string that the login page will have to be the query string that the current page has because of silly "helpful" things
                            redirectUrl.search = currentUrl.search;

                            // append the ReturnUrl to be everything to the right of the hostname
                            redirectUrl.searchParams.append("ReturnUrl", currentUrl.pathname + currentUrl.search + currentUrl.hash);

                            window.location.href = redirectUrl;

                            return;
                        }
                    }

                    var resultContainer = $("#resultContainer");
                    var errorContainer = $("#errorContainer");

                    resultContainer.text(response.responseJSON.Result);
                    errorContainer.text(response.responseJSON.Error);

                    $('html, body').animate({
                        scrollTop: 0
                    }, 500);
                }
            });
        });
    });
    </script>
}
@section head
{
    <style>
    .leftDisplay {
        background-size: 100% 100%;
        position: relative;
        text-align: left;
        height: 400px;
        width: 400px;
        display: inline-table;
        vertical-align: top;
        margin: 0px;
    }

    .rightDisplay {
        padding-left: 10px;
        padding-right: 10px;
        width: 480px;
        display: inline-table;
        vertical-align: top;
        text-align: left;
    }

    .textName {
        font-size: 25px;
        text-align: center;
    }

    .textDescription {
        font-size: 14px;
    }

    .textMobility {
        font-size: 16px;
        font-style: italic;
    }

    .Links {
        display: none;
    }

    @@media screen and (max-width: 520px) {
        .leftDisplay {
            height: 300px;
            width: 300px;
        }

        .rightDisplay {
            width: 100%;
        }
    }
    </style>
}
