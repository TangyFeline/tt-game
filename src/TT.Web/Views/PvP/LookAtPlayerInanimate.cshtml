@model TT.Domain.ViewModels.PlayerFormItemsSkillsViewModel
@using TT.Domain.Statics
@{
    ViewBag.Title = Model.PlayerForm.Player.GetFullName();
}

@section menu
{
    @if (ViewBag.OwnedByMe && Model.PlayerForm?.Player != null && Model.PlayerForm.Player.BotId == AIStatics.ActivePlayerBotId)
    {
        <li>
            <span id="timerBox" class="glyphicon glyphicon-time" aria-hidden="true"></span>
            <span id="turn_countdown">-:--</span>
        </li>
    }
    <li><a href="@Url.Action(MVC.PvP.Play())">Back to game</a></li>
    @{
        if (ViewBag.OwnedByMe)
        {
            <li><a href="@Url.Action(MVC.Item.MyInventory())">Back to inventory</a></li>
        }

        if (Model.PlayerForm.Player.BotId == AIStatics.ActivePlayerBotId)
        {
            <p>
                @{
                    if (ViewBag.HasBio)
                    {
                        <li><a href="@Url.Action(MVC.Settings.ViewBio(Model.PlayerForm.Player.MembershipId))">View Bio</a></li>
                    }
                    else if (ViewBag.IsMe)
                    {
                        <li><a href="@Url.Action(MVC.Settings.SetBio())">Create bio</a></li>
                    }

                    if (ViewBag.HasArtistAuthorBio)
                    {
                        <li><a href="@Url.Action(MVC.Settings.AuthorArtistBio(Model.PlayerForm.Player.MembershipId))">View Artist/Author Bio</a></li>
                    }

                    <li><a href="@Url.Action(MVC.Settings.PlayerStats(Model.PlayerForm.Player.MembershipId))">View Statistics</a></li>

                    if (!ViewBag.IsMe)
                    {
                        <li><a href="@Url.Action(MVC.Messages.Write(Model.PlayerForm.Player.Id, -1))">Send a Message</a></li>
                        <li><a href="@Url.Action(MVC.PvP.AddFriend(Model.PlayerForm.Player.Id))">Add Friend</a></li>
                        <li><a href="@Url.Action(MVC.Settings.ToggleBlacklistOnPlayer(Model.PlayerForm.Player.Id))">Blacklist Player</a></li>
                        <li><a href="@Url.Action(MVC.Report.Report(Model.PlayerForm.Player.MembershipId))">Report Player</a></li>
                    }
                }
            </p>
        }

    }
}

@{
    if (Model.PlayerForm.Player.BotId == AIStatics.RerolledPlayerBotId)
    {
        <div>
            <p class="infoMessage error">This player has chosen to create a new character and cannot be messaged or have a friend request sent to them.</p>
        </div>
    }
}

<div class="containerInner">
    <center>
        <div class="leftDisplay" style="background-image: url(https://images.transformaniatime.com/@ViewBag.ImgUrl);">
            <span class="icon icon-level"><b>@ViewBag.ItemLevel</b></span>
        </div>
        <div class="rightDisplay">
            <p class="avatarName center-block">@Model.PlayerForm.Player.GetFullName()</p>
            <p class="avatarOriginalName center-block">(Original name: @Model.PlayerForm.Player.OriginalFirstName @Model.PlayerForm.Player.OriginalLastName)</p>
            <h3 class="center-block">@Model.PlayerForm.Form.FriendlyName</h3>
            @{if (Model.PlayerForm.Player.Mobility == PvPStatics.MobilityInanimate)
                {
                    <span class="textMobility">
                        Once human, this player has become inanimate and poses no threat to its enemies.  Far from being dead, however, @Model.PlayerForm.Player.FirstName's new form still retains consciousness and some of its old magic, which can enhance or hamper its owner's abilities.
                        @ViewBag.WornMessage
                    </span>
                }}

            @{if (Model.PlayerForm.Player.Mobility == PvPStatics.MobilityPet)
                {
                    <span class="textMobility">
                        Once human, this player has become an animal or familiar and poses no threat to its enemies.  @Model.PlayerForm.Player.FirstName's new form still retains some of its old consciousness and magic, which can enhance or hamper their master's abilities when tamed and kept as a pet.
                        @ViewBag.WornMessage
                    </span>
                }}
            <h4 style="font-size:14px;">@ViewBag.FormDescriptionItem </h4>
            @if (ViewBag.OwnedByMe)
            {
                <div style="font-size:14px;">
                    @if (ViewBag.ItemSkills.Count > 0)
                    {
                        if (ViewBag.IsEquipped)
                        {
                            <text>
                                By @((Model.PlayerForm.Player.Mobility == PvPStatics.MobilityPet) ? "taming this pet" : "wearing this item")
                                you have been granted the following skills:
                            </text>
                        }
                        else
                        {
                            <text>If you wear this item you will gain the following skills:</text>
                        }

                        <ul>
                            @foreach (var effect in ViewBag.ItemSkills)
                            {
                                <li>@effect.FriendlyName</li>
                            }
                        </ul>
                    }
                    else if (Model.PlayerForm.Player.Mobility == PvPStatics.MobilityPet)
                    {
                        <text>You currently own this pet.</text>
                    }
                    else
                    {
                        if (ViewBag.IsConsumable)
                        {
                            <text>You currently own this item.</text>
                            if (!MvcHtmlString.IsNullOrEmpty(ViewBag.ConsumableEffect))
                            {
                                <text>Using it will give you the @ViewBag.ConsumableEffect effect.</text>
                            }
                        }
                        else
                        {
                            <text>You currently own this item and are @(ViewBag.IsEquipped ? "" : "not") wearing it.</text>
                        }
                    }

                    @if (ViewBag.OwnedByMe && Model.PlayerForm.Player.BotId == AIStatics.ActivePlayerBotId)
                    {
                        <p>
                            As an owner, you can reward or punish your @(Model.PlayerForm.Player.Mobility == PvPStatics.MobilityInanimate ? "item" : "pet"):
                            <ul class="inanimateActionList">
                                @if (Model.PlayerForm.Player.Mobility == PvPStatics.MobilityInanimate)
                                {
                                    <li>
                                        <a href="@Url.Action(MVC.PvP.OwnerAction("flaunt", (int)ViewBag.ItemId))" class="check inanimateAction">Proudly flaunt your @Model.PlayerForm.Form.FriendlyName (Boost chance)</a>
                                    </li>
                                    <li>
                                        <a href="@Url.Action(MVC.PvP.OwnerAction("shun",  (int)ViewBag.ItemId))" class="check inanimateAction">Disappointedly shun your @Model.PlayerForm.Form.FriendlyName (Dishearten chance)</a>
                                    </li>
                                    <li>
                                        <a href="@Url.Action(MVC.PvP.OwnerAction("hush",  (int)ViewBag.ItemId))" class="check itemCheck inanimateAction">Sternly hush your @Model.PlayerForm.Form.FriendlyName (Block action)</a>
                                    </li>
                                }
                                else if (Model.PlayerForm.Player.Mobility == PvPStatics.MobilityPet)
                                {
                                    <li>
                                        <a href="@Url.Action(MVC.PvP.OwnerAction("praise", (int)ViewBag.ItemId))" class="check inanimateAction">Heap praise upon your @Model.PlayerForm.Form.FriendlyName (Boost chance)</a>
                                    </li>
                                    <li>
                                        <a href="@Url.Action(MVC.PvP.OwnerAction("scold", (int)ViewBag.ItemId))" class="check inanimateAction">Bitterly scold your @Model.PlayerForm.Form.FriendlyName (Dishearten chance)</a>
                                    </li>
                                    <li>
                                        <a href="@Url.Action(MVC.PvP.OwnerAction("restrain",  (int)ViewBag.ItemId))" class="check itemCheck inanimateAction">Forcibly restrain your @Model.PlayerForm.Form.FriendlyName (Block action)</a>
                                    </li>
                                }
                            </ul>
                            Interactions offer a chance to help speed up or slow down your item or pet's progress and cost you one item action.
                        </p>
                    }
                </div>
            }
        </div>
    </center>
</div>


<div style="clear:both"><br></div>

@{
    if (User.IsInRole(PvPStatics.Permissions_Moderator) || User.IsInRole(PvPStatics.Permissions_Admin))
    {
        @section menubottom
        {

            @{ if (Model.PlayerForm.Player.MembershipId != null)
                {
                    <div style="text-align:center;padding-top:25px;">
                        <p class="rowDivider">

                            <b>User: </b>@Model.PlayerUserStrikesDetail.User.UserName || <b>ID: </b>@Model.PlayerForm.Player.MembershipId || <b>IP: </b>@Model.PlayerForm.Player.IpAddress
                        </p>
                    </div>
                }
            }

            @if (Model.PlayerForm.Player.FlaggedForAbuse)
            {
                <li><a href="@Url.Action(MVC.PvP.FlagForSuspiciousActivity(Model.PlayerForm.Player.Id))">Unlock this player for suspicious activity</a></li>
            }
            else
            {
                <li><a href="@Url.Action(MVC.PvP.FlagForSuspiciousActivity(Model.PlayerForm.Player.Id))">Lock this player for suspicious activity</a></li>
            }
            <li><a href="@Url.Action(MVC.PvPAdmin.ResetAllPlayersWithIPAddress(Model.PlayerForm.Player.IpAddress))">Reset IP Address</a></li>
            <li><a href="@Url.Action(MVC.PvPAdmin.ToggleBanOnGlobalChat(Model.PlayerForm.Player.Id))">Toggle ban on global chat</a></li>
            <li><a href="@Url.Action(MVC.PvPAdmin.ViewPlayerLog(Model.PlayerForm.Player.Id))">Check player log</a></li>
            @if (ViewBag.Owner?.Player != null)
            {
                <li><a href="@Url.Action(MVC.Chat.ChatLog($"owner_{ViewBag.Owner.Player.Id}", "lasth"))">Item chat log</a></li>
            }
            <li><a href="@Url.Action(MVC.Chat.ChatLog($"owner_{Model.PlayerForm.Player.Id}", "lasth"))">Animate chat log</a></li>
            <li><a href="@Url.Action(MVC.PvPAdmin.AdminRename(Model.PlayerForm.Player.Id))">Rename</a></li>
            <li><a href="@Url.Action(MVC.PvPAdmin.RenamePlayer(Model.PlayerForm.Player.Id))">Chaos Actions</a></li>
            <li><a href="@Url.Action(MVC.Moderator.ViewStrikes(Model.PlayerForm.Player.MembershipId))">View/Add Strikes</a></li>
            <li><a href="@Url.Action(MVC.Moderator.SetAccountLockoutDate(Model.PlayerForm.Player.MembershipId))">Set Account Lockout Date</a></li>
            <li><a id="ForceUserLogout" href="javascript:void(0)">Force User Logout</a></li>
        }
    }
    else if (PvPStatics.ChaosMode && User.IsInRole(PvPStatics.Permissions_Chaoslord))
    {
        @section menubottom
        {
            <li><a href="@Url.Action(MVC.PvPAdmin.RenamePlayer(Model.PlayerForm.Player.Id))">Chaos Actions</a></li>
        }
    }
}

@functions{
    public string TokenHeaderValue()
    {
        AntiForgery.GetTokens(null, out var cookieToken, out var formToken);
        return cookieToken + ":" + formToken;
    }

    public string GetUserId()
    {
        return Model.PlayerForm.Player.MembershipId;
    }

    public string GetApiUrl()
    {
        return "/api";
    }
}

@section scripts
{
    @if (ViewBag.OwnedByMe)
    {
        <script src="@Links.Scripts.notices_js"></script>
        <script>

        var blinkEnabled = 0;
        var secondsToUpdate = @ViewBag.SecondsUntilUpdate;
        var togglestate = 0;
        var playUpdateSound = false;
        var playerCanInteract = @((ViewBag.PlayerInteractionsRemain != null && ViewBag.PlayerInteractionsRemain) ? "true" : "false");
        var itemCanInteract = @((ViewBag.ItemInteractionsRemain != null && ViewBag.ItemInteractionsRemain) ? "true" : "false");
        </script>
    }
    <script>
    $(document).ready(function () {
        // get current url that the page is on
        var currentUrl = new URL(window.location);

        if (!playerCanInteract) {
            $(".check").attr("href", "#").addClass("disabled");
        }
        else if (!itemCanInteract) {
            $(".itemCheck").attr("href", "#").addClass("disabled");
        }

        $("#ForceUserLogout").on("click", function () {
            $.ajax({
                url: '@GetApiUrl()@Url.Action("Post", "AdminSignOut")',
                type: "post",
                contentType: "application/json",
                data: JSON.stringify({
                    TargetUserNameId: '@GetUserId()'
                }),
                dataType: "json",
                headers: {
                    RequestVerificationToken: '@TokenHeaderValue()'
                },
                complete: function (response, textStatus) {
                    var redirectError = response.getResponseHeader("X-Responded-JSON");

                    if (redirectError)
                    {
                        var redirectErrorJson = JSON.parse(redirectError);

                        if (redirectErrorJson.status == 401)
                        {
                            // get the url that asp wants to redirect the page to after a login
                            var redirectUrl = new URL(redirectErrorJson.headers.location);

                            // set the query string that the login page will have to be the query string that the current page has because of silly "helpful" things
                            redirectUrl.search = currentUrl.search;

                            // append the ReturnUrl to be everything to the right of the hostname
                            redirectUrl.searchParams.append("ReturnUrl", currentUrl.pathname + currentUrl.search + currentUrl.hash);

                            window.location.href = redirectUrl;

                            return;
                        }
                    }

                    var resultContainer = $("#resultContainer");
                    var errorContainer = $("#errorContainer");

                    resultContainer.text(response.responseJSON.Result);
                    errorContainer.text(response.responseJSON.Error);

                    $('html, body').animate({
                        scrollTop: 0
                    }, 500);
                }
            });
        });

        var nameNode = $('.avatarName');

        if (@(Model.PlayerForm.Player.IsUsingOriginalName() ? "true" : "false"))
        {
            nameNode.attr('title', "This player is using their original name");
        }
        else
        {
            nameNode.attr('title', "Double tap to see this player's original name");
        }

        nameNode.on('dblclick', function () {
            getSelection().removeAllRanges();
            $('.avatarOriginalName').toggle();
            return false;
        });

    });
    </script>
}
@section head
{
    <style>
        .leftDisplay {
            background-size: 100% 100%;
            position: relative;
            text-align: left;
            height: 400px;
            width: 400px;
            display: inline-table;
            vertical-align: top;
            margin: 0px;
        }

        .rightDisplay {
            padding-left: 10px;
            padding-right: 10px;
            width: 480px;
            display: inline-table;
            vertical-align: top;
            text-align: left;
        }

        .textName {
            font-size: 25px;
            text-align: center;
        }

        .textDescription {
            font-size: 14px;
        }

        .textMobility {
            font-size: 16px;
            font-style: italic;
        }

        .Links {
            display: none;
        }

        @@media screen and (max-width: 520px) {
            .leftDisplay {
                height: 300px;
                width: 300px;
            }

            .rightDisplay {
                width: 100%;
            }
        }

        .rowDivider {
            background-color: black;
            color: white;
        }
    </style>
}
