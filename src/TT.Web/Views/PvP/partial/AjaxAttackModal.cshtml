@model IEnumerable<TT.Domain.ViewModels.SkillViewModel>
@using TT.Web.CustomHtmlHelpers

    <p id="youAreAttacking">You are attacking @ViewBag.TargetName.</p>  
    <p>This spell will cost you <b>@ViewBag.ManaCost</b> mana to cast against this opponent.</p>
    <span id="attackClose" onclick="closeAttackModal()">Cancel</span>
<a href="@Url.Action(MVC.Duel.IssueChallenge((int)ViewBag.TargetId))" id="duel_challenge">Challenge to Duel</a>
<span id="expand" onclick="expandModal()">Expand</span>
    <span id="toggle_all" onclick="toggleAll()">All</span>
    <span id="toggle_animates" onclick="toggleAnimates()">Animate</span>
    <span id="toggle_inanimates" onclick="toggleInanimates()">Inanimate</span>
    <span id="toggle_animal" onclick="toggleAnimal()">Pet/Animal</span>
    <span id="toggle_mindcontrol" onclick="toggleMindControl()">Mind Control</span>
    <span id="toggle_other" onclick="toggleOthers()">Other</span>
<span><a href="@Url.Action(MVC.PvP.MySkills())" id="toggle_mindcontrol">View/Archive My Spells</a></span>
<input id="attack-search-box" type="text" placeholder="filter spells">
<span>History limit:</span>
<input id="attack-spell-count" type="number" min="0" max="10" placeholder="count" style="width: 35px;">

    <br /><br />

@{ 
    if (ViewBag.Recovered)
    {
        <p class="bad">@Html.Raw(ViewBag.RecoveredMsg)</p>
    }
}


<span id="lastAttack"></span>

    @foreach (var s in Model.OrderBy(s => s.StaticSkill.FriendlyName))
    {


        <span>
            <a href="@Url.Action(MVC.PvP.Attack((int)ViewBag.TargetId, s.dbSkill.SkillSourceId.Value))" class="@HtmlHelpers.GetSpellTypeClass(s)" manacost="@s.StaticSkill.ManaCost">@s.StaticSkill.FriendlyName</a>
        </span>

    }

<script>

    function expandModal() {
        var modal = $("#attackModal");
        modal.css("height", "100%");
        modal.css("width", "100%");
        modal.css("left", 0);
        modal.css("top", 0);

        $("#expand").hide();

        $(".action_attack").each(function () {
            $(this).css("font-size", "20px");

        });
    }

    function toggleAll() {

        var spellLinks = $("#attackModal a");
        spellLinks.each(function () {
            $(this).show();
           // alert($(this).attr('class'));
        });

    }

    function toggleAnimates() {
        var spellLinks = $("#attackModal a");
        spellLinks.each(function () {
            if ($(this).attr('class') == "action_attack full") {
                $(this).show();
            } else {
                $(this).hide();
            }
        });
    }

    function toggleInanimates() {
        var spellLinks = $("#attackModal a");
        spellLinks.each(function () {
            if ($(this).attr('class') == "action_attack inanimate") {
                $(this).show();
            } else {
                $(this).hide();
            }
        });
    }

    function toggleAnimal() {
        var spellLinks = $("#attackModal a");
        spellLinks.each(function () {
            if ($(this).attr('class') == "action_attack animal") {
                $(this).show();
            } else {
                $(this).hide();
            }
        });
    }


    function toggleMindControl() {
        var spellLinks = $("#attackModal a");
        spellLinks.each(function () {
            if ($(this).attr('class') == "action_attack mindcontrol") {
                $(this).show();
            } else {
                $(this).hide();
            }
        });
    }

    function toggleOthers() {
        var spellLinks = $("#attackModal a");
        spellLinks.each(function () {
            if ($(this).attr('class') == "action_attack weaken" || $(this).attr('class') == "action_attack curse") {
                $(this).show();
            } else {
                $(this).hide();
            }
        });
    }

    jQuery.expr[':'].contains = function (a, i, m) {
        return jQuery(a).text().toUpperCase()
            .indexOf(m[3].toUpperCase()) >= 0;
    };
    //actual search script
    $('#attack-search-box').keyup(updateSearch); //these two lines trigger the search to update
    $('#attack-search-box').keydown(updateSearch);
    function updateSearch() {
        if ($("#attack-search-box").val().length == 0) //if the search box is empty, show everything
        {
            $('.action_attack').show();
        }
        $('.action_attack').hide();
        $('.action_attack:contains(' + $("#attack-search-box").val() + ')').show();
    }

    $('#attack-spell-count').on('input', function () {

        var count = parseInt($(this).val());
        if (typeof count === 'number' && !isNaN(count)) {
            localStorage.setItem("play_lastAttackCount", count);
        }
    });

    var count = parseInt(localStorage.getItem("play_lastAttackCount"));
    if (count === null || typeof count !== 'number' || isNaN(count)) {
        count = 3;
        localStorage.setItem("play_lastAttackCount", count);
    }
    if (count > 10) {
        count = 10;
        localStorage.setItem("play_lastAttackCount", count);
    }
    if (count < 0) {
        count = 0;
        localStorage.setItem("play_lastAttackCount", count);
    }
    
    $('#attack-spell-count').val(count);

</script>

