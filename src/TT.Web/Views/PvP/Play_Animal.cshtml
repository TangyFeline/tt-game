@model TT.Domain.ViewModels.AnimalPlayPageViewModel
@using TT.Domain.Procedures
@using TT.Domain.Statics
@using TT.Web.CustomHtmlHelpers

<script src="~/Scripts/jquery-ui-1.10.4.js"></script>

<script src="~/Scripts/jquery.signalR-2.0.3.min.js"></script>
<script src="~/signalr/hubs"></script>
<script src="~/Scripts/notices.js"></script>

@{
    if (@ViewBag.WorldTurnNumber >= @PvPStatics.RoundDuration)
    {
        <div class="inbetweenRoundNotice">The round has ended.  Check back soon to start again on a fresh round.</div>
    }
}

@section menu
{
    <li>
        <span id="timerBox" class="glyphicon glyphicon-time" aria-hidden="true" title="Click to see how long ago the last update ran."></span>
        <span id="turn_countdown">-:--</span>
    </li>
    <li><a href="@Url.Action(MVC.PvP.WorldMap("false"))">Map</a></li>
    <li class="dropdown">
        <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">My Player <span class="caret"></span></a>
        <ul class="dropdown-menu">
            <li><a href="@Url.Action(MVC.PvP.ViewLog())">Last Actions (@Model.PlayerLog.Count())</a></li>
            <li><a href="@Url.Action(MVC.PvP.MySkills())">Spells</a></li>
            <li><a href="@Url.Action(MVC.PvP.MyPerks())">My Effects</a></li>
            <li><a href="@Url.Action(MVC.PvP.LookAtPlayer(Model.You.Id))">Look at Yourself</a></li>
            <li><a href="@Url.Action(MVC.Settings.PlayerStats(Model.You.MembershipId))">My Statistics</a></li>
        </ul>
    </li>
    <li><a href="@Url.Action(MVC.PvP.MyFriends())">Friends</a></li>
    <li><a href="@Url.Action(MVC.Chat.Index("global"))" target="_blank">Chat</a></li>
    <li><a href="@Url.Action(MVC.Covenant.MyCovenant())">Covenant</a></li>

    <li class="dropdown">
        <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Contribute <span class="caret"></span></a>
        <ul class="dropdown-menu">
            <li><a href="@Url.Action(MVC.Contribution.Contribute(-1))">Submit Spell/Form/Item/Pet</a></li>
            <li><a href="@Url.Action(MVC.Contribution.ContributeEffect(-1))">Submit Blessing/Curse</a></li>
            @if (User.IsInRole(PvPStatics.Permissions_QuestWriter))
            {
                <li><a href="@Url.Action(MVC.QuestWriter.Index())">QuestWriter</a></li>
            }
        </ul>
    </li>

    @{
        if (User.IsInRole(PvPStatics.Permissions_Admin) || User.IsInRole(PvPStatics.Permissions_Moderator))
        {
            <li class="dropdown">
                <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Staff <span class="caret"></span></a>
                <ul class="dropdown-menu">
                    @if (User.IsInRole(PvPStatics.Permissions_Admin))
                    {
                        <li><a href="@Url.Action(MVC.PvPAdmin.Index())">Admin</a></li>
                    }
                    @if (User.IsInRole(PvPStatics.Permissions_Moderator))
                    {
                        <li><a href="@Url.Action(MVC.Moderator.Index())">Moderator</a></li>
                    }
                </ul>
            </li>
        }
    }

    @{
        if (Model.NewMessageCount > 0)
        {
            <li><a href="@Url.Action(MVC.Messages.Index())" class="glyphicon glyphicon-envelope inboxNew">(@Model.NewMessageCount)</a></li>
        }
        else
        {
            <li><a href="@Url.Action(MVC.Messages.Index())" class="glyphicon glyphicon-envelope">(0)</a></li>
        }
    }

    <li class="dropdown">
        <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false"><span class="glyphicon glyphicon-wrench"></span><span class="caret"></span></a>
        <ul class="dropdown-menu">
            <li><a href="@Url.Action(MVC.Settings.Settings())">Settings</a></li>
            <li><a href="@Url.Action(MVC.Settings.MyBlacklistEntries())">My blacklist entries</a></li>
            <li><a href="@Url.Action(MVC.Settings.SetBio())">Update bio</a></li>
            <li><a href="@Url.Action(MVC.PvP.ReserveName())">Reserve this name</a></li>
        </ul>
    </li>

    <li><a href="@Url.Action(MVC.PvP.Restart())">Start again as someone else</a></li>
}

@Html.Partial(MVC.PvP.Views.partial.RoundStatus, Model.World)

<div class="specialBox specialBox2">
    <span class="turnNumber">Turn #<b>@ViewBag.WorldTurnNumber/@PvPStatics.RoundDuration</b></span>
    <span id="liveConnectionNotice" class="noticeOff" title="If this icon is green, you are connected to the server and will receive live notifications when attacked or messaged."><span class="glyphicon glyphicon-ok-circle"> </span></span>
    Transformania Time has <b>@Model.WorldStats.TotalPlayers</b> players, <b>@Model.WorldStats.CurrentOnlinePlayers</b> of which are currently online.
</div>

<ul id="notificationBox" style="display:none;">
    @{
        foreach (var log in Model.PlayerLogImportant)
        {
            <li class="frontPageNotification">
                @Html.Raw(log.Message) <span class="timeago">@HtmlHelpers.DatetimeToTimeago(log.Timestamp)</span>
            </li>
        }
    }
</ul>

<p id="dismissNotficationBox" style="display:none;"><a href="javascript:void(0)" onclick="document.getElementById('notificationBox').style.height = '0px'">[ -- ]</a> <a href="javascript:void(0)" onclick="document.getElementById('notificationBox').style.height = '100px'">[ - ]</a> @Ajax.ActionLink("Dismiss Notifications", MVC.PvP.DismissNotifications_Ajax(), new AjaxOptions { HttpMethod = "GET", OnSuccess = "dismissNotificationsSuccess", OnFailure = "dismissNotificationsFail" }, null) <a href="javascript:void(0)" onclick="document.getElementById('notificationBox').style.height = '250px'">[ + ]</a> <a href="javascript:void(0)" onclick="document.getElementById('notificationBox').style.height = '500px'">[ ++ ]</a></p>

<div class="containerInner">
    <div class="row">
        <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
            <div class="petItemPortrait img-responsive" style="background-image: url(../Images/PvP/animalPortraits/@ViewBag.AnimalImgUrl);">
                @HtmlHelpers.PrintOwnerSubPortrait(Model.OwnedBy)
            </div>
        </div>
        <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6 text-justify">
            <p>
                Your name is <b>@Model.You.GetFullName()</b>, or at least it used to be.

                @{
                    if (!Model.IsPermanent)
                    {
                        <span>Should you struggle and regain a human form you will find yourself at level <b>@Model.You.Level</b> with @Model.You.XP experience points toward the next. But for now you are a level @Model.YouItem.Level <b>@Model.Form.FriendlyName</b>.</span>
                    }
                    else
                    {
                        <span>You have lost any last hope of restoring yourself to human and are now wholly dedicated to serving your master or mistress as their pet as a level <b>@Model.YouItem.Level @Model.Form.FriendlyName</b>.</span>

                        if (Model.YouItem.SoulboundToPlayer != null)
                        {
                            @Html.Partial(MVC.PvP.Views.partial.SoulboundTo, Model.YouItem)
                        }
                    }
                }

            </p>
            <br>

            @{
                if (Model.RenderCaptcha)
                {
                    @Html.Partial(MVC.PvP.Views.partial.captchaForm)
                }
            }

            <p>@Model.Form.Description</p>
            <br>
            @{
                if (Model.YouItem.Owner == null)
                {
                    <span>You are feral and can move freely about the world until a new master tames you.</span>
                }
                else
                {
                    <p>You have been tamed by <a href="@Url.Action(MVC.PvP.LookAtPlayer(Model.OwnedBy.Player.Id))">@Model.OwnedBy.Player.GetFullName()</a> and will follow your master wherever they go.</p>

                    if (Model.OwnedBy.Player.BotId == AIStatics.ActivePlayerBotId)
                    {
                        <p>
                            <a href="@Url.Action(MVC.Messages.Write(Model.OwnedBy.Player.Id, -1))" class="inanimateAction">Communicate with @Model.OwnedBy.Player.GetFullName()</a>
                        </p>
                    }

                    if (!Model.YouItem.ItemSource.CurseTFFormdbName.IsNullOrEmpty())
                    {
                        <p>
                            <a href="@Url.Action(MVC.PvP.CurseTransformOwner())" class="inanimateAction">Attempt to transform your owner!</a>
                        </p>
                    }

                    <p>
                        <a href="@Url.Action(MVC.PvP.EscapeFromOwner())" class="inanimateAction">Attempt to slip free from your owner</a>
                    </p>
                }

                if (!Model.IsPermanent)
                {
                    <p class="center-block">
                        <span class="place">Chance to return human: @Model.StruggleChance %.</span>
                        <a href="@Url.Action(MVC.PvP.FightTheTransformation())" class="check inanimateAction">Fight your transformation and attempt to return to an animate form!</a>
                    </p>
                }
            }
        </div>
    </div>
    <br>
    <div class="row">
        <div class="col-md-4" style="text-align: center;">@Html.Partial(MVC.PvP.Views.partial.movementTable, new TT.Domain.ViewModels.MovementModel(Model.Location, Model.OwnedBy == null))</div>
        <div class="col-md-8 covenDescription">
            <span class="place">@Model.Location.Name [@Model.Location.X,@Model.Location.Y] <br> </span>

            @Model.Location.GetDescription()
        </div>
    </div>
</div>

@*all players who are online*@

<div class="onlinePlayersWrapperBG">
    <div class="row boxContainer">
        @*all players who are online*@
        @{
            foreach (var p in Model.PlayersHere.Where(p => !PlayerProcedures.PlayerIsOffline(p.Player)).OrderByDescending(p => p.Player.Level))
            {

                <div class="col-md-2 col-sm-4 col-xs-12 charaBox">
                    <div class="charaBoxInner">
                        <div>
                            <p>
                                @Html.Partial(MVC.PvP.Views.Player_Partial, p)
                                <button type="button" class="attackLink" data-toggle="modal" data-target="#petInteractModal" playernum="@p.Player.Id">Interact</button>
                            </p>
                        </div>
                    </div>
                </div>
            }

        }
    </div>
</div>

@{if (ViewBag.ShowOffline == null || !ViewBag.ShowOffline)
    {
        <div id="offlinePlayersButton"><a href="@Url.Action(MVC.PvP.ShowOffline())">Show offline players here (@Model.PlayersHere.Count(p => PlayerProcedures.PlayerIsOffline(p.Player)))</a></div>
    }
}

@{if (ViewBag.ShowOffline != null && ViewBag.ShowOffline)
    {
        <div class="offlinePlayersWrapperBG">
            <div class="row boxContainer">

                @{
                    foreach (var p in Model.PlayersHere.Where(p => TT.Domain.Procedures.PlayerProcedures.PlayerIsOffline(p.Player)).OrderByDescending(p => p.Player.Level))
                    {
                        <div class="col-md-2 col-sm-4 col-xs-12 charaBox">
                            <div class="charaBoxInner">
                                <div>
                                    <p>
                                        @Html.Partial(MVC.PvP.Views.Player_Partial, p)
                                        <button type="button" class="attackLink" data-toggle="modal" data-target="#petInteractModal" playernum="@p.Player.Id">Interact</button>
                                    </p>
                                </div>
                            </div>
                        </div>
                    }
                }

            </div>
        </div>
    }
}

@*all players who are offline*@
<div style="clear:both;"></div>

@Html.Partial(MVC.PvP.Views.partial.partial_recentActivity, Model.LocationLog)

<!-- Modal -->
<div class="modal fade" id="petInteractModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title text-center" id="myModalLabel">Pet Actions</h4>
            </div>
            <div class="modal-body">
                <a href="@Url.Action(MVC.PvP.AnimalAction("lick", 0))" class="btn petActionLink">Lick (+WP)</a>
                <a href="@Url.Action(MVC.PvP.AnimalAction("nuzzle", 0))" class="btn petActionLink">Nuzzle (+MP)</a>
                <hr>
                <a href="@Url.Action(MVC.PvP.AnimalAction("headbutt", 0))" class="btn petActionLink">Headbutt (-WP)</a>
                <a href="@Url.Action(MVC.PvP.AnimalAction("snarl", 0))" class="btn petActionLink">Snarl (-MP)</a>
            </div>
        </div>
    </div>
</div>

<script>

    var attacksMade = @Model.You.TimesAttackingThisUpdate;
    var turnNo = @ViewBag.WorldTurnNumber;
    var togglestate = 0;
    var blinkEnabled = 0;

    var secondsToUpdate = @ViewBag.SecondsUntilUpdate;
    var donatorTier = @Model.You.DonatorLevel;
    var playUpdateSound = false;
    var playAttackSound = false;
    var playMessageSound = false;
    var notificationsEnabled = false;

    $(document).ready(function () {

        $("#offlinePlayersWrapper").hide();

        // show offline player section when player clicks on the proper div
        $("#offlinePlayersButton").click(function () {
            $("#offlinePlayersButton").hide();
            $("#offlinePlayersWrapper").show();
        });

        $("#timerBox").click(function () {
            alert("The last update was  @HtmlHelpers.DatetimeToTimeago_WithSeconds(Model.LastUpdateTimestamp) (based on when this page was loaded.)  Turns last " + @TurnTimesStatics.GetTurnLengthInSeconds() + " seconds.");
        });

        $(".check").each(function() {
            if (attacksMade>=1) {
                $( this ).attr("href", "#");
                $( this ).addClass("disabled");
            }
        });

    });

    function pingDone(data) {
        if (data > turnNo) {
            turnNo = data;
            blinkEnabled = 1;
        }
    }

    function fail() {
        // alert("fail");
    }

    $(".attackLink").click(function() {

        var id = $(this).attr("playernum");


        $(".modal-body a").each(function(){
            var href = $(this).attr('href');
            href = href.replace(/(targetId=)[0-9]*/i,"targetId=" + id);
            $(this).attr('href',href);
        });

    });

</script>
