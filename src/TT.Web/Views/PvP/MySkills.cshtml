@model IEnumerable<TT.Domain.ViewModels.MySkillsViewModel>
@using TT.Domain.ViewModels
@using TT.Web.CustomHtmlHelpers


<nav class="navbar navbar-default outsideContainer navbarTT2">
    <div class="container-fluid">
        <!-- Brand and toggle get grouped for better mobile display -->
        <div class="navbar-header">
            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-2">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
        </div>

        <!-- Collect the nav links, forms, and other content for toggling -->
        <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-2">
            <ul class="nav navbar-nav" style="width:100%;">
                <li>@Html.ActionLink("Back to game", "Play", "PvP")</li>
                <li>@Html.ActionLink("Archive All My Spells", "ArchiveAllMySpells", "Settings", new { archive = true }, null)</li>
                <li>@Html.ActionLink("Restore All My Spells", "ArchiveAllMySpells", "Settings", new { archive = false }, null)</li>
                <li><a href="#" style="color: white !important; cursor: default">Known Spells (@Model.Where(c => c.Skill_Name != TT.Domain.Statics.PvPStatics.Dungeon_VanquishSpell && (c.Skill_MobilityType == "full" || c.Skill_MobilityType == "inanimate" || c.Skill_MobilityType == "animal" || c.Skill_MobilityType == "mindcontrol")).Count() / @ViewBag.TotalLearnableSkills)</a></li>
            </ul>
        </div><!-- /.navbar-collapse -->
    </div><!-- /.container-fluid -->
</nav>

<div class="containerInner">
    <div id="resultPrompt"></div>
    <table>
        <tr style="font-weight: bold;">
            <td>Spell Name</td>
            <td>Form Name</td>
            <td>Description</td>
            <td>MP</td>
            <td>WP</td>
            <td>TFE</td>
            <td>Archive</td>
        </tr>
        @{
            string chargeVisible = "none";
            string timeVisible = "none";


            foreach (MySkillsViewModel skill in Model.OrderBy(s => s.Skill_FriendlyName))
            {
                if (skill.Skill_Charge != -1.0M)
                {
                    chargeVisible = "block";
                }

                if (skill.Skill_Duration != -1.0M)
                {
                    timeVisible = "block";
                }

                <tr>
                    <td class="skillname">
                        @skill.Skill_FriendlyName

                        @{
                            if (skill.Skill_MobilityType != null && skill.Skill_MobilityType == "inanimate")
                            {
                                <span class="mobilityClass">(inanimate)</span>
                            }
                            else if (skill.Skill_MobilityType != null && skill.Skill_MobilityType == "animal")
                            {
                                <span class="mobilityClass">(animal/familiar)</span>
                            }
                            else if (skill.Skill_MobilityType != null && skill.Skill_MobilityType == "curse")
                            {
                                <span class="mobilityClass">(temporary curse)</span>
                            }
                            else if (skill.Skill_MobilityType != null && skill.Skill_MobilityType == "mindcontrol")
                            {
                                <span class="mobilityClass">(temporary mind control)</span>
                            }
                            if (skill.Skill_IsArchived == true)
                            {
                                <b id="@skill.Skill_Id">(ARCHIVED)</b>
                            }
                            else
                            {
                                <b id="@skill.Skill_Id"></b>
                            }
                        }

                    </td>

                    <td class="formname">@skill.Form_FriendlyName</td>

                    <td class="description">@skill.Skill_Description</td>
                    <td class="manacost" style="width:50px;">@skill.Skill_ManaCost</td>

                    @{
                        if (@skill.Skill_HealthDamageAmount > 0)
                        {
                            <td class="damage" style="width:50px;">@skill.Skill_HealthDamageAmount</td>
                        }
                        if (@skill.Skill_TFPointsAmount > 0)
                        {
                            <td class="tfpoints" style="width:50px;">@skill.Skill_TFPointsAmount</td>
                        }
                    }







                    <td class="charges" style="display:  @chargeVisible">Casts remaining:  @skill.Skill_Charge</td>
                    <td class="time" style="display:  @timeVisible">Time remaining:  @skill.Skill_Duration</td>

                    @{
                        if (@skill.Skill_GivesEffect != null)
                        {
                            <td class="effect"><b>Gives the @CharactersHere.GetEffectFriendlyName(skill.Skill_GivesEffect) effect</b></td>
                        }
                    }

                    @*@Html.ActionLink("Toggle Archive", "ArchiveSpell", "Settings", new { name = @skill.dbSkill.Name }, null)*@

                    <td>@Ajax.ActionLink("[x]", "ArchiveSpell", "Settings", new { name = @skill.Skill_Name }, new AjaxOptions { UpdateTargetId = "resultPrompt", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "prompt_success", OnFailure = "prompt_failure", OnBegin = "prompt_wait" }, null)</td>

                </tr>
                        }
        }
    </table>
</div>

<style>
    .skillBox {
        border-bottom: 1px solid black;
        height: auto;
    }

    .skillname {
    }


    .manacost {
        color: blue;
    }

    .damage {
        color: red;
    }

    .tfpoints {
        color: darkgreen;
    }

    .duration {
    }

    .time {
    }

    .mobilityClass {
        color: darkblue;
        font-style: oblique;
        font-size: 14px;
    }

    .effect {
        color: darkolivegreen;
        font-weight: 900;
    }

    tr {
       border: 1px dashed rgb(161, 105, 105);
       text-align: center;
    }

    .description {
        color: purple;
        padding: 10px 5px;
        text-align:justify;
    }

</style>





 
    <script>
    function prompt_success() {
      //  alert($("#changeMessage").text());
        var changeNumber = $("#changeNumber").text();

        if ($("#changeMessage").text().indexOf("archived") > 0) {
            $("#" + changeNumber).text("(ARCHIVED)");
        } else {
            $("#" + changeNumber).text("");
        }

    }

    function prompt_wait() {
        $("#resultPrompt").text("Contacting archive...");
    }


    </script>
