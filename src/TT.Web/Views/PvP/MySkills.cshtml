@model IEnumerable<TT.Domain.ViewModels.MySkillsViewModel>
@using TT.Domain.ViewModels
@using TT.Web.CustomHtmlHelpers
@using TT.Domain.Statics


<nav class="navbar navbar-default outsideContainer navbarTT2">
    <div class="container-fluid">
        <!-- Brand and toggle get grouped for better mobile display -->
        <div class="navbar-header">
            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-2">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
        </div>

        <!-- Collect the nav links, forms, and other content for toggling -->
        <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-2">
            <ul class="nav navbar-nav" style="width:100%;">
                <li>@Html.ActionLink("Back to game", "Play", "PvP")</li>
                <li>@Html.ActionLink("Archive All My Spells", "ArchiveAllMySpells", "Settings", new { archive = true }, null)</li>
                <li>@Html.ActionLink("Restore All My Spells", "ArchiveAllMySpells", "Settings", new { archive = false }, null)</li>
                <li><a href="#" style="color: white !important; cursor: default">Known Spells (@Model.Where(c => c.Skill_Name != TT.Domain.Statics.PvPStatics.Dungeon_VanquishSpell && (c.Skill_MobilityType == PvPStatics.MobilityFull || c.Skill_MobilityType == PvPStatics.MobilityInanimate || c.Skill_MobilityType == PvPStatics.MobilityPet || c.Skill_MobilityType == PvPStatics.MobilityMindControl)).Count() / @ViewBag.TotalLearnableSkills)</a></li>
            </ul>
        </div><!-- /.navbar-collapse -->
    </div><!-- /.container-fluid -->
</nav>

<div class="containerInner">
    <div id="resultPrompt"></div>
    <table id="MySkills" class="table table-hover messageTable dt-responsive">
        <thead>
            <tr>
                <th>Spell Name</th>
                <th>Form Name</th>
                <th>Form Type</th>
                <th>Description</th>
                <th>Charges</th>
                <th>Duration (Turns)</th>
                <th>Effect</th>
                <th>Archive</th>
            </tr>
            <tr>
                <th colspan="3"><select id="filtermobility" class="form-control"><option value="">Filter...</option></select></th>
                <th colspan="5">&nbsp;</th>
            </tr>
        </thead>
        <tbody>
            @{
                foreach (MySkillsViewModel skill in Model.OrderBy(s => s.Skill_FriendlyName))
                {
                    <tr>
                        <td class="skillname">
                            @skill.Skill_FriendlyName
                            @if (skill.Skill_IsArchived)
                            {
                                <b id="@skill.Skill_Id">(ARCHIVED)</b>
                            }
                            else
                            {
                                <b id="@skill.Skill_Id"></b>
                            }
                        </td>
                        <td class="formname">@skill.Form_FriendlyName</td>
                        <td class="mobilityClass">
                            @if (skill.Skill_MobilityType != null && skill.Skill_MobilityType == PvPStatics.MobilityInanimate)
                            {
                                <text>Inanimate</text>
                            }
                            else if (skill.Skill_MobilityType != null && skill.Skill_MobilityType == PvPStatics.MobilityPet)
                            {
                                <text>Animal/Familiar</text>
                            }
                            else if (skill.Skill_MobilityType != null && skill.Skill_MobilityType == "curse")
                            {
                                <text>Temporary curse</text>
                            }
                            else if (skill.Skill_MobilityType != null && skill.Skill_MobilityType == PvPStatics.MobilityMindControl)
                            {
                                <text>Temporary mind control</text>
                            }
                            else
                            {
                                <text>Animate</text>
                            }
                        </td>
                        <td class="description">@skill.Skill_Description</td>
                        <td class="charges">
                            @if (skill.Skill_Charge != -1.0M)
                            {
                                @skill.Skill_Charge
                            }
                            else
                            {
                                <text>N/A</text>
                            }
                        </td>
                        <td class="time">
                            @if (skill.Skill_Duration != -1.0M)
                            {
                                @skill.Skill_Duration
                            }
                            else
                            {
                                <text>N/A</text>
                            }
                        </td>
                        @{
                    if (@skill.Skill_GivesEffect != null)
                    {
                        <td class="effect">@CharactersHere.GetEffectFriendlyName(skill.Skill_GivesEffect)</td>
                    }
                    else
                    {
                        <td>N/A</td>
                    }
                }
                    <td>@Ajax.ActionLink("[x]", "ArchiveSpell", "Settings", new { name = @skill.Skill_Name }, new AjaxOptions { UpdateTargetId = "resultPrompt", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "prompt_success", OnFailure = "prompt_failure", OnBegin = "prompt_wait" }, null)</td>
                </tr>
                        }
        }
        </tbody>
    </table>
</div>

<style>
    .skillBox {
        border-bottom: 1px solid black;
        height: auto;
    }

    .skillname {
    }


    .manacost {
        color: blue;
    }

    .damage {
        color: red;
    }

    .tfpoints {
        color: darkgreen;
    }

    .duration {
    }

    .time {
    }

    .mobilityClass {
        color: darkblue;
        font-style: oblique;
        font-size: 14px;
    }

    .effect {
        color: darkolivegreen;
        font-weight: 900;
    }

    tr {
       border: 1px dashed rgb(161, 105, 105);
       text-align: center;
    }

    .description {
        color: purple;
        padding: 10px 5px;
        text-align:justify;
    }

</style>





 
    <script>
    $(document).ready(function () {
        $('#MySkills').dataTable({
            "orderCellsTop": true,
            "initComplete": function () {
                this.api().column(2).every(function () {
                    var column = this;
                    $("#filtermobility").on('change', function () {
                            var val = $.fn.dataTable.util.escapeRegex(
                                $(this).val()
                            );

                            column
                                .search(val ? '^' + val + '$' : '', true, false)
                                .draw();
                        });

                    column.data().unique().sort().each(function (d, j) {
                        $("#filtermobility").append('<option value="' + d + '">' + d + '</option>')
                    });
                });
            }
        });
    });

    function prompt_success() {
      //  alert($("#changeMessage").text());
        var changeNumber = $("#changeNumber").text();

        if ($("#changeMessage").text().indexOf("archived") > 0) {
            $("#" + changeNumber).text("(ARCHIVED)");
        } else {
            $("#" + changeNumber).text("");
        }

    }

    function prompt_wait() {
        $("#resultPrompt").text("Contacting archive...");
    }


    </script>
