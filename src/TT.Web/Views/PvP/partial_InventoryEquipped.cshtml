@model IEnumerable<TT.Domain.Items.DTOs.ItemDetail>
@using TT.Domain.Statics

@{
    var items = Model.Where(i => i.IsEquipped &&
        i.ItemSource.ItemType != PvPStatics.ItemType_Consumable_Reuseable &&
        i.ItemSource.ItemType != PvPStatics.ItemType_Consumable &&
        i.ItemSource.ItemType != PvPStatics.ItemType_Pet)
        .OrderBy(i => i.ItemSource.ItemType == PvPStatics.ItemType_Hat)
        .OrderBy(i => i.ItemSource.ItemType == PvPStatics.ItemType_Shirt)
        .OrderBy(i => i.ItemSource.ItemType == PvPStatics.ItemType_Undershirt)
        .OrderBy(i => i.ItemSource.ItemType == PvPStatics.ItemType_Pants)
        .OrderBy(i => i.ItemSource.ItemType == PvPStatics.ItemType_Underpants)
        .OrderBy(i => i.ItemSource.ItemType == PvPStatics.ItemType_Shoes)
        .OrderBy(i => i.ItemSource.ItemType == PvPStatics.ItemType_Accessory).ToList();
    var consumables = Model.Where(i => i.IsEquipped &&
        (i.ItemSource.ItemType == PvPStatics.ItemType_Consumable_Reuseable || 
         i.ItemSource.ItemType == PvPStatics.ItemType_Consumable)).ToArray();
    var pets = Model.Where(i => i.IsEquipped && i.ItemSource.ItemType == PvPStatics.ItemType_Pet).ToList();

    if(pets.Count() == 0)
    {
        pets.Add(null);
    }
}

<div id="fullDetails">

</div>
    
<div class="row rowP">
    <span>
    @{
        // For formatting reasons, we need to put the first 6 items in a <span> tag
        var itemIndex = 0;
        for (; itemIndex < 6; ++itemIndex)
        {
            // Break early if we go over the item count
            if (itemIndex >= items.Count)
            {
                break;
            }
            var item = items[itemIndex];
            <div class="portrait equipmentMargin col-md-2 col-sm-4 col-xs-12 " style="background-image: url(@PortraitHelper.GetGraphicByItemType(item.ItemSource.ItemType, item.ItemSource.PortraitUrl, true)); " title="@item.ItemSource.FriendlyName--@item.ItemSource.Description">
                <span class="icon icon-level"><b>@item.Level</b></span>
                <p class="slotName">
                    Item @(itemIndex + 1)

                    @Ajax.ActionLink("[+]", MVC.Item.ShowItemDetails(item.Id), new AjaxOptions { UpdateTargetId = "fullDetails", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "detail_success", OnFailure = "detail_failure", OnBegin = "detail_wait" }, new { @class = "detailLink" })

                </p>
            </div>
        }

        // Pad out to show empty slots
        for (var emptyIndex = itemIndex; emptyIndex < 6; ++emptyIndex)
        {
            <div class="portrait equipmentMargin col-md-2 col-sm-4 col-xs-12 " style="background-image: url('https://images.transformaniatime.com/itemsportraits/none.jpg');"><p class="slotName">Item @(emptyIndex + 1)</p></div>

        }
    }
    </span>

    <div style="float: left;">
    @{

            // Print out the last two potential slots here and the empty slots here for formatting
            // We can cheat a little with indexing since the previous item loop only went to 6
            var accIndex = 6;
            for (; accIndex < items.Count; accIndex++)
            {
            var item = items[accIndex];
            <div class="portrait equipmentMargin col-md-2 col-sm-4 col-xs-12 " style="background-image: url(@PortraitHelper.GetGraphicByItemType(item.ItemSource.ItemType, item.ItemSource.PortraitUrl, true)); " title="@item.ItemSource.FriendlyName--@item.ItemSource.Description">
                <span class="icon icon-level"><b>@item.Level</b></span>
                <p class="slotName">
                    Item @(accIndex + 1)

                    @Ajax.ActionLink("[+]", MVC.Item.ShowItemDetails(item.Id), new AjaxOptions { UpdateTargetId = "fullDetails", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "detail_success", OnFailure = "detail_failure", OnBegin = "detail_wait" }, new { @class = "detailLink" })

                </p>
            </div>
        }

        // Pad out to show empty slots
        for (var index = accIndex; index < 8; ++index)
        {
            <div class="portrait equipmentMargin col-md-2 col-sm-4 col-xs-12 " style="background-image: url('https://images.transformaniatime.com/itemsportraits/none.jpg');"><p class="slotName">Item @(index + 1)</p></div>
        }
    }
    </div>
    <div style="float: left;">
    @{
        foreach(var pet in pets)
        {
            if (pet != null)
            {
                <div class="portrait equipmentMargin col-md-2 col-sm-4 col-xs-12 " style="background-image: url(@PortraitHelper.GetGraphicByItemType(pet.ItemSource.ItemType, pet.ItemSource.PortraitUrl, true)); " title="@pet.ItemSource.FriendlyName--@pet.ItemSource.Description">
                    <span class="icon icon-level"><b>@pet.Level</b></span>
                    <p class="slotName">
                        Pet

                        @Ajax.ActionLink("[+]", MVC.Item.ShowItemDetails(pet.Id), new AjaxOptions { UpdateTargetId = "fullDetails", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "detail_success", OnFailure = "detail_failure", OnBegin = "detail_wait" }, new { @class = "detailLink" })

                    </p>
                </div>
            }
            else
            {
                <div class="portrait equipmentMargin col-md-2 col-sm-4 col-xs-12 " style="background-image: url('https://images.transformaniatime.com/itemsportraits/none.jpg');"><p class="slotName">Pet</p></div>
            }
        }
    }
    </div>
    <div style="float: left;">
    @{
        for (var index = 0; index < consumables.Count(); ++index)
        {
            var consumable = consumables[index];
            <div class="portrait equipmentMargin col-md-2 col-sm-4 col-xs-12 " style="background-image: url(@PortraitHelper.GetGraphicByItemType(consumable.ItemSource.ItemType, consumable.ItemSource.PortraitUrl, true)); " title="@consumable.ItemSource.FriendlyName--@consumable.ItemSource.Description">
                <span class="icon icon-level"><b>@consumable.Level</b></span>
                <p class="slotName slotConsumable">
                    Cons @(index + 1)

                    @Ajax.ActionLink("[+]", MVC.Item.ShowItemDetails(consumable.Id), new AjaxOptions { UpdateTargetId = "fullDetails", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "detail_success", OnFailure = "detail_failure", OnBegin = "detail_wait" }, new { @class = "detailLink" })

                </p>
            </div>
        }

        // Pad out to show empty slots
        for(var index = consumables.Count(); index < 3; ++index)
        {
            <div class="portrait equipmentMargin col-md-2 col-sm-4 col-xs-12 " style="background-image: url('https://images.transformaniatime.com/itemsportraits/none.jpg');"><p class="slotName slotConsumable">Cons @(index + 1)</p></div>
        }
    }
    </div>
</div>
<style>
    .slotName{
        position: absolute;
        text-align: center;
        top: 0px;
        width: 70px;
        background: white;
    }

    .slotUnderpants {
    font-size: 10px;
    padding-top: 2px;
    padding-bottom: 2px;
    }
    .slotConsumable {
    font-size: 10px;
    padding-top: 2px;
    padding-bottom: 2px;
    }

    .equipmentMargin{
        margin-right: 10px;
        margin-bottom: 10px;
    }

    .rowP{
        padding: 20px;
    }

</style>