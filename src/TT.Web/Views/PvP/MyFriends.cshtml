@model TT.Domain.ViewModels.FriendPageViewModel
@using TT.Web.CustomHtmlHelpers
@using TT.Domain.Procedures
@using TT.Domain.Statics

<nav class="navbar navbar-default outsideContainer navbarTT2">
    <div class="container-fluid">
        <!-- Brand and toggle get grouped for better mobile display -->
        <div class="navbar-header">
            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-2">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
        </div>

        <!-- Collect the nav links, forms, and other content for toggling -->
        <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-2">
            <ul class="nav navbar-nav" style="width:100%;">
                <li>@Html.ActionLink("Back to game", "Play", "PvP")</li>
                <li>@Html.ActionLink("Search for player by name", "PlayerLookup", "PvP")</li>
            </ul>
        </div><!-- /.navbar-collapse -->
    </div><!-- /.container-fluid -->
</nav>

<div>
    <p class="infoMessage result">@Html.Raw(ViewBag.Result)</p>
    <p class="infoMessage error">@ViewBag.ErrorMessage</p>
    <p class="infoMessage suberror">@ViewBag.SubErrorMessage</p>
</div>


@{
    if (Model.ConfirmedFriends.Any(m => m.dbPlayer != null))
    {
        <div class="specialBox specialHeader">
            <b>Active Friends (@Model.ConfirmedFriends.Count(m => m.dbPlayer != null))</b>
        </div>

        <div class="containerInner">
            <table id="MyFriends" class="table table-hover dt-responsive messageTable" data-paging="false" data-info="false">
                <thead>
                    <tr>
                        <th style="width: 55%;">Name</th>
                        <th style="width: 20%;">Last Activity</th>
                        <th style="width: 15%;" data-orderable="false">Delete</th>
                        <th style="width: 10%;">Nickname</th>
                    </tr>
                </thead>
                <tbody>

                    @{
        foreach (TT.Domain.ViewModels.FriendPlayerViewModel fp in Model.ConfirmedFriends.Where(m => m.dbPlayer != null))
        {
            <tr>

                @{
            if (fp.dbPlayer.Mobility == PvPStatics.MobilityFull)
            {
                <td>
                    @Html.ActionLink(fp.dbPlayer.GetFullName(), "LookAtPlayer", "PvP", new { id = fp.dbPlayer.Id }, null)
                </td>
            }
            else if (fp.dbPlayer.Mobility == PvPStatics.MobilityInanimate)
            {
                <td>
                    @Html.ActionLink(fp.dbPlayer.GetFullName() + " (inanimate)", "LookAtPlayer", "PvP", new { id = fp.dbPlayer.Id }, null)
                </td>
            }

            else if (fp.dbPlayer.Mobility == PvPStatics.MobilityPet)
            {
                <td>
                    @Html.ActionLink(fp.dbPlayer.GetFullName() + " (animal)", "LookAtPlayer", "PvP", new { id = fp.dbPlayer.Id }, null)
                </td>
            }
            <td class="timeago" style="line-height: 17px;">@fp.dbPlayer.OnlineActivityTimestamp.ToString("u")</td>
                    <td>
                        @Html.ActionLink("Defriend", "RespondToFriendRequest", "PvP", new { id = fp.dbFriend.Id, response = "defriend" }, null)
                    </td>

                    <td>

                        
            @if (fp.dbPlayer.MembershipId != fp.dbFriend.OwnerMembershipId)
            {
                @Html.ActionLink(fp.dbFriend.OwnerNicknameForFriend, "SetFriendNickname", "Settings", new { id = fp.friendId }, null)
            }
            else
            {
                @Html.ActionLink(fp.dbFriend.FriendNicknameForOwner, "SetFriendNickname", "Settings", new { id = fp.friendId }, null)
            }
                       


                    </td>

                }

            </tr>
        }

                    }
                </tbody>
            </table>

        </div>
    }
    else
    {
        <div class="containerInner">
            <p class="center-block">You don't have any friends yet this round! Maybe it's time to make some new allies?</p>
        </div>
    }
}




@{
    if (Model.RequestsForMe.Any(m => m.dbPlayer != null))
    {

        <div class="specialBox specialHeader topBorder">
            <b>Requests sent to You (@Model.RequestsForMe.Count(m => m.dbPlayer != null))</b>
        </div>



        <div class="containerInner">
            <table class="table table-hover messageTable">

                <thead>
                    <tr>
                        <th>Name</th>
                        <th></th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>

                    @foreach (TT.Domain.ViewModels.FriendPlayerViewModel fp2 in Model.RequestsForMe.Where(m => m.dbPlayer != null))
                    {
                        <tr>
                            <td>@Html.ActionLink(fp2.dbPlayer.GetFullName() + "  (#" + fp2.dbPlayer.MembershipId + ")", "LookAtPlayer", "PvP", new { id = fp2.dbPlayer.Id }, null)</td>
                            <td>@Html.ActionLink("Accept", "RespondToFriendRequest", "PvP", new { id = fp2.dbFriend.Id, response = "accept" }, null)</td>
                            <td>@Html.ActionLink("Deny", "RespondToFriendRequest", "PvP", new { id = fp2.dbFriend.Id, response = "deny" }, null)</td>
                        </tr>
                    }
                </tbody>

            </table>
        </div>


    }
    else
    {
        <div class="containerInner" style="padding-top:0px !important;">
            <p class="center-block">You don't have any unaccepted requests sent to you.</p>
        </div>
    }
}


@{
    if (Model.MyOutgoingRequests.Any(m => m.dbPlayer != null))
    {
        <div class="specialBox specialHeader topBorder">
            <b>Requests you've sent (@Model.MyOutgoingRequests.Count())</b>
        </div>

        <div class="containerInner">
            <table class="table table-hover messageTable">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>

                    @foreach (TT.Domain.ViewModels.FriendPlayerViewModel fp3 in Model.MyOutgoingRequests.Where(m => m.dbPlayer != null))
                    {
                        <tr>
                            <td>
                                @Html.ActionLink(fp3.dbPlayer.GetFullName() + "", "LookAtPlayer", "PvP", new { id = fp3.dbPlayer.Id }, null)
                            </td>
                            <td>
                                @Html.ActionLink("Cancel", "RespondToFriendRequest", "PvP", new { id = fp3.dbFriend.Id, response = "cancel" }, null)
                            </td>

                        </tr>
                    }




                </tbody>
            </table>
        </div>

    }
    else
    {
        <div class="containerInner" style="padding-top:0px !important;">
            <p class="center-block">You don't have any unaccepted friend requests that you have sent out.</p>
        </div>
    }
}

<div class="containerInner" style="padding-top:0px !important;">
    <p class="center-block">You may have more friends who have not yet made a character this round.  They will appear on this page when they have.</p>
</div>


<style>
    h1 {
        text-align: center;
    }

    .friendListing {
        width: 100%;
        border: 1px solid lightgray;
        position: relative;
        float: left;
        margin-top: 5px;
        padding: 0;
    }

    .friendonline {
        color: green;
    }

    .friendoffline {
        color: red;
    }

    .divblock {
        position: relative;
        float: left;
        width: 100%;
    }
</style>

<script>
    $(document).ready(function () {
        $('#MyFriends').dataTable({
            "columnDefs": [{
                "targets": 1,
                "render": function (data, type, full, meta) {
                    if (type == "display") return moment(data).fromNow();
                    return data;
                }
            }]
        });
    });
</script>
