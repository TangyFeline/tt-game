@model TT.Domain.ViewModels.InanimatePlayPageViewModel
@using TT.Domain.Procedures
@using TT.Web.CustomHtmlHelpers
@using TT.Domain.Statics

<script src="~/Scripts/jquery-ui-1.10.4.js"></script>

<script src="~/Scripts/jquery.signalR-2.0.3.min.js"></script>
<script src="~/signalr/hubs"></script>
<script src="~/Scripts/notices.js"></script>

@{
    if (@ViewBag.WorldTurnNumber >= @PvPStatics.RoundDuration)
    {
        <div class="inbetweenRoundNotice">The round has ended.  Check back soon to start again on a fresh round.</div>
    }
}

@section menu
{
    <li>
        <span id="timerBox" class="glyphicon glyphicon-time" aria-hidden="true" title="Click to see how long ago the last update ran."></span>
        <span id="turn_countdown">-:--</span>
    </li>
    <li><a href="@Url.Action(MVC.PvP.ViewLog())">Last Actions</a></li>
    <li><a href="@Url.Action(MVC.PvP.MyFriends())">Friends</a></li>
    <li><a href="@Url.Action(MVC.Chat.Index("global"))" target="_blank">Chat</a></li>
    <li><a href="@Url.Action(MVC.Covenant.MyCovenant())">Covenant</a></li>
    <li class="dropdown">
        <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false"><span class="glyphicon glyphicon-wrench"></span><span class="caret"></span></a>
        <ul class="dropdown-menu">
            <li><a href="@Url.Action(MVC.Settings.Settings())">Settings</a></li>
            <li><a href="@Url.Action(MVC.Settings.MyBlacklistEntries())">My blacklist entries</a></li>
            <li><a href="@Url.Action(MVC.Settings.SetBio())">Update bio</a></li>
            <li><a href="@Url.Action(MVC.PvP.ReserveName())">Reserve this name</a></li>
        </ul>
    </li>
    @{
        if (Model.NewMessageCount > 0)
        {
            <li><a href="@Url.Action(MVC.Messages.Index())" class="glyphicon glyphicon-envelope inboxNew">(@Model.NewMessageCount)</a></li>
        }
        else
        {
            <li><a href="@Url.Action(MVC.Messages.Index())" class="glyphicon glyphicon-envelope">(0)</a></li>
        }
    }
    <li class="dropdown">
        <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Contribute <span class="caret"></span></a>
        <ul class="dropdown-menu">
            <li><a href="@Url.Action(MVC.Contribution.Contribute(-1))">Submit Spell/Form/Item/Pet</a></li>
            <li><a href="@Url.Action(MVC.Contribution.ContributeEffect(-1))">Submit Blessing/Curse</a></li>
            @if (User.IsInRole(PvPStatics.Permissions_QuestWriter))
            {
                <li><a href="@Url.Action(MVC.QuestWriter.Index())">QuestWriter</a></li>
            }
        </ul>
    </li>
    <li><a href="@Url.Action(MVC.PvP.Restart())">Start again as someone else</a></li>
    @{
        if (User.IsInRole(PvPStatics.Permissions_Admin) || User.IsInRole(PvPStatics.Permissions_Moderator))
        {
            <li class="dropdown">
                <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Staff <span class="caret"></span></a>
                <ul class="dropdown-menu">
                    @if (User.IsInRole(PvPStatics.Permissions_Admin))
                    {
                        <li><a href="@Url.Action(MVC.PvPAdmin.Index())">Admin</a></li>
                    }
                    @if (User.IsInRole(PvPStatics.Permissions_Moderator))
                    {
                        <li><a href="@Url.Action(MVC.Moderator.Index())">Moderator</a></li>
                    }
                </ul>
            </li>
        }
    }
}

@Html.Partial(MVC.PvP.Views.partial.RoundStatus, Model.World)

<div class="specialBox specialBox2">
    <span class="turnNumber">Turn #<b>@ViewBag.WorldTurnNumber/@PvPStatics.RoundDuration</b></span><span id="liveConnectionNotice" class="noticeOff" title="If this icon is green, you are connected to the server and will receive live notifications when attacked or messaged."><span class="glyphicon glyphicon-ok-circle"> </span></span>
    Transformania Time has <b>@Model.WorldStats.TotalPlayers</b> players, <b>@Model.WorldStats.CurrentOnlinePlayers</b> of which are currently online.
</div>

<ul id="notificationBox" style="display:none;">
    @{
        foreach (TT.Domain.Models.PlayerLog log in Model.PlayerLogImportant)
        {
            <li class="frontPageNotification">
                @Html.Raw(log.Message) <span class="timeago">@CharactersHere.DatetimeToTimeago(log.Timestamp)</span>
            </li>
        }
    }
</ul>

<p id="dismissNotficationBox" style="display:none;"><a href="javascript:void(0)" onclick="document.getElementById('notificationBox').style.height = '0px'">[ -- ]</a> <a href="javascript:void(0)" onclick="document.getElementById('notificationBox').style.height = '100px'">[ - ]</a> @Ajax.ActionLink("Dismiss Notifications", MVC.PvP.DismissNotifications_Ajax(), new AjaxOptions { HttpMethod = "GET", OnSuccess = "dismissNotificationsSuccess", OnFailure = "dismissNotificationsFail" }, null) <a href="javascript:void(0)" onclick="document.getElementById('notificationBox').style.height = '250px'">[ + ]</a> <a href="javascript:void(0)" onclick="document.getElementById('notificationBox').style.height = '500px'">[ ++ ]</a></p>


<div class="containerInner">
    <div class="row">
        <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
            <div class="petItemPortrait img-responsive" style="background-image: url(../Images/PvP/itemsPortraits/@Model.Item.ItemSource.PortraitUrl);">
                @CharactersHere.PrintOwnerSubPortrait(Model.WornBy)
                @CharactersHere.PrintItemTypeIcon(Model.Item.ItemSource)
            </div>
        </div>
        <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6 text-justify">
            <p>Your name is <b>@Model.Player.GetFullName()</b>, or at least it used to be. Should you regain a human form you will find yourself at level <b>@Model.Player.Level</b> with @Model.Player.XP experience points toward the next. But now it's time to embrace your new existence as a <b>@Model.Form.FriendlyName</b>.
            </p>

            @{
                if (Model.RenderCaptcha)
                {
                    @Html.Partial(MVC.PvP.Views.partial.captchaForm)
                }
            }

            <p>@Model.Form.Description</p>
            @{
                if (Model.Item.Owner == null)
                {
                    <p>You are currently resting on the ground at <b>@Model.AtLocation.</b>  Maybe someone will come by soon and pick you up--since you're stuck this way, you might as well be appreciated...</p>
                }
                else if (Model.WornBy != null)
                {
                    <p>You are currently being worn by <b><a href="@Url.Action(MVC.PvP.LookAtPlayer(Model.WornBy.Player.Id))">@Model.WornBy.Player.GetFullName()</a></b>, a @Model.WornBy.Player.Gender @Model.WornBy.Form.FriendlyName.  You hope they will take good care of you, or should they too find themselves as an object, whoever picks you up next.</p>

                    <p>
                        <a href="@Url.Action(MVC.Messages.Write(Model.WornBy.Player.Id, -1))" class="inanimateAction">Telepathically communicate with @Model.WornBy.Player.GetFullName()</a>
                    </p>

                    <p>
                        Although inanimate, you can still move just the tiniest bit.  You can still...
                        <ul class="inanimateActionList">
                            <li>
                                <a href="@Url.Action(MVC.PvP.InanimateAction("rub"))" class="check inanimateAction">Affectionately rub against your owner</a>
                            </li>
                            <li>
                                <a href="@Url.Action(MVC.PvP.InanimateAction("pinch"))" class="check inanimateAction">Peskily pinch your owner</a>
                            </li>
                            <li>
                                <a href="@Url.Action(MVC.PvP.InanimateAction("soothe"))" class="check inanimateAction">Kindly soothe your owner</a>
                            </li>
                            <li>
                                <a href="@Url.Action(MVC.PvP.InanimateAction("zap"))" class="check inanimateAction">Agitatedly zap your owner</a>
                            </li>
                            

    @{
                    if (!Model.Item.ItemSource.CurseTFFormdbName.IsNullOrEmpty())
                    {
                        <li>
                            <a href="@Url.Action(MVC.PvP.CurseTransformOwner())" class="check inanimateAction">Attempt to transform your owner!</a>
                        </li>
                    }
   
                            
                            
                            
                    if (Model.WornBy != null)
                    {
                        <li><a href="@Url.Action(MVC.PvP.EscapeFromOwner())" class="inanimateAction">Attempt to slip free from your owner</a></li>
                    }

                }
                        </ul>
                    </p>

                }
            }

            @{
                if (!Model.IsPermanent)
                {
                    <p class="center-block">
                        <span class="place">Chance to return human: @Model.StruggleChance %.</span>
                        <a href="@Url.Action(MVC.PvP.FightTheTransformation())" class="check inanimateAction">Fight your transformation and attempt to return to an animate form!</a>
                    </p>
                }
            }
        </div>
    </div>
</div>

<div class="onlinePlayersWrapperBG" style="clear:both; border-bottom:4px solid #A16969;">
    <div class="row boxContainer">
        @{
            foreach (TT.Domain.ViewModels.PlayerFormViewModel p in Model.PlayersHere.Where(p => !TT.Domain.Procedures.PlayerProcedures.PlayerIsOffline(p.Player)))
    {
        <div class="col-md-2 col-sm-4 col-xs-12 charaBox">
            <div class="charaBoxInner">
                <div>
                    <p>

                        @Html.Partial(MVC.PvP.Views.Player_Partial, p)

                    </p>
                </div>
            </div>
        </div>
    }
}
    </div>
</div>

@{if (ViewBag.ShowOffline == null || !ViewBag.ShowOffline)
{
    <div id="offlinePlayersButton"><a href="@Url.Action(MVC.PvP.ShowOffline())">Show offline players here (@Model.PlayersHere.Count(p => PlayerProcedures.PlayerIsOffline(p.Player)))</a></div>
}
}

@{if (ViewBag.ShowOffline != null && ViewBag.ShowOffline)
{
    <div class="offlinePlayersWrapperBG">
        <div class="row boxContainer">

            @{
    foreach (TT.Domain.ViewModels.PlayerFormViewModel p in Model.PlayersHere.Where(p => TT.Domain.Procedures.PlayerProcedures.PlayerIsOffline(p.Player)).OrderByDescending(p => p.Player.Level))
    {
        <div class="col-md-2 col-sm-4 col-xs-12 charaBox">
            <div class="charaBoxInner">
                <div>
                    <p>
                        @Html.Partial(MVC.PvP.Views.Player_Partial, p)
                    </p>
                </div>
            </div>
        </div>
    }
            }

        </div>
    </div>
}
}

@Html.Partial(MVC.PvP.Views.partial.partial_recentActivity, Model.LocationLog)

<script>

    var attacksMade = @Model.Player.TimesAttackingThisUpdate;
    var turnNo = @ViewBag.WorldTurnNumber;
    var togglestate = 0;
    var blinkEnabled = 0;

    var secondsToUpdate = @ViewBag.SecondsUntilUpdate;
    var donatorTier = @Model.Player.DonatorLevel;
    var playUpdateSound = false;
    var playAttackSound = false;
    var playMessageSound = false;
    var notificationsEnabled = false;

    $(document).ready(function() {

        $(".check").each(function() {
            if (attacksMade>=1) {
                $( this ).attr("href", "#");
                $( this ).addClass("disabled");
            }
        });

    });



    $( "#timerBox" ).click(function() {
        alert("The last update was  @CharactersHere.DatetimeToTimeago_WithSeconds(Model.LastUpdateTimestamp) (based on when this page was loaded.)  Updates should happen every 5 minutes.");
    });

    function pingDone(data) {
        if (data > turnNo) {
            turnNo = data;
            blinkEnabled = 1;
        }
    }

    function fail() {
        // alert("fail");
    }

</script>
