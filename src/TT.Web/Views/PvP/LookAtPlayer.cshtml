@model TT.Domain.ViewModels.PlayerFormItemsSkillsViewModel
@using TT.Web.CustomHtmlHelpers
@using TT.Domain.Statics
@{
    ViewBag.Title = Model.PlayerForm.Player.GetFullName();
}

@section menu
{
    <li><a href="@Url.Action(MVC.PvP.Play())">Back to game</a></li>

    @{
        if (Model.PlayerForm.Player.BotId != AIStatics.RerolledPlayerBotId)
        {
            <p>
                @{
                    if (ViewBag.HasBio)
                    {
                        <li><a href="@Url.Action(MVC.Settings.ViewBio(Model.PlayerForm.Player.MembershipId))">View Bio</a></li>
                    }
                    else if (ViewBag.IsMe)
                    {
                        <li><a href="@Url.Action(MVC.Settings.SetBio())">Create bio</a></li>
                    }

                    if (ViewBag.HasArtistAuthorBio)
                    {
                        <li><a href="@Url.Action(MVC.Settings.AuthorArtistBio(Model.PlayerForm.Player.MembershipId))">View Artist/Author Bio</a></li>
                    }

                    if (Model.PlayerForm.Player.BotId == AIStatics.ActivePlayerBotId)
                    {
                        <li><a href="@Url.Action(MVC.Settings.PlayerStats(Model.PlayerForm.Player.MembershipId))">View Statistics</a></li>
                    }

                    <li><a href="@Url.Action(MVC.PvP.ViewEffects(Model.PlayerForm.Player.Id))">View Effects</a></li>

                    if (Model.PlayerForm.Player.BotId == AIStatics.ActivePlayerBotId && !ViewBag.IsMe)
                    {
                        <li><a href="@Url.Action(MVC.Messages.Write(Model.PlayerForm.Player.Id, -1))">Send a Message</a></li>
                        <li><a href="@Url.Action(MVC.PvP.AddFriend(Model.PlayerForm.Player.Id))">Add Friend</a></li>
                        <li><a href="@Url.Action(MVC.Settings.ToggleBlacklistOnPlayer(Model.PlayerForm.Player.Id))">Blacklist Player</a></li>
                        <li><a href="@Url.Action(MVC.Report.Report(Model.PlayerForm.Player.MembershipId))">Report Player</a></li>
                    }
                }
            </p>
        }
        else
        {
            <p style="color: red;">&nbsp; </p>
        }
    }
}

@{
    if (Model.PlayerForm.Player.BotId != AIStatics.RerolledPlayerBotId)
    {
        <p>
            &nbsp;
        </p>
    }
    else
    {
        <div>
            <p class="infoMessage error">This player is no longer active and cannot be messaged or have a friend request sent to them.</p>
        </div>
    }
}

<div class="containerInner">

    <center>
        <div class="leftDisplay" style="background-image: url(../../Images/PvP/portraits/@Model.PlayerForm.Form.PortraitUrl);">
            <span class="icon icon-level"><b>@Model.PlayerForm.Player.Level</b></span>
            <span class="icon icon-@Model.PlayerForm.Player.Gender" style="float:right;"></span>
            <span class="iconPortrait">
                @HtmlHelpers.PrintDonatorIcon(Model.PlayerForm.Player.ToDbPlayer())
                @HtmlHelpers.PrintRPIcon(Model.PlayerForm.Player.ToDbPlayer())
                @HtmlHelpers.PrintPvPIcon(Model.PlayerForm.Player.ToDbPlayer())
            </span>
        </div>
        <div class="rightDisplay">
            <p class="avatarName center-block">@Model.PlayerForm.Player.GetFullName()</p>
            <center>
                @HtmlHelpers.GetCovenantInfo(Model.PlayerForm.Player.ToDbPlayer())
                @{
                    if (ViewBag.TimeUntilLogout > 0 && Model.PlayerForm.Player.BotId == AIStatics.ActivePlayerBotId)
                    {<p class="good">Online for @ViewBag.TimeUntilLogout more minutes</p>}
                else if (Model.PlayerForm.Player.BotId == AIStatics.ActivePlayerBotId)
                {<p class="bad">Offline</p>}
                }
                <span class="health">Willpower:  @Model.PlayerForm.Player.Health / @Model.PlayerForm.Player.MaxHealth</span><br>
                <span class="mana">Mana:  @Model.PlayerForm.Player.Mana / @Model.PlayerForm.Player.MaxMana</span>
                @{
                    if (Model.Bonuses.SneakPercent() <= PvPStatics.SneakAmountBeforeLocationIsPublic * 3)
                    {
                        <p class="bad">Due to this player's very poor ability to sneak, you sense that @Model.PlayerForm.Player.GetFullName() is currently at @ViewBag.AtLocation and has attacked @Model.PlayerForm.Player.TimesAttackingThisUpdate times this update and has @Model.PlayerForm.Player.ActionPoints action points remaining.</p>
                    }
                    else if (Model.Bonuses.SneakPercent() <= PvPStatics.SneakAmountBeforeLocationIsPublic * 2)
                    {
                        <p class="bad">Due to this player's very poor ability to sneak, you sense that @Model.PlayerForm.Player.GetFullName() is currently at @ViewBag.AtLocation and has attacked @Model.PlayerForm.Player.TimesAttackingThisUpdate times this update.</p>
                    }
                    else if (Model.Bonuses.SneakPercent() <= PvPStatics.SneakAmountBeforeLocationIsPublic)
                    {
                        <p class="bad">Due to this player's poor ability to sneak, you sense that @Model.PlayerForm.Player.GetFullName() is currently at @ViewBag.AtLocation.</p>
                    }
                }
                <h3>@Model.PlayerForm.Form.FriendlyName</h3>
            </center>
            <p>@Model.PlayerForm.Form.Description</p>
        </div>
    </center>

    <div style="clear:both"></div>




    @Html.Partial(MVC.PvP.Views.partial_InventoryEquipped, Model.Items)
    <div style="clear:both"></div>
    @Html.Partial(MVC.PvP.Views.partial.partial_AllBuffsTable, Model.Bonuses)
    <div style="clear:both"></div>





</div>
@{
    if (User.IsInRole(PvPStatics.Permissions_Moderator) || User.IsInRole(PvPStatics.Permissions_Admin))
    {
        @section menubottom
        {
            @if (Model.PlayerForm.Player.FlaggedForAbuse)
            {
                <li><a href="@Url.Action(MVC.PvP.FlagForSuspiciousActivity(Model.PlayerForm.Player.Id))">Unlock this player for suspicious activity</a></li>
            }
            else
            {
                <li><a href="@Url.Action(MVC.PvP.FlagForSuspiciousActivity(Model.PlayerForm.Player.Id))">Lock this player for suspicious activity</a></li>
            }
            <li><a href="@Url.Action(MVC.PvPAdmin.ResetAllPlayersWithIPAddress(Model.PlayerForm.Player.IpAddress))">Reset IP Address</a></li>
            <li><a href="@Url.Action(MVC.PvPAdmin.ToggleBanOnGlobalChat(Model.PlayerForm.Player.Id))">Toggle ban on global chat</a></li>
            <li><a href="@Url.Action(MVC.PvPAdmin.ViewPlayerItems(Model.PlayerForm.Player.Id))">Audit items</a></li>
            <li><a href="@Url.Action(MVC.PvPAdmin.AdminRename(Model.PlayerForm.Player.Id))">Rename</a></li>
            <li><a href="@Url.Action(MVC.PvPAdmin.RenamePlayer(Model.PlayerForm.Player.Id))">Chaos Actions</a></li>
            <li><a href="@Url.Action(MVC.Moderator.ViewStrikes(Model.PlayerForm.Player.MembershipId))">View/Add Strikes</a></li>
            <li><a href="@Url.Action(MVC.Moderator.SetAccountLockoutDate(Model.PlayerForm.Player.MembershipId))">Set Account Lockout Date</a></li>
            <li><a id="ForceUserLogout" href="javascript:void(0)">Force User Logout</a></li>
        }
    }
    else if (PvPStatics.ChaosMode && User.IsInRole(PvPStatics.Permissions_Chaoslord))
    {
        @section menubottom
        {
            <li><a href="@Url.Action(MVC.PvPAdmin.RenamePlayer(Model.PlayerForm.Player.Id))">Chaos Actions</a></li>
        }
    }
}

@functions{

    public string TokenHeaderValue()
    {
        AntiForgery.GetTokens(null, out var cookieToken, out var formToken);
        return cookieToken + ":" + formToken;
    }

    public string GetUserId()
    {
        return Model.PlayerForm.Player.MembershipId;
    }

    public string GetApiUrl()
    {
        return "/api";
    }

}

@section scripts
{
    <script src="@Links.Scripts.buffsTableColoring_js"></script>
    <script>

    function detail_success() {
        //$('#itemDetailModal').modal('show');
    }

    function detail_failure() {
        $("#fullDetails").html("Failed to load details");
    }

    function detail_wait() {
        $("#fullDetails").html("Loading details...");
    }

    $(document).ready(function () {
        // get current url that the page is on
        var currentUrl = new URL(window.location);

        $("#ForceUserLogout").on("click", function () {
            $.ajax({
                url: '@GetApiUrl()@Url.Action("Post", "AdminSignOut")',
                type: "post",
                contentType: "application/json",
                data: JSON.stringify({
                    TargetUserNameId: '@GetUserId()'
                }),
                dataType: "json",
                headers: {
                    RequestVerificationToken: '@TokenHeaderValue()'
                },
                complete: function (response, textStatus) {
                    var redirectError = response.getResponseHeader("X-Responded-JSON");

                    if (redirectError)
                    {
                        var redirectErrorJson = JSON.parse(redirectError);

                        if (redirectErrorJson.status == 401)
                        {
                            // get the url that asp wants to redirect the page to after a login
                            var redirectUrl = new URL(redirectErrorJson.headers.location);

                            // set the query string that the login page will have to be the query string that the current page has because of silly "helpful" things
                            redirectUrl.search = currentUrl.search;

                            // append the ReturnUrl to be everything to the right of the hostname
                            redirectUrl.searchParams.append("ReturnUrl", currentUrl.pathname + currentUrl.search + currentUrl.hash);

                            window.location.href = redirectUrl;

                            return;
                        }
                    }

                    var resultContainer = $("#resultContainer");
                    var errorContainer = $("#errorContainer");

                    resultContainer.text(response.responseJSON.Result);
                    errorContainer.text(response.responseJSON.Error);

                    $('html, body').animate({
                        scrollTop: 0
                    }, 500);
                }
            });
        });
    });

    </script>
}

@section head
{
    <style>
        .leftDisplay {
            background-size: 100% 100%;
            position: relative;
            text-align: left;
            height: 400px;
            width: 400px;
            display: inline-table;
            vertical-align: top;
            margin: 0px;
        }

        .iconPortrait {
            float: right;
            position: relative;
        }

        .rightDisplay {
            padding-left: 10px;
            padding-right: 10px;
            width: 480px;
            display: inline-table;
            vertical-align: top;
            text-align: left;
        }

        .textName {
            font-size: 25px;
            text-align: center;
        }

        .textDescription {
            font-size: 14px;
        }

        .textMobility {
            font-size: 16px;
            font-style: italic;
        }

        .Links {
            display: none;
        }

        .bad {
            margin: 0;
            padding: 0;
            text-align: center;
        }

        .center {
            margin: 0;
            padding: 0;
            text-align: center;
        }

        .health {
            font-size: 12px;
        }

        .mana {
            font-size: 12px;
        }

        @@media screen and (max-width: 520px) {
            .leftDisplay {
                height: 300px;
                width: 300px;
            }

            .rightDisplay {
                width: 100%;
            }
        }

        .itemBox {
            height: 100% !important;
        }

        .Links a {
            margin-right: 30px;
        }
    </style>
}
