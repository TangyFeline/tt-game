@model TT.Domain.ViewModels.PlayerFormItemsSkillsViewModel
@using TT.Web.CustomHtmlHelpers
@using TT.Domain.Statics

<nav class="navbar navbar-default outsideContainer navbarTT2">
    <div class="container-fluid">
        <!-- Brand and toggle get grouped for better mobile display -->
        <div class="navbar-header">
            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-2">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
        </div>

        <!-- Collect the nav links, forms, and other content for toggling -->
        <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-2">
            <ul class="nav navbar-nav" style="width:100%;">
                <li>@Html.ActionLink("Back to game", MVC.PvP.Play())</li>
                
                @{
    if (Model.PlayerForm.Player.BotId != AIStatics.RerolledPlayerBotId)
    {
        <p>
            @{
        if (ViewBag.HasBio)
        {
            <li>@Html.ActionLink("View Bio", MVC.Settings.ViewBio(Model.PlayerForm.Player.MembershipId))</li>
        }
        if (ViewBag.HasArtistAuthorBio)
        {
            <li>@Html.ActionLink("View Artist/Author Bio", MVC.Settings.AuthorArtistBio(Model.PlayerForm.Player.MembershipId))</li>
        }
     }

            @{
        if (Model.PlayerForm.Player.BotId == AIStatics.ActivePlayerBotId)
        {
            <li>@Html.ActionLink("View Statistics", MVC.Settings.PlayerStats(Model.PlayerForm.Player.MembershipId))</li>
            <li>@Html.ActionLink("Send a Message", MVC.Messages.Write(Model.PlayerForm.Player.Id, -1))</li>
    <li>@Html.ActionLink("Add Friend", MVC.PvP.AddFriend(Model.PlayerForm.Player.Id))</li>
                <li>@Html.ActionLink("Blacklist player", MVC.Settings.ToggleBlacklistOnPlayer(Model.PlayerForm.Player.Id))</li>
        }
            <li>@Html.ActionLink("View Effects", MVC.PvP.ViewEffects(Model.PlayerForm.Player.Id))</li>
            }
            </p>
    }
    else
    {
            <p style="color: red;">&nbsp; </p>
    }
            }
</ul>
        </div><!-- /.navbar-collapse -->
    </div><!-- /.container-fluid -->
</nav>




@{
    if (Model.PlayerForm.Player.BotId != AIStatics.RerolledPlayerBotId)
    {
        <p>
            &nbsp; 
        </p>
    }
    else
    {
        <div>
            <p class="infoMessage error">This player has chosen to create a new character and cannot be messaged or have a friend request sent to them.</p>
        </div>
    }
}

<div class="containerInner">

    <center>
        <div class="leftDisplay" style="background-image: url(../../Images/PvP/portraits/@Model.PlayerForm.Form.PortraitUrl);">
            <span class="icon icon-level"><b>@Model.PlayerForm.Player.Level</b></span>
            <span class="icon icon-@Model.PlayerForm.Player.Gender" style="float:right;"></span>
            <span class="iconPortrait">
                @CharactersHere.PrintDonatorIcon(Model.PlayerForm.Player.ToDbPlayer())
                @CharactersHere.PrintRPIcon(Model.PlayerForm.Player.ToDbPlayer())
                @CharactersHere.PrintPvPIcon(Model.PlayerForm.Player.ToDbPlayer())
            </span>
        </div>
        <div class="rightDisplay">
            <p class="avatarName center-block">@Model.PlayerForm.Player.GetFullName()</p>
            <center>
                @CharactersHere.GetCovenantInfo(Model.PlayerForm.Player.ToDbPlayer())
                @{
                    if (ViewBag.TimeUntilLogout > 0 && Model.PlayerForm.Player.BotId == AIStatics.ActivePlayerBotId)
                    {<p class="good">Online for @ViewBag.TimeUntilLogout more minutes</p>}
                    else if (Model.PlayerForm.Player.BotId == AIStatics.ActivePlayerBotId)
                    {<p class="bad">Offline</p>}
                }
                <span class="health">Willpower:  @Model.PlayerForm.Player.Health / @Model.PlayerForm.Player.MaxHealth</span><br />
                <span class="mana">Mana:  @Model.PlayerForm.Player.Mana / @Model.PlayerForm.Player.MaxMana</span>
                @{
                    if (Model.Bonuses.SneakPercent() <= PvPStatics.SneakAmountBeforeLocationIsPublic * 3)
                    {
                        <p class="bad">Due to this player's very poor ability to sneak, you sense that @Model.PlayerForm.Player.GetFullName() is currently at @ViewBag.AtLocation and has attacked @Model.PlayerForm.Player.TimesAttackingThisUpdate times this update and has @Model.PlayerForm.Player.ActionPoints action points remaining.</p>
                    }
                    else if (Model.Bonuses.SneakPercent() <= PvPStatics.SneakAmountBeforeLocationIsPublic * 2)
                    {
                        <p class="bad">Due to this player's very poor ability to sneak, you sense that @Model.PlayerForm.Player.GetFullName() is currently at @ViewBag.AtLocation and has attacked @Model.PlayerForm.Player.TimesAttackingThisUpdate times this update.</p>
                    }
                    else if (Model.Bonuses.SneakPercent() <= PvPStatics.SneakAmountBeforeLocationIsPublic)
                    {
                        <p class="bad">Due to this player's poor ability to sneak, you sense that @Model.PlayerForm.Player.GetFullName() is currently at @ViewBag.AtLocation.</p>
                    }
                }
                <h3>@Model.PlayerForm.Form.FriendlyName</h3>
            </center>
            <p>@Model.PlayerForm.Form.Description</p>
        </div>
    </center>

    <div style="clear:both"></div>




    @Html.Partial(MVC.PvP.Views.partial_InventoryEquipped, Model.Items)
    <div style="clear:both"></div>
    @Html.Partial(MVC.PvP.Views.partial.partial_AllBuffsTable, Model.Bonuses)
 <div style="clear:both"></div>
    




</div>
@{
        if (User.IsInRole(PvPStatics.Permissions_Moderator) || User.IsInRole(PvPStatics.Permissions_Admin) || User.IsInRole(PvPStatics.Permissions_Chaoslord))
        {
            <nav class="navbar navbar-default outsideContainer navbarTT2">
                <div class="container-fluid">
                 <!-- Brand and toggle get grouped for better mobile display -->
                 <div class="navbar-header">
                       <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-2">
                          <span class="sr-only">Toggle navigation</span>
                           <span class="icon-bar"></span>
                           <span class="icon-bar"></span>
                           <span class="icon-bar"></span>
                      </button>
                    </div>

        <!-- Collect the nav links, forms, and other content for toggling -->
                 <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-2">
                      <ul class="nav navbar-nav" style="width:100%;">

                          @{

                            if (!Model.PlayerForm.Player.FlaggedForAbuse)
                           {
                           <li>@Html.ActionLink("Lock this player for suspicious activity", MVC.PvP.FlagForSuspiciousActivity(Model.PlayerForm.Player.Id))</li>
                           }
                          else
                          {
                              <li>@Html.ActionLink("Unlock this player for suspicious activity", MVC.PvP.FlagForSuspiciousActivity(Model.PlayerForm.Player.Id))</li>
                          }
                          
                          }
                          
                         <li>@Html.ActionLink("Reset IP Address", MVC.PvPAdmin.ResetAllPlayersWithIPAddress(Model.PlayerForm.Player.IpAddress))</li>
                         <li>@Html.ActionLink("Toggle ban on global chat", MVC.PvPAdmin.ToggleBanOnGlobalChat(Model.PlayerForm.Player.Id))</li>
                         <li>@Html.ActionLink("Audit items", MVC.PvPAdmin.ViewPlayerItems(Model.PlayerForm.Player.Id))</li>
                         <li>@Html.ActionLink("Rename", MVC.PvPAdmin.RenamePlayer(Model.PlayerForm.Player.Id))</li>
                         <li>@Html.ActionLink("View/Add Strikes", MVC.Moderator.ViewStrikes(Model.PlayerForm.Player.MembershipId))</li>
                      </ul>
                 </div><!-- /.navbar-collapse -->
                </div><!-- /.container-fluid -->
            </nav>
        }
}
<script>

    function detail_success() {
        //$('#itemDetailModal').modal('show');
    }

    function detail_failure() {
        $("#fullDetails").html("Failed to load details");
    }

    function detail_wait() {
        $("#fullDetails").html("Loading details...");
    }

</script>

<style>
    .leftDisplay {
        background-size: 100% 100%;
        position: relative;
        text-align: left;
        height: 400px;
        width: 400px;
        display: inline-table;
        vertical-align: top;
        margin: 0px;
    }

    .iconPortrait{
        float: right;
        position: relative;
    }

    .rightDisplay {
        padding-left: 10px;
        padding-right: 10px;
        width: 480px;
        display: inline-table;
        vertical-align: top;
        text-align: left;
    }

    .textName {
        font-size: 25px;
        text-align: center;
    }

    .textDescription {
        font-size: 14px;
    }

    .textMobility {
        font-size: 16px;
        font-style: italic;
    }

    .Links {
        display: none;
    }

    .bad{
        margin:0;
        padding:0;
        text-align: center;
    }

    .center{
        margin:0;
        padding:0;
        text-align: center;
    }
    
    .health{
        font-size: 12px;
    }

        .mana{
        font-size: 12px;
    }

    @@media screen and (max-width: 520px) {
        .leftDisplay {
            height: 300px;
            width: 300px;
        }

        .rightDisplay {
            width: 100%;
        }
    }

    		.itemBox {
		height: 100% !important;
		}
		
		.Links a { 
			margin-right: 30px;
		}
</style>