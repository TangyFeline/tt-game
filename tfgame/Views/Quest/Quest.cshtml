@model tfgame.ViewModels.Quest.QuestPlayPageViewModel
    @using tfgame.dbModels.Models
@using tfgame.CustomHtmlHelpers
@using tfgame.Statics
@using tfgame.Procedures

<div id="loadingBox" class="specialBox specialBox2" style="display:none;">Contacting server...</div>

<div>
    <p class="infoMessage result">@Html.Raw(ViewBag.Result)</p>
    <p class="infoMessage error">@ViewBag.ErrorMessage</p>
    <p class="infoMessage suberror">@ViewBag.SubErrorMessage</p>
</div>

<h1>Quest:  <b>@Model.QuestStart.Name</b></h1>

 

<div id="statsBox">
    Discipline:  <b>@Model.BuffBox.Discipline()</b> | 
    Perception:  <b>@Model.BuffBox.Perception()</b> | 
    Charisma:  <b>@Model.BuffBox.Charisma()</b> | 
    Fortitude:  <b>@Model.BuffBox.Fortitude()</b> | 
    Agility:  <b>@Model.BuffBox.Agility()</b> | 
    Allure:  <b>@Model.BuffBox.Allure()</b> | 
    Magicka:  <b>@Model.BuffBox.Magicka()</b> | 
    Succour:  <b>@Model.BuffBox.Succour()</b> | 
    Luck:  <b>@Model.BuffBox.Luck()</b> | 
</div>

<div id="playerBox">
    <h3>@Model.Player.Player.GetFullName()</h3>
    <div class="portrait" style="background-image: url(@CharactersHere.GetImageURL(Model.Player, true));">

        <span class="icon icon-@Model.Player.Player.Gender" style="float:right;"></span>
        <span class="icon icon-level"><b>@Model.Player.Player.Level</b></span>
        <span class="portraitIconRP">@CharactersHere.PrintRPIcon(Model.Player.Player.ToDbPlayer()) @CharactersHere.PrintPvPIcon(Model.Player.Player.ToDbPlayer()) @CharactersHere.PrintMCIcon(Model.Player.Player.ToDbPlayer()) @CharactersHere.PrintDonatorIcon(Model.Player.Player.ToDbPlayer())</span>
       
    </div>

    <div>@Model.Player.Player.Health/@Model.Player.Player.MaxHealth Willpower, @Model.Player.Player.Mana/@Model.Player.Player.MaxMana Mana, @Model.Player.Player.ActionPoints/@PvPStatics.MaximumStoreableActionPoints AP</div>
</div>

<hr />

<div id="textBody">
    @Html.Raw(QuestProcedures.Textify(Model.QuestState.Text, Model.Player.Player.ToDbPlayer()))
</div>

<hr />

@{
    if (Model.ShowChildrenStates() == true)
    {
        foreach (QuestState child in Model.ChildQuestStates.ToList())
        {
            bool isAvailable = QuestProcedures.QuestStateIsAvailable(child, Model.Player.Player.ToDbPlayer(), Model.BuffBox, Model.QuestPlayerVariables);
            if (isAvailable == false && child.HideIfRequirementsNotMet == true)
            {
                // do nothing, option is unavailable and should be hidden
            }
            else if (isAvailable == false && child.HideIfRequirementsNotMet == false)
            {
                // show the option but give it disabled style indicating it is not open currently
                <p style="background-color:#ff8585"> @Ajax.ActionLink(child.ChoiceText + " " + tfgame.Procedures.QuestProcedures.GetRequirementsAsString(child), "Choice", "Quest", new { Id = child.Id }, new AjaxOptions { UpdateTargetId = "quest", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "" }) </p><br />
            }
            else
            {
                // show the option bas usual
                <p> @Ajax.ActionLink(child.ChoiceText + " " + tfgame.Procedures.QuestProcedures.GetRequirementsAsString(child), "Choice", "Quest", new { Id = child.Id }, new AjaxOptions { UpdateTargetId = "quest", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "" }) </p><br />
            }

        }
    }


    if (Model.ShowJump() == true)
    {
        <p> @Ajax.ActionLink("Continue", "Jump", "Quest", null, new AjaxOptions { UpdateTargetId = "quest", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "" }) </p>
    }

    if (Model.ShowEnd() == true)
    {
        @Html.ActionLink("End Quest", "EndQuest", "Quest", null, new { @class = "" })
    }

    if ((User.IsInRole(PvPStatics.Permissions_QuestWriter) == true))
    {
        <div id="listVariables" onclick="loadShowVariables()">
            <p><b class="bad"></b>QUEST WRITER ONLY:  Click here to view all variables and their values in this playthrough of this quest.</p>
        </div>
    }
}

<script>
    newMsgCount = @Model.NewMessages;

    if (newMsgCount > 0) {
        $("#newMessagesLink").html("(" + newMsgCount + " unread)").addClass("inboxNew");
    }

</script>