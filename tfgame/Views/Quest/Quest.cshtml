@model tfgame.ViewModels.Quest.QuestPlayPageViewModel
    @using tfgame.dbModels.Models
@using tfgame.CustomHtmlHelpers
@using tfgame.Statics
@using tfgame.Procedures

<div>
    <p class="infoMessage result">@Html.Raw(ViewBag.Result)</p>
    <p class="infoMessage error">@ViewBag.ErrorMessage</p>
    <p class="infoMessage suberror">@ViewBag.SubErrorMessage</p>
</div>

<h1>Quest:  <b>@Model.QuestStart.Name</b></h1>

 

<div id="statsBox">
    Discipline:  <b>@Model.BuffBox.Discipline()</b> | 
    Perception:  <b>@Model.BuffBox.Perception()</b> | 
    Charisma:  <b>@Model.BuffBox.Charisma()</b> | 
    Fortitude:  <b>@Model.BuffBox.Fortitude()</b> | 
    Agility:  <b>@Model.BuffBox.Agility()</b> | 
    Allure:  <b>@Model.BuffBox.Allure()</b> | 
    Magicka:  <b>@Model.BuffBox.Magicka()</b> | 
    Succour:  <b>@Model.BuffBox.Succour()</b> | 
    Luck:  <b>@Model.BuffBox.Luck()</b> | 
</div>

<div id="playerBox">
    <h3>@Model.Player.Player.GetFullName()</h3>
    <div class="portrait" style="background-image: url(@CharactersHere.GetImageURL(Model.Player, true));">

        <span class="icon icon-@Model.Player.Player.Gender" style="float:right;"></span>
        <span class="icon icon-level"><b>@Model.Player.Player.Level</b></span>
        <span class="portraitIconRP">@CharactersHere.PrintRPIcon(Model.Player.Player.ToDbPlayer()) @CharactersHere.PrintPvPIcon(Model.Player.Player.ToDbPlayer()) @CharactersHere.PrintMCIcon(Model.Player.Player.ToDbPlayer()) @CharactersHere.PrintDonatorIcon(Model.Player.Player.ToDbPlayer())</span>
        @{
            if (tfgame.Procedures.PlayerProcedures.PlayerIsOffline(Model.Player.Player) == true)
            {
                <span class="icon icon-sleep" title="This player is offline and cannot be attacked."></span>
            }
        }
    </div>
</div>

<hr />

<div id="textBody">
    @Html.Raw(QuestProcedures.Textify(Model.QuestState.Text))
</div>

<hr />

@foreach (QuestState child in Model.ChildQuestStates.ToList())
{
    <p> @Ajax.ActionLink(child.ChoiceText + " " + tfgame.Procedures.QuestProcedures.GetRequirementsAsString(child), "Choice", "Quest", new { Id = child.Id }, new AjaxOptions { UpdateTargetId = "quest", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "attackLink" })</p>
}