@model tfgame.ViewModels.Quest.QuestStateFormViewModel

@using tfgame.Statics
@using tfgame.dbModels.Models

<p>@Ajax.ActionLink("Click to view all quest states in this quest", "ShowAllQuestStates", "QuestWriter", new { Id = Model.QuestState.QuestId }, new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "" })</p>

<h4>Parent Quest State:</h4>

@{
    if (Model.ParentQuestState != null)
    {

        <p>@Ajax.ActionLink("[" + Model.ParentQuestState.QuestStateName + "]", "QuestState", "QuestWriter", new { Id = Model.ParentQuestState.Id, QuestId = Model.QuestState.Id, ParentStateId = -1 }, new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "parentButton" })</p>
    }
    else
    {
        <span class="bad">No parent quest state found.</span>
    }
}

<hr />

@using (Ajax.BeginForm("QuestStateSend", "QuestWriter", new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "POST", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "" }))
{

    @Html.HiddenFor(m => m.QuestState.Id)
    @Html.HiddenFor(m => m.QuestState.QuestId)
    @Html.HiddenFor(m => m.QuestState.ParentQuestStateId)

    <label>Quest state name (this is only used in the quest editor to help improve the readability of the quest flow):</label>
    @Html.TextBoxFor(m => m.QuestState.QuestStateName)

    <br /><br />

    <label>Text (the text the player sees when having first entered this state):</label>    <br />
    @Html.TextAreaFor(m => m.QuestState.Text)

    <br /><br />

    <label>Choice Text (the text seen when a player has the opportunity to enter this state):</label>
    @Html.TextBoxFor(m => m.QuestState.ChoiceText)

    <br /><br />

    <label>Hide this choice if entry requirements are not met?  Check if yes.  (Not yet implented):</label>
    @Html.CheckBoxFor(m => m.QuestState.HideIfRequirementsNotMet)

    <br /><br />

    <label>Jumps to State (instead of having children options, leaving this state immediately brings the player to another one):</label>    <br />
    @Html.DropDownListFor(m => m.QuestState.JumpToQuestStateId, new SelectList(
                  new List<Object>{
                      new { value = 0, text = "--none--"  },
                    },
                  "value",
                  "text",
                   2))

    if (Model.JumpToQuestState != null)
    {
        @Ajax.ActionLink(Model.JumpToQuestState.QuestStateName, "QuestState", "QuestWriter", new { Id = Model.JumpToQuestState.Id, QuestId = Model.QuestState.QuestId, ParentStateId = Model.QuestState.Id }, new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "editButton" })
    }

    @Ajax.ActionLink("Create new Unconnected Quest State", "QuestState", "QuestWriter", new { Id = -1, QuestId = Model.QuestState.QuestId, ParentStateId = -1 }, new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "newButton" })

    if (Model.JumpToQuestState != null && Model.ChildQuestStates.Count() > 0)
    {
        <p class="bad">!!!! WARNING:  Because this quest state jumps to another one, the children quest states below are not reachable !!!!</p>
    }

    <br /><br />

    <input type="submit" class="btn btn-chat" value="Send" />

            }

<h4>Quest State Preactions:  (@Model.QuestState.QuestStatePreactions.Count())</h4>

<table>

    @{
        foreach (QuestStatePreaction r in Model.QuestState.QuestStatePreactions)
        {
            <tr>
                <td>
                    @Ajax.ActionLink(r.QuestStatePreactionName, "QuestStatePreaction", "QuestWriter", new { Id = r.Id, QuestStateId = r.QuestStateId.Id, QuestId = Model.QuestState.QuestId }, new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "editButton" })
                </td>
                <td>
                    @Ajax.ActionLink("[DELETE]", "QuestStatePreactionDelete", "QuestWriter", new { Id = r.Id }, new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting", Confirm = "Are you sure you want to delete this quest state preaction?" }, new { @class = "deleteButton" })
                </td>
            </tr>
        }

    }

</table>

<p>@Ajax.ActionLink("--New Quest State Preaction--", "QuestStatePreaction", "QuestWriter", new { Id = -1, QuestStateId = Model.QuestState.Id, QuestId = Model.QuestState.QuestId }, new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "newButton" })</p>

<h4>Quest State Requirements:  (@Model.QuestState.QuestStateRequirements.Count())</h4>

<table>

    @{
        foreach (QuestStateRequirement r in Model.QuestState.QuestStateRequirements)
        {
            <tr>
                <td>
                    @Ajax.ActionLink(r.QuestStateRequirementName, "QuestStateRequirement", "QuestWriter", new { Id = r.Id, QuestStateId = r.QuestStateId.Id, QuestId = Model.QuestState.QuestId }, new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "editButton" })
                </td>
                <td>
                    @Ajax.ActionLink("[DELETE]", "QuestStateRequirementDelete", "QuestWriter", new { Id = r.Id }, new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting", Confirm = "Are you sure you want to delete this quest state requirement?" }, new { @class = "deleteButton" })
                </td>
            </tr>
        }

    }

</table>



<p>@Ajax.ActionLink("--New Quest State Requirement--", "QuestStateRequirement", "QuestWriter", new { Id = -1, QuestStateId = Model.QuestState.Id, QuestId = Model.QuestState.QuestId }, new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "newButton" })</p>

<h4>Quest End (@Model.QuestState.QuestEnds.Count())</h4>

<table>

    @{
        foreach (QuestEnd qe in Model.QuestState.QuestEnds)
        {
            <tr>
                <td>
                    @Ajax.ActionLink(qe.QuestEndName, "QuestEnd", "QuestWriter", new { Id = qe.Id, QuestStateId = Model.QuestState.Id, QuestId = Model.QuestState.QuestId }, new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "editButton" })
                </td>
                <td>
                    @Ajax.ActionLink("[DELETE]", "QuestEndDelete", "QuestWriter", new { Id = qe.Id }, new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting", Confirm = "Are you sure you want to delete this quest end?" }, new { @class = "deleteButton" })
                </td>
            </tr>
        }
    }
</table>

<p>@Ajax.ActionLink("--New Quest End--", "QuestEnd", "QuestWriter", new { Id = -1, QuestStateId = Model.QuestState.Id, QuestId = Model.QuestState.QuestId }, new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "newButton" })</p>

<h4>Children Quest States (@Model.ChildQuestStates.Count()):</h4>

@{
    foreach (QuestState q in Model.ChildQuestStates)
    {
       @Ajax.ActionLink("[" + q.QuestStateName + "]", "QuestState", "QuestWriter", new { Id = q.Id, QuestId = Model.QuestState.QuestId, ParentStateId = Model.QuestState.Id }, new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting",  }, new { @class = "editButton" })

        @Ajax.ActionLink("[DELETE]", "QuestStateDelete", "QuestWriter", new { Id = q.Id }, new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting", Confirm="Are you sure you want to delete this quest state?" }, new { @class = "deleteButton" })
        <br /><br />
    }
}

@{
    if (Model.QuestState.Id > 0)
    {
        <div>@Ajax.ActionLink("--Add Child QuestState--", "QuestState", "QuestWriter", new { Id = -1, QuestId = Model.QuestState.QuestId, ParentStateId = Model.QuestState.Id }, new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "newButton" })</div>
    }
}

<script>

    var allStates;
    var questId = @Model.QuestState.QuestId;
    var jumpToDropdown = $("#QuestState_JumpToQuestStateId");
    var jumpToLoadValue = @Model.QuestState.JumpToQuestStateId;

    function loadJumpToDropdownWithValues() {
        $.getJSON("/QuestWriter/QuestStatesInQuestJSON/" + questId, function (data) {
            allStates = data;
        }).then(function () {
            populateJumpToDropdown();
            setDropdownToValue(jumpToLoadValue);
        });
    }

    // load the values for the jump to state dropdown
    function populateJumpToDropdown() {

        for (var i = 0; i < allStates.length; i++) {
            var opt = allStates[i];

            jumpToDropdown.append($('<option>', {
                value: opt.Id,
                text: opt.StateName
            }));
        }
    }

    // set value of jump to quest state dropdown
    function setDropdownToValue(value) {
        jumpToDropdown.val(value);
    }

    // onload
    loadJumpToDropdownWithValues();

</script>