@model tfgame.ViewModels.Quest.QuestStateFormViewModel

@using tfgame.Statics
@using tfgame.dbModels.Models
@using tfgame.CustomHtmlHelpers

<p>@Ajax.ActionLink("View Logs", "ShowQuestWriterLogs", "QuestWriter", new { Id = Model.QuestState.QuestId }, new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "" })</p>
<p>@Ajax.ActionLink("Click to view all quest states in this quest", "ShowAllQuestStates", "QuestWriter", new { Id = Model.QuestState.QuestId }, new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "" })</p>
<p>@Ajax.ActionLink("Click to view all quest connections in this quest", "ShowAllQuestConnections", "QuestWriter", new { Id = Model.QuestState.QuestId }, new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "" })</p>
<p>@Ajax.ActionLink("View Diagram", "Diagram", "QuestWriter", new { Id = Model.QuestState.QuestId }, new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "" })</p>


<h4>Connections TO this Quest State (@Model.QuestConnectionsFrom.Count()):</h4>

@{
    foreach (QuestConnection q in Model.QuestConnectionsTo)
    {
        <p>@Ajax.ActionLink("[" + q.ConnectionName + "]", "QuestConnection", "QuestWriter", new { Id = q.Id, QuestId = Model.QuestState.QuestId, FromQuestId = q.QuestStateFromId, ToQuestId = q.QuestStateToId }, new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "parentButton" })

       @Ajax.ActionLink("Jump to State", "QuestState", "QuestWriter", new { Id = q.QuestStateFromId, QuestId = Model.QuestState.QuestId, ParentStateId = -1 }, new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "editButton" })</p>
    }
    <p>@Ajax.ActionLink("Add New", "QuestConnection", "QuestWriter", new { Id = -1, QuestId = Model.QuestState.QuestId, FromQuestId = -1, ToQuestId = Model.QuestState.Id }, new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "newButton" })</p>
}


@{ if (Model.QuestConnectionsFailTo.Count() > 0)
    {
       
        <h4><img src='../Images/PvP/Icons/dice.png' style='width: 24px; height: 24px; '> Connections TO this Quest State <span class="bad"> from failed Rolls</span> (@Model.QuestConnectionsFailTo.Count()):</h4>
    }
}

@{
    foreach (QuestConnection q in Model.QuestConnectionsFailTo)
    {
        <p>
            @Ajax.ActionLink("[" + q.ConnectionName + "]", "QuestConnection", "QuestWriter", new { Id = q.Id, QuestId = Model.QuestState.QuestId, FromQuestId = q.QuestStateFromId, ToQuestId = q.QuestStateToId }, new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "parentButton" })

        @Ajax.ActionLink("Jump to State", "QuestState", "QuestWriter", new { Id = q.QuestStateFromId, QuestId = Model.QuestState.QuestId, ParentStateId = -1 }, new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "editButton" })
    </p>
    }
}

<h4>Connections FROM this Quest State (@Model.QuestConnectionsTo.Count()):</h4>

@{
    foreach (QuestConnection q in Model.QuestConnectionsFrom)
    {
        <p>
            @Ajax.ActionLink("[" + q.ConnectionName + "]", "QuestConnection", "QuestWriter", new { Id = q.Id, QuestId = Model.QuestState.QuestId, FromQuestId = q.QuestStateFromId, ToQuestId = q.QuestStateToId }, new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "parentButton" })

        @Ajax.ActionLink("Jump to State", "QuestState", "QuestWriter", new { Id = q.QuestStateToId, QuestId = Model.QuestState.QuestId, ParentStateId = -1 }, new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "editButton" })
    </p>

   
    }
    <p>@Ajax.ActionLink("Add New", "QuestConnection", "QuestWriter", new { Id = -1, QuestId = Model.QuestState.QuestId, FromQuestId = Model.QuestState.Id, ToQuestId = -1 }, new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "newButton" })</p>
}

<hr />

@using (Ajax.BeginForm("QuestStateSend", "QuestWriter", new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "POST", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "" }))
{

    @Html.HiddenFor(m => m.QuestState.Id)
    @Html.HiddenFor(m => m.QuestState.QuestId)
    @Html.HiddenFor(m => m.QuestState.X)
    @Html.HiddenFor(m => m.QuestState.Y)
    @Html.HiddenFor(m => m.QuestState.PinToDiagram)

    <label>Quest state name (this is only used in the quest editor to help improve the readability of the quest flow):</label>
    @Html.TextBoxFor(m => m.QuestState.QuestStateName)

    <br /><br />

    <label>Text (the text the player sees when having first entered this state):</label>    <br />
    @Html.TextAreaFor(m => m.QuestState.Text)

    <br /><br />


    <label>Internal Notes (for quest writer's internal note-keeping uses only; questers never see this):</label>    <br />
    @Html.TextAreaFor(m => m.QuestState.Notes, new { @class = "short" })

    <br /><br />

    <input type="submit" class="btn btn-chat" value="Send" />

}

<h4>Quest State Preactions:  (@Model.QuestState.QuestStatePreactions.Count())</h4>

<table>

    @{
        foreach (QuestStatePreaction r in Model.QuestState.QuestStatePreactions)
        {
            <tr>
                <td>
                    @Ajax.ActionLink(r.QuestStatePreactionName, "QuestStatePreaction", "QuestWriter", new { Id = r.Id, QuestStateId = r.QuestStateId.Id, QuestId = Model.QuestState.QuestId }, new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "editButton" })
                </td>
                <td>
                    @Ajax.ActionLink("[DELETE]", "QuestStatePreactionDelete", "QuestWriter", new { Id = r.Id }, new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting", Confirm = "Are you sure you want to delete this quest state preaction?" }, new { @class = "deleteButton" })
                </td>
            </tr>
        }

    }
</table>

@{
    if (Model.QuestState.Id > 0)
    {
        <p>@Ajax.ActionLink("--New Quest State Preaction--", "QuestStatePreaction", "QuestWriter", new { Id = -1, QuestStateId = Model.QuestState.Id, QuestId = Model.QuestState.QuestId }, new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "newButton" })</p>
    }
}

<h4>Quest Ends (@Model.QuestState.QuestEnds.Count())</h4>

<table>

    @{
        foreach (QuestEnd qe in Model.QuestState.QuestEnds)
        {
            <tr>
                <td>
                    @Ajax.ActionLink(qe.QuestEndName, "QuestEnd", "QuestWriter", new { Id = qe.Id, QuestStateId = Model.QuestState.Id, QuestId = Model.QuestState.QuestId }, new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "editButton" })
                </td>
                <td>
                    @Ajax.ActionLink("[DELETE]", "QuestEndDelete", "QuestWriter", new { Id = qe.Id }, new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting", Confirm = "Are you sure you want to delete this quest end?" }, new { @class = "deleteButton" })
                </td>
            </tr>
        }
    }
</table>

@{
    if (Model.QuestState.Id > 0)
    {
        <p>@Ajax.ActionLink("--New Quest End--", "QuestEnd", "QuestWriter", new { Id = -1, QuestStateId = Model.QuestState.Id, QuestId = Model.QuestState.QuestId }, new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "newButton" })</p>
    }
}


@*<h4>Children Quest States (@Model.ChildQuestStates.Count()):</h4>*@

@*@{
        foreach (QuestState q in Model.ChildQuestStates)
        {
            @Ajax.ActionLink(q.QuestStateName, "QuestState", "QuestWriter", new { Id = q.Id, QuestId = Model.QuestState.QuestId, ParentStateId = Model.QuestState.Id }, new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting", }, new { @class = "editButton" })

            @Ajax.ActionLink("[DELETE]", "QuestStateDelete", "QuestWriter", new { Id = q.Id }, new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting", Confirm = "Are you sure you want to delete this quest state?" }, new { @class = "deleteButton" })
            <br /><br />
        }

        if (Model.QuestState.Id > 0)
        {
            <div>@Ajax.ActionLink("--Add Child QuestState--", "QuestState", "QuestWriter", new { Id = -1, QuestId = Model.QuestState.QuestId, ParentStateId = Model.QuestState.Id }, new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "newButton" })</div>
        }
    }*@



<script>

    var allStates;
    var questId = @Model.QuestState.QuestId;
   // var jumpToDropdown = $("#QuestState_JumpToQuestStateId");
   // var jumpToLoadValue = 0; // TODO:  remove?


   // // onload
   //// loadJumpToDropdownWithValues();
</script>
