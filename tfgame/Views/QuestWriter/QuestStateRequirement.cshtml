@model tfgame.ViewModels.Quest.QuestStateRequirementFormViewModel

@using tfgame.Statics
@using tfgame.dbModels.Models



<h4>Parent Quest State:</h4>

@{
    if (Model.ParentQuestState != null)
    {

        <p>@Ajax.ActionLink("[" + Model.ParentQuestState.QuestStateName + "]", "QuestState", "QuestWriter", new { Id = Model.ParentQuestState.Id, QuestId = Model.QuestStateRequirement.QuestId, ParentStateId = -1 }, new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "" })</p>
    }
}

<hr />

@using (Ajax.BeginForm("QuestStateRequirementSend", "QuestWriter", new AjaxOptions { UpdateTargetId = "swapMe", InsertionMode = InsertionMode.Replace, HttpMethod = "POST", OnSuccess = "success", OnFailure = "fail", OnBegin = "waiting" }, new { @class = "" }))
{

    @Html.HiddenFor(m => m.ParentQuestState.Id)

    @Html.HiddenFor(m => m.QuestStateRequirement.Id)
    @Html.HiddenFor(m => m.QuestStateRequirement.QuestId)

    <label>Name (used for interla purposes):</label>    <br /><br />
        @Html.TextBoxFor(m => m.QuestStateRequirement.QuestStateRequirementName)

    <label>Requirement Type:</label>    <br />
    @Html.DropDownListFor(m => m.QuestStateRequirement.RequirementType, new SelectList(
                  new List<Object>{
                      new { value = QuestStatics.RequirementType.Agility, text = "Agility"  },
                      new { value = QuestStatics.RequirementType.Allure, text = "Allure"  },
                      new { value = QuestStatics.RequirementType.Charisma, text = "Charisma",  },
                      new { value = QuestStatics.RequirementType.Discipline, text = "Discipline",  },
                      new { value = QuestStatics.RequirementType.Fortitude, text = "Fortitude",  },
                      new { value = QuestStatics.RequirementType.Luck, text = "Luck",  },
                      new { value = QuestStatics.RequirementType.Magicka, text = "Magicka",  },
                      new { value = QuestStatics.RequirementType.Perception, text = "Perception",  },
                      new { value = QuestStatics.RequirementType.Succour, text = "Succour",  },
                      new { value = QuestStatics.RequirementType.Variable, text = "[Variable]",  },
                    },
                  "value",
                  "text",
                   2))

    <br /><br />

    <label>Operator:</label>    <br />
    @Html.DropDownListFor(m => m.QuestStateRequirement.Operator, new SelectList(
                  new List<Object>{
                      new { value = QuestStatics.Operator.Less_Than, text = "< (less than)"  },
                      new { value = QuestStatics.Operator.Less_Than_Or_Equal, text = "<= (less than or equal to)"  },
                      new { value = QuestStatics.Operator.Equal_To, text = "== (equal to)"  },
                      new { value = QuestStatics.Operator.Greater_Than_Or_Equal, text = ">= (greater than or equal to)"  },
                      new { value = QuestStatics.Operator.Greater_Than, text = "> (greater than)"  },
                      new { value = QuestStatics.Operator.Not_Equal_To, text = "!= (not equal to)"  },

                    },
                  "value",
                  "text",
                   2))

    <br /><br />

    <label>Requirement Value:</label>    <br /><br />
    @Html.TextBoxFor(m => m.QuestStateRequirement.RequirementValue)

    <label>Variable used:</label>    <br /><br />
        @Html.TextBoxFor(m => m.QuestStateRequirement.VariabledbName)

    <input type="submit" class="btn btn-chat" value="Send" />

}

