<h1>Help</h1>

<p>Welcome, quest writer, to the quest editor!  Here is the basics on how to use this (admittedly confusing) quest editor to create your own quest.  The model for the questing system in Transformania Timeis a simple directed graph / flowchart.  As such the way to think about questing is a Directed Graph in which each state is capable to leading to one or more other states by passing through a connection.  You can read more about directed graphs <a target="_blank" href="https://en.wikipedia.org/wiki/Directed_graph">here</a> if you want.</p>


<h3>Quest Start</h3>

<p>A <b>Quest Start</b> holds some information about the quest and what it takes for a player to be eligible to begin it.  Quests must all begin in a specific location.  Players can only complete a quest one time per player but are allowed to fail it any number of times and restart.  Additionally, players are allowed to abandon a quest at any time unless they have reach an end state, in which case they must accept the consequences of failure or success.</p>

<p>Quest Starts must begin with a certain Quest State.</p>

<h3>Quest State</h3>

<p>A <b>Quest State</b> makes up the bulk of a quest.  A quest state is simply some state that the player is in; they may be in a room, walking down a road, talking to someone, etc.  Quest States is where the majority of written text for a quest will be. </p>

<p>You can use the following tags in the body text of a quest state to customize it.  Note that ... indicates any amount of text, ie [b]Hello[/b].</p>

<ul>
    <li>[b]...[/b] Will make text appear <b>in bold</b>.</li>
    <li>[i]...[/i] Will make text appear <i>in italic</i>.</li>
    <li>$PLAYER_NAME_FIRST$ will be replaced with the player's first name.</li>
    <li>$PLAYER_NAME_LAST$ will be replaced with the player's last name.</li>
    <li>$$PLAYER_NAME$ will be replaced with the player's first name, nickname (when available), and last name.</li>
</ul>

<h3>Quest Connection</h3>

<p>A <b>Quest Connection</b> is the binding between two quests states.  A connection is typically an action, such as "walk to the door" or "pick up the key".  A connection has a FROM quest state which is where the option appears for the player.  It also has a TO quest state which is the quest state that the player is delivered to after performing that action.</p>

<h3>Quest Connection Requirement</h3>

<p>A <b>Quest Connection Requirement</b> is some condition that must hold true for a player to be eligible for an option that leads to another quest state.  More than one quest connection requirement can exist for a connection.  Currently <b>ALL</b> conditions must be true for a player to enter it (a logical AND operator).  Quest Connection Requirements can be based off of a player's stats to allow unique options for certain builds or restrict others, require a certain form or gender, or be compared against a previously set variable.</p>


<h3>Quest State Preaction</h3>

<p>A <b>Quest State Preaction</b> is something that is triggered <b>immediately</b> when a player enters a state, either by having chosen a choice or jumping to a quest state.  These preactions include setting a variable, changing the player's form, willpower, or mana.  Because this happens before the player even sees the state's text, </p>

<p><span class="bad">Quest variables are not yet implemented.  Ignore this for now.</span></p>

<h3>Quest End</h3>

<p>A <b>Quest End</b> means that the current quest state indicates that the player has come to a place in the quest where they either pass or fail.  More than one quest end can be added to a quest state; when this is the case the player will recieve the reward from each quest end.</p>

<p>Each quest end can be marked as a pass or fail individually.  When there are multiple quest ends, the FIRST quest end's completion status will be used.</p>

<h3>Variables</h3>

<p><b>Quest Variables</b> are simple number values that can be stored as a way for the quest to remember certain actions or choices a player has made.  Variables can be set and altered with Quest State Preactions and can be used to restrict Connections.  Variables will automatically be saved in all caps and have a default value of 0.</p>

<p>An example of a variable in use is if a player picks up a key.  A variable named HAS_KEY could be set to 1.  Then a Connection that requires that the player has HAS_KEY set equal to (==) 1 can be unlocked, allowing further progression or an alternative action.</p>