@model tfgame.dbModels.Models.EffectContribution
@using tfgame.Statics

<head>
    <link href="~/Content/PvP.css" rel="stylesheet" />
    <script src="~/Scripts/jquery-2.1.0.min.js"></script>
</head>

<h1>Item balancing calculator</h1>

<p>Use this calculator to try and balance items.  <b>Good items will only have a total bonus amount of 30--too much and it is likely overpowered and too low and it is likely underpowered.  You can enter negative numbers to impose penalties on that effect instead.</b>  NOTE:  This is very much a work in progress and the exact balancing will change.</p>

<p style="color: red;">Items and Animals should not have more than 4 different effects on them.  Animate forms should not have more than 6 different effects on them.</p>

<p>(Amt):  Means a direct, static amount.  Ex:  30 maxiumum willpower increase adds 30 extra willpower points.</p>

<p>(%):  Means a percentage modifier.  Ex:  a 10% bonus on extra willpower damage per spell attack means 7 damage becomes 7*1.1 = 7.7 damage.</p>

<p>Fields that have a Negative Modifier receive fewer points when the stat is put into the negative.</p>

<p>Fields that have a Minimum Cap will not give any additional points beyond a certain value.</p>

<p>What type of spell is this?</p>
<select id="mobilityType">
    <option value="full">Animate Form</option>
    <option value="item">Item</option>
    <option value="pet">Animal/Pet</option>
    <option value="curse">Curse</option>
</select>

<p id="curseDurationWrapper" style="display: none;">
    Turn duration of curse?
    <input type="text" id="curseDurationInput">
</p>


<h2>Net balance:  <span id="total"></span>     Target:  <span id="desired"></span>  Total points used (400 max allowed):  <span id="absolute_total"></span></h2>

<p>
    <button type="button" onclick="Clear()">Clear</button>
</p>

@using (Html.BeginForm("ContributeBalanceCalculatorSend_Effect", "PvP", FormMethod.Post))
{

    @Html.HiddenFor(m => m.Id)

    <table id="balanceTable">
        <thead>

        <th>Bonus/Penalty</th>
        <th>Amount</th>
        <th width="80px">Cost / Unit</th>
        <th>Negative Modifier</th>
        <th>Minimum Cap</th>
        <th>Bonus total</th>

        </thead>




        <tbody>
            <tr>
                <td>
                    <span class='icon-health_recovery'></span>
                    Maximum willpower increase (%)
                </td>
                <td>@Html.TextBoxFor(m => m.HealthBonusPercent, new { @id = "HealthBonusPercent", @negative_mod = tfgame.Statics.BalanceStatics.HealthBonusPercent__NegativeModifier, @negative_cap = tfgame.Statics.BalanceStatics.HealthBonusPercent__NegativeCap })</td>
                <td>@tfgame.Statics.BalanceStatics.HealthBonusPercent__Value</td>
                <td>@tfgame.Statics.BalanceStatics.HealthBonusPercent__NegativeModifier</td>
                <td>@tfgame.Statics.BalanceStatics.HealthBonusPercent__NegativeCap</td>
                <td></td>
            </tr>
            <tr>
                <td><span class='icon-mana_recovery'></span>Maximum mana increase (%)</td>
                <td>@Html.TextBoxFor(m => m.ManaBonusPercent, new { @id = "ManaBonusPercent", @negative_mod = tfgame.Statics.BalanceStatics.ManaBonusPercent__NegativeModifier, @negative_cap = tfgame.Statics.BalanceStatics.ManaBonusPercent__NegativeCap })</td>
                <td>@tfgame.Statics.BalanceStatics.ManaBonusPercent__Value</td>
                <td>@tfgame.Statics.BalanceStatics.ManaBonusPercent__NegativeModifier</td>
                <td>@tfgame.Statics.BalanceStatics.ManaBonusPercent__NegativeCap</td>
                <td></td>
            </tr>
            <tr>
                <td>
                    <span class='icon-health_recovery'></span>Willpower recovery per game update (Amt)
                </td>
                <td>@Html.TextBoxFor(m => m.HealthRecoveryPerUpdate, new { @id = "HealthRecoveryPerUpdate", @negative_mod = tfgame.Statics.BalanceStatics.HealthRecoveryPerUpdate__NegativeModifier, @negative_cap = tfgame.Statics.BalanceStatics.HealthRecoveryPerUpdate__NegativeCap })</td>
                <td>@tfgame.Statics.BalanceStatics.HealthRecoveryPerUpdate__Value</td>
                <td>@tfgame.Statics.BalanceStatics.HealthRecoveryPerUpdate__NegativeModifier</td>
                <td>@tfgame.Statics.BalanceStatics.HealthRecoveryPerUpdate__NegativeCap</td>
                <td></td>
            </tr>
            <tr>
                <td><span class='icon-mana_recovery'></span>Mana recovery per game update (Amt)</td>
                <td>@Html.TextBoxFor(m => m.ManaRecoveryPerUpdate, new { @id = "ManaRecoveryPerUpdate", @negative_mod = tfgame.Statics.BalanceStatics.HealthRecoveryPerUpdate__NegativeModifier, @negative_cap = tfgame.Statics.BalanceStatics.ManaRecoveryPerUpdate__NegativeCap })</td>
                <td>@tfgame.Statics.BalanceStatics.ManaRecoveryPerUpdate__Value</td>
                <td>@tfgame.Statics.BalanceStatics.HealthRecoveryPerUpdate__NegativeModifier</td>
                <td>@tfgame.Statics.BalanceStatics.ManaRecoveryPerUpdate__NegativeCap</td>
                <td></td>
            </tr>
            <tr>
                <td>Sneak chance (%) <red>*</red></td>
                <td>@Html.TextBoxFor(m => m.SneakPercent, new { @id = "SneakPercent", @negative_mod = tfgame.Statics.BalanceStatics.SneakPercent__NegativeModifier, @negative_cap = tfgame.Statics.BalanceStatics.SneakPercent__NegativeCap })</td>
                <td>@tfgame.Statics.BalanceStatics.SneakPercent__Value</td>
                <td>@tfgame.Statics.BalanceStatics.SneakPercent__NegativeModifier</td>
                <td>@tfgame.Statics.BalanceStatics.SneakPercent__NegativeCap</td>
                <td></td>
            </tr>
            <tr>
                <td><span class='icon-defense'></span>Spell evasion (%) <red>*</red></td>
                <td>@Html.TextBoxFor(m => m.EvasionPercent, new { @id = "EvasionPercent", @negative_mod = tfgame.Statics.BalanceStatics.EvasionPercent__NegativeModifier, @negative_cap = tfgame.Statics.BalanceStatics.EvasionPercent__NegativeCap })</td>
                <td>@tfgame.Statics.BalanceStatics.EvasionPercent__Value</td>
                <td>@tfgame.Statics.BalanceStatics.EvasionPercent__NegativeModifier</td>
                <td>@tfgame.Statics.BalanceStatics.EvasionPercent__NegativeCap</td>
                <td></td>
            </tr>
            <tr>
                <td><span class='icon-timesattacking'></span> evasion NEGATION (%) <red>*</red></td>
                <td>@Html.TextBoxFor(m => m.EvasionNegationPercent, new { @id = "EvasionNegationPercent", @negative_mod = tfgame.Statics.BalanceStatics.EvasionNegationPercent__NegativeModifier, @negative_cap = tfgame.Statics.BalanceStatics.EvasionNegationPercent__NegativeCap })</td>
                <td>@tfgame.Statics.BalanceStatics.EvasionNegationPercent__Value</td>
                <td>@tfgame.Statics.BalanceStatics.EvasionNegationPercent__NegativeModifier</td>
                <td>@tfgame.Statics.BalanceStatics.EvasionNegationPercent__NegativeCap</td>
                <td></td>
            </tr>
            <tr>
                <td>
                    <span class='icon-cleansemeditate'></span>Extra mana recovered from meditating (Amt)
                </td>
                <td>@Html.TextBoxFor(m => m.MeditationExtraMana, new { @id = "MeditationExtraMana", @negative_mod = tfgame.Statics.BalanceStatics.MeditationExtraMana__NegativeModifier, @negative_cap = tfgame.Statics.BalanceStatics.MeditationExtraMana__NegativeCap })</td>
                <td>@tfgame.Statics.BalanceStatics.MeditationExtraMana__Value</td>
                <td>@tfgame.Statics.BalanceStatics.MeditationExtraMana__NegativeModifier</td>
                <td>@tfgame.Statics.BalanceStatics.MeditationExtraMana__NegativeCap</td>
                <td></td>
            </tr>
            <tr>
                <td><span class='icon-cleansemeditate'></span>Extra willpower recovered from cleansing (Amt)</td>
                <td>@Html.TextBoxFor(m => m.CleanseExtraHealth, new { @id = "CleanseExtraHealth", @negative_mod = tfgame.Statics.BalanceStatics.CleanseExtraHealth__NegativeModifier, @negative_cap = tfgame.Statics.BalanceStatics.CleanseExtraHealth__NegativeCap })</td>
                <td>@tfgame.Statics.BalanceStatics.CleanseExtraHealth__Value</td>
                <td>@tfgame.Statics.BalanceStatics.CleanseExtraHealth__NegativeModifier</td>
                <td>@tfgame.Statics.BalanceStatics.CleanseExtraHealth__NegativeCap</td>
                <td></td>
            </tr>
            <tr>
                <td><span class='icon-timesattacking'></span>Extra spell critical hit chance (%)</td>
                <td>@Html.TextBoxFor(m => m.ExtraSkillCriticalPercent, new { @id = "ExtraSkillCriticalPercent", @negative_mod = tfgame.Statics.BalanceStatics.ExtraSkillCriticalPercent__NegativeModifier, @negative_cap = tfgame.Statics.BalanceStatics.ExtraSkillCriticalPercent__NegativeCap })</td>
                <td>@tfgame.Statics.BalanceStatics.ExtraSkillCriticalPercent__Value</td>
                <td>@tfgame.Statics.BalanceStatics.ExtraSkillCriticalPercent__NegativeModifier</td>
                <td>@tfgame.Statics.BalanceStatics.ExtraSkillCriticalPercent__NegativeCap</td>
                <td></td>
            </tr>
            <tr>
                <td>Action point discount when moving (Amt)</td>
                <td>@Html.TextBoxFor(m => m.MoveActionPointDiscount, new { @id = "MoveActionPointDiscount", @negative_mod = tfgame.Statics.BalanceStatics.MoveActionPointDiscount__NegativeModifier, @negative_cap = tfgame.Statics.BalanceStatics.MoveActionPointDiscount__NegativeCap })</td>
                <td>@tfgame.Statics.BalanceStatics.MoveActionPointDiscount__Value</td>
                <td>@tfgame.Statics.BalanceStatics.MoveActionPointDiscount__NegativeModifier</td>
                <td>@tfgame.Statics.BalanceStatics.MoveActionPointDiscount__NegativeCap</td>
                <td></td>
            </tr>
            <tr>
                <td><span class='icon-timesattacking'></span>Extra transformation energy from spells (%)</td>
                <td>@Html.TextBoxFor(m => m.SpellExtraTFEnergyPercent, new { @id = "SpellExtraTFEnergyPercent", @negative_mod = tfgame.Statics.BalanceStatics.SpellExtraTFEnergyPercent__NegativeModifier, @negative_cap = tfgame.Statics.BalanceStatics.SpellExtraTFEnergyPercent__NegativeCap })</td>
                <td>@tfgame.Statics.BalanceStatics.SpellExtraTFEnergyPercent__Value</td>
                <td>@tfgame.Statics.BalanceStatics.SpellExtraTFEnergyPercent__NegativeModifier</td>
                <td>@tfgame.Statics.BalanceStatics.SpellExtraTFEnergyPercent__NegativeCap</td>
                <td></td>
            </tr>
            <tr>
                <td><span class='icon-timesattacking'></span>Extra willpower damage from spells (%)</td>
                <td>@Html.TextBoxFor(m => m.SpellExtraHealthDamagePercent, new { @id = "SpellExtraHealthDamagePercent", @negative_mod = tfgame.Statics.BalanceStatics.SpellExtraHealthDamagePercent__NegativeModifier, @negative_cap = tfgame.Statics.BalanceStatics.SpellExtraHealthDamagePercent__NegativeCap })</td>
                <td>@tfgame.Statics.BalanceStatics.SpellExtraHealthDamagePercent__Value</td>
                <td>@tfgame.Statics.BalanceStatics.SpellExtraHealthDamagePercent__NegativeModifier</td>
                <td>@tfgame.Statics.BalanceStatics.SpellExtraHealthDamagePercent__NegativeCap</td>
                <td></td>
            </tr>
            <tr>
                <td><span class='icon-cleansemeditate'></span>Extra transformation energy removal when cleansing (%)</td>
                <td>@Html.TextBoxFor(m => m.CleanseExtraTFEnergyRemovalPercent, new { @id = "CleanseExtraTFEnergyRemovalPercent", @negative_mod = tfgame.Statics.BalanceStatics.CleanseExtraTFEnergyRemovalPercent__NegativeModifier, @negative_cap = tfgame.Statics.BalanceStatics.CleanseExtraTFEnergyRemovalPercent__NegativeCap })</td>
                <td>@tfgame.Statics.BalanceStatics.CleanseExtraTFEnergyRemovalPercent__Value</td>
                <td>@tfgame.Statics.BalanceStatics.CleanseExtraTFEnergyRemovalPercent__NegativeModifier</td>
                <td>@tfgame.Statics.BalanceStatics.CleanseExtraTFEnergyRemovalPercent__NegativeCap</td>
                <td></td>
            </tr>
            <tr>
                <td>Misfire chance reduction (%)</td>
                <td>
                    @Html.TextBoxFor(m => m.SpellMisfireChanceReduction, new
           {
               @id = "SpellMisfireChanceReduction",
               @negative_mod = tfgame.Statics.BalanceStatics.SpellMisfireChanceReduction__NegativeModifier,
               @negative_cap = tfgame.Statics.BalanceStatics.SpellMisfireChanceReduction__NegativeCap
           })
                </td>
                <td>@tfgame.Statics.BalanceStatics.SpellMisfireChanceReduction__Value</td>
                <td>@tfgame.Statics.BalanceStatics.SpellMisfireChanceReduction__NegativeModifier</td>
                <td>@tfgame.Statics.BalanceStatics.SpellMisfireChanceReduction__NegativeCap</td>
                <td></td>
            </tr>
            <tr>
                <td><span class='icon-defense'></span>Willpower damage reduction when hit by a spell (%)</td>
                <td>
                    @Html.TextBoxFor(m => m.SpellHealthDamageResistance, new
           {
               @id = "SpellHealthDamageResistance",
               @negative_mod = tfgame.Statics.BalanceStatics.SpellHealthDamageResistance__NegativeModifier,
               @negative_cap = tfgame.Statics.BalanceStatics.SpellHealthDamageResistance__NegativeCap
           })
                </td>
                <td>@tfgame.Statics.BalanceStatics.SpellHealthDamageResistance__Value</td>
                <td>@tfgame.Statics.BalanceStatics.SpellHealthDamageResistance__NegativeModifier</td>
                <td>@tfgame.Statics.BalanceStatics.SpellHealthDamageResistance__NegativeCap</td>
                <td></td>
            </tr>
            <tr>
                <td><span class='icon-defense'></span>Transformation energy damage reduction when hit by a spell (%)</td>
                <td>
                    @Html.TextBoxFor(m => m.SpellTFEnergyDamageResistance, new
       {
           @id = "SpellTFEnergyDamageResistance",
           @negative_mod = tfgame.Statics.BalanceStatics.SpellTFEnergyDamageResistance__NegativeModifier,
           @negative_cap = tfgame.Statics.BalanceStatics.SpellTFEnergyDamageResistance__NegativeCap
       })
                </td>
                <td>@tfgame.Statics.BalanceStatics.SpellTFEnergyDamageResistance__Value</td>
                <td>@tfgame.Statics.BalanceStatics.SpellTFEnergyDamageResistance__NegativeModifier</td>
                <td>@tfgame.Statics.BalanceStatics.SpellTFEnergyDamageResistance__NegativeCap</td>
                <td></td>
            </tr>
            <tr>
                <td>Extra inventory spaces (Amt)</td>
                <td>
                    @Html.TextBoxFor(m => m.ExtraInventorySpace, new
       {
           @id = "ExtraInventorySpace",
           @negative_mod = tfgame.Statics.BalanceStatics.ExtraInventorySpace__NegativeModifier,
           @negative_cap = tfgame.Statics.BalanceStatics.ExtraInventorySpace__NegativeCap
       })
                </td>
                <td>@tfgame.Statics.BalanceStatics.ExtraInventorySpace__Value</td>
                <td>@tfgame.Statics.BalanceStatics.ExtraInventorySpace__NegativeModifier</td>
                <td>@tfgame.Statics.BalanceStatics.ExtraInventorySpace__NegativeCap</td>
                <td></td>
            </tr>
        </tbody>
    </table>

    <input type="submit" value="Send" />

}

<br />

@*<button type="button" onclick="SetCodeText()">Generate Code</button>*@

<br />
@*<p class="bad">Before submitting a contribution, please paste this text into the relevant 'effects' field.  This will help save some time during implementation and testing. </p>
    <textarea rows="4" cols="50" id="textCode">*@

</textarea>



<script>

    var choice = "full";

    $(document).ready(function () {

        recalculateCells();
        recalculateValues();

        // remove -99999 minimum cap
        var minCapCells = $('table tbody td:nth-child(5)');
        minCapCells.each(function () {
            if ($(this).html() == "-99999") {
                $(this).html("");
            }
        });

        // remove negative modifier if 0
        var minCapCells = $('table tbody td:nth-child(4)');
        minCapCells.each(function () {
            if ($(this).html() == "0") {
                $(this).html("");
            }
        });

        $('table input[type=text]').each(function () {

            // remove text if value is unused
            if ($(this).val() == "0.00") {
                $(this).val("");
            }


            $(this).blur(function () {

                //-----------------------------------

                recalculateCells();
                recalculateValues();
            });
        });

        $("#mobilityType").change(function () {
            choice = $("#mobilityType").val();

            if (choice == "full") {
                $("#desired").html("0");
                $("#curseDurationWrapper").hide();
            } else if (choice == "item") {
                $("#desired").html("25");
                $("#curseDurationWrapper").hide();
            } else if (choice == "pet") {
                $("#desired").html("50");
                $("#curseDurationWrapper").hide();
            } else if (choice == "curse") {
                $("#desired").html("-400");
                $("#curseDurationWrapper").show();
            }
        });

        $("#curseDurationInput").focusout(function () {
            recalculateValues();
        });

        // default page load
        $("#desired").html("0");




    });



    function recalculateValues() {

        var cells = $('table tbody td:nth-child(6)');

        var total = 0;
        var absolute_total = 0;

        cells.each(function () {
            //alert($(this).html());
            if ($(this).html() != "") {
                total += parseFloat($(this).html());
                absolute_total += Math.abs(parseFloat($(this).html()));
            }
        });

        if (choice == "curse") {
            total *= $("#curseDurationInput").val();
        }

        $("#total").html(total);
        $("#absolute_total").html(absolute_total);
        var totalDesired = parseFloat($("#desired").html());



        if (Math.abs(total - totalDesired) >= 10) {
            $("#total").addClass("bad");
            $("#total").removeClass("good");
        } else {
            $("#total").addClass("good");
            $("#total").removeClass("bad");
        }

    }

    function recalculateCells() {

        var cells = $('table tbody td:nth-child(5)');

        cells.each(function () {
            var localcost = $(this).parent().find("td").eq(2).html();

            var myvalue = $(this).parent().find("input").val();


            var calculated = localcost * myvalue;


            var calculateCell = $(this).parent().find("td").eq(5);

            if (calculated != "" && calculated != 0) {

                var inputCell = $(this).parent().find("input");

                // decrease if there's a negative modifier
                if ((inputCell.attr("negative-mod") != undefined) && (calculated < 0) && (parseFloat(inputCell.attr("negative-mod")) != 0)) {
                    calculated *= parseFloat(inputCell.attr("negative-mod"));
                }

                // add negative clamp if it has one
                if ((inputCell.attr("negative-cap") != undefined) && (calculated < parseFloat(inputCell.attr("negative-cap")))) {
                    calculated = parseFloat(inputCell.attr("negative-cap"));
                }


                calculateCell.html(calculated);
                if (calculated > 0) {
                    calculateCell.removeClass("bad");
                    calculateCell.addClass("good");
                } else {
                    calculateCell.removeClass("good");
                    calculateCell.addClass("bad");
                }
            } else {
                calculateCell.html("");
                $(this).removeClass("good");
                $(this).removeClass("bad");
            }
        });
    }


    function Clear() {

        var tablerow = $('table tr');
        $("#balanceTable > tbody > tr").each(function () {
            var cell = $(this).find('input[type=text]');

            var rowtotal = $(this).find('td:nth-child(4)');
            cell.val("");
            rowtotal.html("");
        });

        recalculateValues();

    }

</script>

<style>
    table {
        padding: 3px;
        border: 1px solid black;
    }

    th {
        background-color: black;
        color: white;
        text-align: center;
    }

    tr {
        padding: 3px;
        border: 1px solid black;
    }

        tr:nth-child(odd) {
            background-color: lightgray;
        }

    td {
        text-align: center;
    }


    #desired {
        font-size: 15px;
    }

    red {
        color: red;
        font-weight: 900;
    }
</style>