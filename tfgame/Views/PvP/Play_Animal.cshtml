@model tfgame.ViewModels.GameOverViewModelAnimal
@using tfgame.CustomHtmlHelpers
@using tfgame.Procedures
@using tfgame.Statics




<head>


    <link href="~/Content/PvP.css" rel="stylesheet" />
    <script src="~/Scripts/jquery-2.1.0.js"></script>
</head>

@{
    if (@ViewBag.WorldTurnNumber >= @PvPStatics.RoundDuration)
    {
        <div class="inbetweenRoundNotice">The round has ended.  Check back soon to start again on a fresh round.</div>
    }
}

<div class="mainPageWorldStats">
    <span class="icon-turnNumber">Turn #<b>@ViewBag.WorldTurnNumber/@PvPStatics.RoundDuration</b></span>
    Transformania Time has <b>@Model.WorldStats.TotalPlayers</b> players, <b>@Model.WorldStats.CurrentOnlinePlayers</b> of which are currently online.
</div>

<span id="timerBox" class="icon-clock" title="Click to see how long ago the last update ran."></span>
@Html.ActionLink("Map", "WorldMap", "PvP")
@Html.ActionLink("Last Actions", "ViewLog", "PvP")
@Html.ActionLink("Friends", "MyFriends", "PvP")
@Html.ActionLink("Chat", "Chat", "PvP", new { room = "global" }, new { target = "_blank" })
@Html.ActionLink("Covenant", "MyCovenant", "Covenant")
@Html.ActionLink("Settings", "Settings", "PvP")
@{if (Model.NewMessageCount > 0)
{
    <span class="newlink">
        @Html.ActionLink("(" + Model.NewMessageCount + " unread)", "MyMessages", "PvP")
    </span>
}
else
{
    @Html.ActionLink("Inbox", "MyMessages", "PvP")
}
}
@Html.ActionLink("Submit Content", "Contribute", "PvP", new { Id = -1 }, null)
@Html.ActionLink("Start again as someone else", "Restart", "PvP")
@{
    if (Model.You.MembershipId == 69)
    {
        @Html.ActionLink("Admin", "Index", "PvPAdmin")
    }
}

<div>
    <span class="result">@Html.Raw(ViewBag.Result)</span>
    <span class="error">@ViewBag.ErrorMessage</span>
    <span class="suberror">@ViewBag.SubErrorMessage</span>
</div>

<div style="position: relative; float: left;">
    <div class="petItemPortrait" style="background-image: url(../Images/PvP/animalPortraits/@ViewBag.AnimalImgUrl);">
        @CharactersHere.PrintOwnerSubPortrait(Model.OwnedBy)
    </div>

    <div class="petItemInfo">
        <p>Your name is <b>@Model.You.FirstName @Model.You.LastName</b>, or at least it used to be.  At the height of your humanity you achieved level <b>@Model.You.Level</b> with @Model.You.XP experience points toward the next.  But now it's time to embrace your new existence as a <b>@Model.Form.FriendlyName</b>.</p>
        <p>
            @Model.Form.Description
            <b>
                @{
                    if (Model.You.IsPetToId == -1)
                    {
                        <span>You are feral and can move freely about the world until a new master tames you.</span>
                    }
                    else
                    {
                        <span><br><br>You have been tamed by @Html.ActionLink(Model.OwnedBy.Player.FirstName + " " + Model.OwnedBy.Player.LastName, "LookAtPlayer", "PvP", new { id = Model.OwnedBy.Player.Id }, null) and will follow your master wherever they go.</span>
                    }
                }
            </b>
        </p>
    </div>
</div>

<p>
    <center><span class="place">@Model.Location.Name [@Model.Location.X,@Model.Location.Y]<br /> </span></center>
    <span class="locationDescription">@Model.Location.Description</span>
</p>
<center>
    <table class="tableLines">
        <tr>
            <td></td>
            <td class="navcell">
                @*NORTH*@

                @{
                    if (Model.Location.Name_North != null)
                    {
                        if (Model.You.Mobility == "full")
                        {
                            @Html.ActionLink(Model.Location.FriendlyName_North, "MoveTo", "PvP", new { locname = Model.Location.Name_North }, null)
                        }
                        else if (Model.You.Mobility == "animal" && Model.You.IsPetToId == -1)
                        {
                            @Html.ActionLink(Model.Location.FriendlyName_North, "MoveTo", "PvP", new { locname = Model.Location.Name_North }, null)
                        }
                        else if (Model.You.Mobility == "animal" && Model.You.IsPetToId != -1)
                        {
                            <span>@Model.Location.FriendlyName_North</span>
                        }
                    }
                }

            </td>
            <td></td>
        </tr>
        <tr>
            <td class="navcell">
                @*WEST*@


                @{
                    if (Model.Location.Name_West != null)
                    {
                        if (Model.You.Mobility == "full")
                        {
                            @Html.ActionLink(Model.Location.FriendlyName_West, "MoveTo", "PvP", new { locname = Model.Location.Name_West }, null)
                        }
                        else if (Model.You.Mobility == "animal" && Model.You.IsPetToId == -1)
                        {
                            @Html.ActionLink(Model.Location.FriendlyName_West, "MoveTo", "PvP", new { locname = Model.Location.Name_West }, null)
                        }
                        else if (Model.You.Mobility == "animal" && Model.You.IsPetToId != -1)
                        {
                            <span>@Model.Location.FriendlyName_West</span>
                        }
                    }
                }

            </td>
            <td id="location"></td>
            <td class="navcell">
                @*EAST*@



                @{
                    if (Model.Location.Name_East != null)
                    {

                        if (Model.You.Mobility == "full")
                        {
                            @Html.ActionLink(Model.Location.FriendlyName_East, "MoveTo", "PvP", new { locname = Model.Location.Name_East }, null)
                        }
                        else if (Model.You.Mobility == "animal" && Model.You.IsPetToId == -1)
                        {
                            @Html.ActionLink(Model.Location.FriendlyName_East, "MoveTo", "PvP", new { locname = Model.Location.Name_East }, null)
                        }
                        else if (Model.You.Mobility == "animal" && Model.You.IsPetToId != -1)
                        {
                            <span>@Model.Location.FriendlyName_East</span>
                        }
                    }
                }
            </td>
        </tr>
        <tr>
            <td></td>

            <td class="navcell">
                @*SOUTH*@


                @{
                    if (Model.Location.Name_South != null)
                    {

                        if (Model.You.Mobility == "full")
                        {
                            @Html.ActionLink(Model.Location.FriendlyName_South, "MoveTo", "PvP", new { locname = Model.Location.Name_South }, null)
                        }
                        else if (Model.You.Mobility == "animal" && Model.You.IsPetToId == -1)
                        {
                            @Html.ActionLink(Model.Location.FriendlyName_South, "MoveTo", "PvP", new { locname = Model.Location.Name_South }, null)
                        }
                        else if (Model.You.Mobility == "animal" && Model.You.IsPetToId != -1)
                        {
                            <span>@Model.Location.FriendlyName_South</span>
                        }
                    }

                }
            </td>
            <td></td>
        </tr>
    </table>
</center>

<h2>Players here:</h2>

@*all players who are online*@

@{
    foreach (tfgame.ViewModels.PlayerFormViewModel p in Model.PlayersHere.Where(p => PlayerProcedures.PlayerIsOffline(p.Player) == false).OrderByDescending(p => p.Player.Level))
    {
        <div class="onlineCharWrapper">
            <div>@Html.Partial("Player_Partial", p)</div>
            <div class="commandWrapper" style="height: 24px;">
                @Html.ActionLink("Snarl", "AnimalAction", "PvP", new { actionName = "snarl", targetId = p.Player.Id }, new { @class = "check" })
                @Html.ActionLink("Lick", "AnimalAction", "PvP", new { actionName = "lick", targetId = p.Player.Id }, new { @class = "check" })
                @Html.ActionLink("Headbutt", "AnimalAction", "PvP", new { actionName = "headbutt", targetId = p.Player.Id }, new { @class = "check" })
                @Html.ActionLink("Nuzzle", "AnimalAction", "PvP", new { actionName = "nuzzle", targetId = p.Player.Id }, new { @class = "check" })
            </div>
        </div>
    }
}
@{
    if (Model.IsPermanent == false)
    {
        <p>
            Chance to return human:  @Model.StruggleChance %.
            @Html.ActionLink("Fight your transformation and attempt to return to an animate form!", "FightTheTransformation", "PvP")
        </p>
    }
}

@*all players who are offline*@
<div style="clear:both;"></div>
<div id="showOfflinePlayersButton" style="margin-left: auto; margin-right: auto;">Show Offline Players Here (@Model.PlayersHere.Where(p => PlayerProcedures.PlayerIsOffline(p.Player) == true).Count())</div>

<div id="offlinePlayersWrapper">

    @{
        foreach (tfgame.ViewModels.PlayerFormViewModel p in Model.PlayersHere.Where(p => PlayerProcedures.PlayerIsOffline(p.Player) == true).OrderByDescending(p => p.Player.Level))
        {

            <p>
                <div class="onlineCharWrapper">
                    <div>@Html.Partial("Player_Partial", p)</div>
                    <div class="commandWrapper" style="height: 24px;">
                        @Html.ActionLink("Snarl", "AnimalAction", "PvP", new { actionName = "snarl", targetId = p.Player.Id }, new { @class = "check" })
                        @Html.ActionLink("Lick", "AnimalAction", "PvP", new { actionName = "lick", targetId = p.Player.Id }, new { @class = "check" })
                        @Html.ActionLink("Headbutt", "AnimalAction", "PvP", new { actionName = "headbutt", targetId = p.Player.Id }, new { @class = "check" })
                        @Html.ActionLink("Nuzzle", "AnimalAction", "PvP", new { actionName = "nuzzle", targetId = p.Player.Id }, new { @class = "check" })
                        </div>
                    </div>
</p>
        }
    }

</div>

@Html.Partial("partial/partial_recentActivity", Model.LocationLog)

<script>

    var attacksMade = @Model.You.TimesAttackingThisUpdate;
    var turnNo = @ViewBag.WorldTurnNumber;
    var togglestate = 0;
    var blinkEnabled = 0;

    $(document).ready(function () {
        $("#offlinePlayersWrapper").hide();

        // show offline player section when player clicks on the proper div
        $("#showOfflinePlayersButton").click(function () {
            $("#showOfflinePlayersButton").hide();
            $("#offlinePlayersWrapper").show();
        });

        $("#timerBox").click(function () {

            alert("The last update was  @CharactersHere.DatetimeToTimeago(Model.LastUpdateTimestamp) (based on when this page was loaded.)  Updates should happen every 10 minutes.");


        });

   

        $(".check").each(function() {
            if (attacksMade>=1) {
                $( this ).attr("href", "#");
                $( this ).addClass("disabled");
            }
        });


        var myVar=setInterval(function(){pingForUpdate()},30000);
        var myVa2r=setInterval(function(){titleToggle()},1000);

    });

    function pingForUpdate() {
        $.ajax({
            url: 'PvP/ClientUpdateCheck/',
            type: 'POST',
            fail: fail,
            success: pingDone,
            dataType: 'text'
        });
    }

    function pingDone(data) {
        if (data > turnNo) {
            turnNo = data;
            blinkEnabled = 1;
        }
    }

    function titleToggle() {

        if (blinkEnabled==1) {
            if (togglestate == 0) {
                $('title').text('Transformania Time!');
                togglestate = 1;
            } else if (togglestate == 1){
                $('title').text('[UPDATED--reload page!]');
                togglestate = 0;
            }
        }
    }

    function fail() {
        // alert("fail");
    }



</script>