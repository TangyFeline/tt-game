@model tfgame.ViewModels.FriendPageViewModel
@using tfgame.CustomHtmlHelpers
@using tfgame.Procedures

@Html.ActionLink("Back to game", "Play", "PvP")

<p style="text-align: center; margin-top:0px;">
    @Html.ActionLink("Search for player by name", "PlayerLookup", "PvP")
</p>

<div class="divblock">
    <div class="divblock">
        <h1 style="margin-top:0px;">Active Friends (@Model.ConfirmedFriends.Count())</h1>

        @{
            foreach (tfgame.ViewModels.FriendPlayerViewModel fp in Model.ConfirmedFriends.Where(m => m.dbPlayer!=null))
            {
                <div class="friendListing">

                    @{
                if (fp.dbPlayer.Mobility == "full")
                {
                    <span>
                        @Html.ActionLink(fp.dbPlayer.GetFullName() + "  (#" + fp.dbPlayer.MembershipId + ")", "LookAtPlayer", "PvP", new { id = fp.dbPlayer.Id }, null)
                    </span>

                   <span class="timeago">Online as of @CharactersHere.DatetimeToTimeago(fp.dbPlayer.OnlineActivityTimestamp)</span>

                }
                else if (fp.dbPlayer.Mobility == "inanimate")
                {
                    <span>
                        @Html.ActionLink(fp.dbPlayer.GetFullName() + " (inanimate)" + "  (#" + fp.dbPlayer.MembershipId + ")", "LookAtPlayer", "PvP", new { id = fp.dbPlayer.Id }, null)
                    </span>
                        
                       <span class="timeago">Online as of @CharactersHere.DatetimeToTimeago(fp.dbPlayer.OnlineActivityTimestamp)</span>


                }
                
                 else if (fp.dbPlayer.Mobility == "animal")
                {
                    <span>
                        @Html.ActionLink(fp.dbPlayer.GetFullName() + " (animal)" + "  (#" + fp.dbPlayer.MembershipId + ")", "LookAtPlayer", "PvP", new { id = fp.dbPlayer.Id }, null)
                    </span>
                        
                       <span class="timeago">Online as of @CharactersHere.DatetimeToTimeago(fp.dbPlayer.OnlineActivityTimestamp)</span>


                }

                <span style="float: right">
                    @Html.ActionLink("Defriend", "RespondToFriendRequest", "PvP", new { id = fp.dbFriend.Id, response = "defriend" }, null)
                </span>

}

                </div>
            }

        }



        <h1>Requests sent to You (@Model.RequestsForMe.Count())</h1>

        @{foreach (tfgame.ViewModels.FriendPlayerViewModel fp2 in Model.RequestsForMe.Where(m => m.dbPlayer != null))
        {
            <div class="friendListing">

                @fp2.dbPlayer.GetFullName()
                @Html.ActionLink("Accept", "RespondToFriendRequest", "PvP", new { id = fp2.dbFriend.Id, response = "accept" }, null)
                @Html.ActionLink("Deny", "RespondToFriendRequest", "PvP", new { id = fp2.dbFriend.Id, response = "deny" }, null)

            </div>
        }
        }


        <h1>Requests you've sent (@Model.MyOutgoingRequests.Count())</h1>

        @{
            foreach (tfgame.ViewModels.FriendPlayerViewModel fp3 in Model.MyOutgoingRequests.Where(m => m.dbPlayer != null))
            {
                <div class="friendListing">
                    @fp3.dbPlayer.GetFullName()
                    @Html.ActionLink("Cancel", "RespondToFriendRequest", "PvP", new { id = fp3.dbFriend.Id, response = "cancel" }, null)
                </div>
            }
        }



    </div>

    <div class="divblock">
        <p>You may have more friends who have not yet made a character this round.  They will appear on this page when they have.</p>
    </div>



    <div style="position: relative; float: left;">
        <p>
            @Html.ActionLink("Back to game", "Play", "PvP")
        </p>
    </div>

</div>

<style>
    h1{
        text-align: center;
    }
    .friendListing {
        width: 100%;
        border: 1px solid lightgray;
        position: relative;
        float: left;
        margin-top: 5px;
        padding:0;
    }

    .friendonline {
        color: green;
    }

    .friendoffline {
        color: red;
    }

    .divblock {
        position: relative;
        float: left;
        width: 100%;
    }
</style>